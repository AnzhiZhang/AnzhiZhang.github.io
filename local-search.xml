<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring Boot Redis 缓存及 ObjectMapper 配置</title>
    <link href="/zh-CN/2024/06/c71deb60bb2e/"/>
    <url>/zh-CN/2024/06/c71deb60bb2e/</url>
    
    <content type="html"><![CDATA[<blockquote><p>记录一些 Redis 缓存及 ObjectMapper 的配置。</p></blockquote><span id="more"></span><h2 id="Object-Mapper"><a href="#Object-Mapper" class="headerlink" title="Object Mapper"></a>Object Mapper</h2><p>首先提供一个全局的 JsonMapper 作为 jackson 的 ObjectMapper，用于序列化和反序列化。</p><p>顺便解决 jsr310 相关的日期序列化问题<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="PhilippS. [Is there a jackson datatype module for JDK8 java.time?](https://stackoverflow.com/questions/21384820/is-there-a-jackson-datatype-module-for-jdk8-java-time/32202201#32202201). 2015-08-25. [Archived](https://web.archive.org/web/20240603104141/https://stackoverflow.com/questions/21384820/is-there-a-jackson-datatype-module-for-jdk8-java-time/32202201#32202201) on 2024-06-03. Retrieved 2024-06-02.">[1]</span></a></sup><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Sergio Luigi Alves. [Could not write JSON: Java 8 date/time type `java.time.LocalDate`](https://stackoverflow.com/questions/74187493/could-not-write-json-java-8-date-time-type-java-time-localdate/74510912#74510912). 2015-08-25. [Archived](https://web.archive.org/web/20240603104200/https://stackoverflow.com/questions/74187493/could-not-write-json-java-8-date-time-type-java-time-localdate/74510912#74510912) on 2024-06-03. Retrieved 2024-06-02.">[2]</span></a></sup>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.json.JsonMapper;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JacksonConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ObjectMapper <span class="hljs-title function_">jsonMapper</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> JsonMapper<br>                .builder()<br>                .findAndAddModules()<br>                .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="hljs-literal">false</span>)<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Redis-Cache-Manager"><a href="#Redis-Cache-Manager" class="headerlink" title="Redis Cache Manager"></a>Redis Cache Manager</h2><p>RedisCacheManager 配置，使用 jsonMapper 作为序列化器，我们需要设置 <code>DefaultTyping</code> 以支持反序列化。</p><p>根据<a href="https://www.javadoc.io/static/com.fasterxml.jackson.core/jackson-databind/2.17.1/com/fasterxml/jackson/databind/ObjectMapper.DefaultTyping.html">文档</a>，此处我们选择 <code>NON_FINAL_AND_ENUMS</code>，<code>EVERYTHING</code> 已经弃用且不建议使用。</p><p>更多信息可以参考：</p><ul><li><a href="https://github.com/FasterXML/jackson-databind/issues/3512#issuecomment-1150913172">https://github.com/FasterXML/jackson-databind/issues/3512#issuecomment-1150913172</a></li><li><a href="https://github.com/spring-projects/spring-data-redis/issues/1566">https://github.com/spring-projects/spring-data-redis/issues/1566</a></li><li><a href="https://github.com/spring-projects/spring-data-redis/commit/93c25b0608173fafaddb485c539b84ab4db5801d">https://github.com/spring-projects/spring-data-redis/commit/93c25b0608173fafaddb485c539b84ab4db5801d</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonTypeInfo;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> jakarta.annotation.Resource;<br><span class="hljs-keyword">import</span> lombok.RequiredArgsConstructor;<br><span class="hljs-keyword">import</span> org.springframework.cache.annotation.EnableCaching;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.RedisSerializationContext.SerializationPair;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;<br><br><span class="hljs-meta">@EnableCaching</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheConfig</span> &#123;<br>    <span class="hljs-meta">@Resource(name = &quot;jsonMapper&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ObjectMapper jsonMapper;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisCacheManager <span class="hljs-title function_">cacheManger</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        <span class="hljs-comment">// serializer</span><br>        RedisSerializer&lt;Object&gt; serializer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>(<br>                jsonMapper<br>                        .copy()<br>                        .activateDefaultTyping(<br>                                jsonMapper.getPolymorphicTypeValidator(),<br>                                ObjectMapper.DefaultTyping.NON_FINAL_AND_ENUMS,<br>                                JsonTypeInfo.As.PROPERTY<br>                        )<br>        );<br><br>        <span class="hljs-comment">// cache manager</span><br>        <span class="hljs-keyword">return</span> RedisCacheManager<br>                .builder(redisConnectionFactory)<br>                .cacheDefaults(<br>                        RedisCacheConfiguration<br>                                .defaultCacheConfig()<br>                                .computePrefixWith(name -&gt; name + <span class="hljs-string">&quot;:&quot;</span>)<br>                                .disableCachingNullValues()<br>                                .serializeValuesWith(SerializationPair.fromSerializer(serializer))<br>                )<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>PhilippS. <a href="https://stackoverflow.com/questions/21384820/is-there-a-jackson-datatype-module-for-jdk8-java-time/32202201#32202201">Is there a jackson datatype module for JDK8 java.time?</a>. 2015-08-25. <a href="https://web.archive.org/web/20240603104141/https://stackoverflow.com/questions/21384820/is-there-a-jackson-datatype-module-for-jdk8-java-time/32202201#32202201">Archived</a> on 2024-06-03. Retrieved 2024-06-02.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>Sergio Luigi Alves. <a href="https://stackoverflow.com/questions/74187493/could-not-write-json-java-8-date-time-type-java-time-localdate/74510912#74510912">Could not write JSON: Java 8 date&#x2F;time type <code>java.time.LocalDate</code></a>. 2015-08-25. <a href="https://web.archive.org/web/20240603104200/https://stackoverflow.com/questions/74187493/could-not-write-json-java-8-date-time-type-java-time-localdate/74510912#74510912">Archived</a> on 2024-06-03. Retrieved 2024-06-02.<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>Jérôme Waibel. <a href="https://medium.com/@jerome.waibel/caching-with-spring-boot-and-redis-can-be-tricky-5f99548601b9">Caching with Spring Boot and Redis can be tricky!</a>. 2023-05-31. <a href="https://web.archive.org/web/20240603131015/https://medium.com/@jerome.waibel/caching-with-spring-boot-and-redis-can-be-tricky-5f99548601b9">Archived</a> on 2024-06-03. Retrieved 2024-06-03.<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>软件开发</category>
      
      <category>后端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Spring Boot</tag>
      
      <tag>Java</tag>
      
      <tag>Redis</tag>
      
      <tag>Json</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024年5月10日，一段关于教育的深夜对话</title>
    <link href="/zh-CN/2024/05/ab8437d8f1f6/"/>
    <url>/zh-CN/2024/05/ab8437d8f1f6/</url>
    
    <content type="html"><![CDATA[<p>事情的起因：<a href="https://www.bilibili.com/video/BV1Uw4m1X7vS/">一场骗子专家和无能家长对中国青少年的围剿｜赵菊英事件Reaction</a></p><span id="more"></span><p><img src="https://picture.zhanganzhi.com/2024/05/09/y276e85.png" alt="对话全文"></p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>杂谈</tag>
      
      <tag>大学</tag>
      
      <tag>中国</tag>
      
      <tag>教育</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 17+ Output Unicode Characters on Windows Showing Question Marks Reason and Solution</title>
    <link href="/en/2024/04/da97145e767c/"/>
    <url>/en/2024/04/da97145e767c/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Java 17+ outputs Unicode characters on Windows platform showing question marks, this article will introduce the reason and solution for this issue.</p></blockquote><span id="more"></span><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>When using Unicode characters output to Windows, it will show question marks, as shown in the following image (using Java 21 here):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;\uD83D\uDE02&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://picture.zhanganzhi.com/2024/04/11/b9fo6os.png" alt="A question mark, indicating a possible encoding issue"></p><h2 id="Reason"><a href="#Reason" class="headerlink" title="Reason"></a>Reason</h2><p>Java 18 implemented a change, <a href="https://openjdk.org/jeps/400">JEP 400: UTF-8 by Default</a>:</p><blockquote><p>Specify UTF-8 as the default charset of the standard Java APIs. With this change, APIs that depend upon the default charset will behave consistently across all implementations, operating systems, locales, and configurations.</p></blockquote><p>It looks good, but one of the goals of this change is:</p><blockquote><p>Standardize on UTF-8 throughout the standard Java APIs, except for <strong>console I&#x2F;O</strong>.</p></blockquote><p>Although our console encoding is UTF-8, <code>PrintStream</code> still uses the default encoding to output content to the console, which may be GBK or Windows-1252 encoding on Windows.</p><p>Additionally, you can check <code>((OutputStreamWriter) System.out.textOut.out).se.cs</code> in debug to confirm the output encoding.</p><p>More detailed discussions can be found in this <a href="https://stackoverflow.com/questions/71685543/java-jdk-18-in-intellij-prints-question-mark-when-i-tried-to-print-unicode-l/71702397#71702397">answer</a><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="skomisa. [Java JDK 18 in IntelliJ prints question mark &quot;?&quot; when I tried to print unicode like &quot;\u1699&quot;](https://stackoverflow.com/a/71702397/19420247). 2022-04-01. [Archived](https://web.archive.org/web/20240411132043/https://stackoverflow.com/questions/71685543/java-jdk-18-in-intellij-prints-question-mark-when-i-tried-to-print-unicode-l/71702397#71702397) on 2024-04-11. Retrieved 2024-04-10.">[1]</span></a></sup>.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ol><li>Downgrade Java version to 17 or below.</li><li>Set the console output character set to UTF-8 encoding.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.setOut(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(FileDescriptor.out), <span class="hljs-literal">true</span>, StandardCharsets.UTF_8));<br></code></pre></td></tr></table></figure><p><img src="https://picture.zhanganzhi.com/2024/04/11/auh1dvl.png" alt="Then it&#39;s resolved"></p><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>skomisa. <a href="https://stackoverflow.com/a/71702397/19420247">Java JDK 18 in IntelliJ prints question mark &quot;?&quot; when I tried to print unicode like &quot;\u1699&quot;</a>. 2022-04-01. <a href="https://web.archive.org/web/20240411132043/https://stackoverflow.com/questions/71685543/java-jdk-18-in-intellij-prints-question-mark-when-i-tried-to-print-unicode-l/71702397#71702397">Archived</a> on 2024-04-11. Retrieved 2024-04-10.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>编码</tag>
      
      <tag>Windows</tag>
      
      <tag>Unicode</tag>
      
      <tag>UTF-8</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 17+ 在 Windows 平台输出 Unicode 字符显示问号的原因与解决方案</title>
    <link href="/zh-CN/2024/04/bb7bc15fe041/"/>
    <url>/zh-CN/2024/04/bb7bc15fe041/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Java 17+ 在 Windows 平台输出 Unicode 字符，会显示问号，本文将介绍该现象的原因与解决方案。</p></blockquote><span id="more"></span><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>当使用 Unicode 字符输出到 Windows 平台时，会显示问号，如下图所示（此处使用 Java 21）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;\uD83D\uDE02&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://picture.zhanganzhi.com/2024/04/11/b9fo6os.png" alt="一个问号，意味着可能出现了编码问题"></p><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>Java 18 实现了一个改动，<a href="https://openjdk.org/jeps/400">JEP 400: UTF-8 by Default</a>：</p><blockquote><p>Specify UTF-8 as the default charset of the standard Java APIs. With this change, APIs that depend upon the default charset will behave consistently across all implementations, operating systems, locales, and configurations.</p></blockquote><p>看起来不错，但是该变动的目标之一是：</p><blockquote><p>Standardize on UTF-8 throughout the standard Java APIs, except for <strong>console I&#x2F;O</strong>.</p></blockquote><p>我们的控制台编码是 UTF-8，但是 <code>PrintStream</code> 仍然使用默认编码向控制台输出内容，在 Windows 平台这可能是 GBK 或 Windows-1252 编码。</p><p>另外，可以在 debug 中查看 <code>((OutputStreamWriter) System.out.textOut.out).se.cs</code> 确认输出编码。</p><p>在这篇<a href="https://stackoverflow.com/questions/71685543/java-jdk-18-in-intellij-prints-question-mark-when-i-tried-to-print-unicode-l/71702397#71702397">回答</a><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="skomisa. [Java JDK 18 in IntelliJ prints question mark &quot;?&quot; when I tried to print unicode like &quot;\u1699&quot;](https://stackoverflow.com/a/71702397/19420247). 2022-04-01. [Archived](https://web.archive.org/web/20240411132043/https://stackoverflow.com/questions/71685543/java-jdk-18-in-intellij-prints-question-mark-when-i-tried-to-print-unicode-l/71702397#71702397) on 2024-04-11. Retrieved 2024-04-10.">[1]</span></a></sup>中可以更看到详细的讨论。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>降级 Java 版本至 17 及以下。</li><li>设置控制台输出字符集为 UTF-8 编码。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.setOut(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(FileDescriptor.out), <span class="hljs-literal">true</span>, StandardCharsets.UTF_8));<br></code></pre></td></tr></table></figure><p><img src="https://picture.zhanganzhi.com/2024/04/11/auh1dvl.png" alt="问题解决了"></p><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>skomisa. <a href="https://stackoverflow.com/a/71702397/19420247">Java JDK 18 in IntelliJ prints question mark &quot;?&quot; when I tried to print unicode like &quot;\u1699&quot;</a>. 2022-04-01. <a href="https://web.archive.org/web/20240411132043/https://stackoverflow.com/questions/71685543/java-jdk-18-in-intellij-prints-question-mark-when-i-tried-to-print-unicode-l/71702397#71702397">Archived</a> on 2024-04-11. Retrieved 2024-04-10.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>软件开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>编码</tag>
      
      <tag>Windows</tag>
      
      <tag>Unicode</tag>
      
      <tag>UTF-8</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【互联网记忆】亲历北京 2022 年中考与中考中招的经历与体会</title>
    <link href="/zh-CN/2024/04/c0cbed737452/"/>
    <url>/zh-CN/2024/04/c0cbed737452/</url>
    
    <content type="html"><![CDATA[<blockquote><p>转载一篇北京 2022 届中考生的博客。</p></blockquote><span id="more"></span><p>原文已被删除，以下为原页面归档：</p><ul><li><a href="https://web.archive.org/web/20220731220127/https://blog.nofated.win/2022/07/31/2022-beijing-high-school-entrance-examination/">20220731</a></li><li><a href="https://web.archive.org/web/20230829120453/https://blog.nofated.win/2022/07/31/2022-beijing-high-school-entrance-examination/">20230829</a></li></ul><p>原文可以在 <a href="https://github.com/Nofated095/blog/blob/0deb322ae5d45409abd094e33d4e8f5226e512a4/source/_posts/2022-beijing-high-school-entrance-examination.md">GitHub</a> 查到（原文件<a href="https://web.archive.org/web/20240411123733/https://raw.githubusercontent.com/Nofated095/blog/0deb322ae5d45409abd094e33d4e8f5226e512a4/source/_posts/2022-beijing-high-school-entrance-examination.md">归档</a>）。</p>]]></content>
    
    
    <categories>
      
      <category>互联网记忆</category>
      
    </categories>
    
    
    <tags>
      
      <tag>互联网记忆</tag>
      
      <tag>北京</tag>
      
      <tag>教育</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么我认为 2024 年中美应该继续扩大交流？</title>
    <link href="/zh-CN/2024/04/4d163fab4447/"/>
    <url>/zh-CN/2024/04/4d163fab4447/</url>
    
    <content type="html"><![CDATA[<blockquote><p>2024 年已经过去了四分之一，这两天在美国访问和与朋友交流，写下了一些观察和随笔，整理成了这篇文章。</p></blockquote><span id="more"></span><p><img src="https://picture.zhanganzhi.com/2024/04/02/3w0ufrh.png" alt="先放一张可爱的照片"></p><p>第一，相对欧洲前两年的高通胀和经济衰退，美国成功按住了通胀和就业，并且开始缩表计划降息，有望实现平稳落地。这背后的原因是很值得琢磨的，无论是相对中国还是欧洲，美国的经济展现出了强劲的动力。</p><p>第二，美国的民间生活已然从疫情中恢复正常，普通人的消费在我看来几乎完全恢复，虽然可能有前两年撒钱的效果，但作为经济的三驾马车之一，民间的消费和信心显然是十分重要的。疫情期间的萧条已经不复存在，我看到的是和往常一样的正常生活。在别的国家，无论是东亚、东南亚、还是欧洲，那些满世界跑满世界玩的美国人也回来了。</p><p>第三，目前中美官方有着互相抹黑和妖魔化的情绪，这显然阻碍了民间的正常交流合作。中国不是一个独裁的封闭国家，美国也不是一个满世界收割的恶魔。中国的外交策略在前两年出现了一些错误的偏移，但我们很高兴地看到在这两年正在正常化。长江黄河不会倒流，中国对外开放的大门只会越来越大，拥抱全球化是历史大势。全球人民的发展不能为了政治和意识形态让路，苏联的悲剧坚决不能重演。这同样也需要民间的努力，增进交流，扩大包容与理解。</p><p>第四，加强文化交流，促进中美民间交流访问。只有面对面的交流、亲身的体验，才能最好地理解一个社会的生活和文化。这也将有助于消除民众间的对立情绪与误解。新闻报道为了流量和话题只会越来越极端，中英两个语言之间没有任何互通之处，这导致大量的人只能从一个封闭的片面了解信息，客观全面的体验和理解是十分必要的。</p><p>第五，中美是世界上最相似的两个大国，包括政治体制、科技发展、主流价值观、自然资源、军事实力、教育水平、文化包容等等。继续扩大多方面合作，尤其是中美科技合作，将为世界的下一个十年注入新的发展动力。</p><p>第六，中美不能允许经济衰落，无论是实现软着陆还是保持强劲增长，都离不开双方的经济流动，经济脱钩不可能、不现实、也绝不能接受。</p><p>第七，全球治理与发展。作为最大的两个区域性大国，中美足以主导全球未来发展。世界多极化和欧洲衰落的今天，更应该创造财富增量、稳定全球治理、增进全球人民福祉。世界上还有大量第三世界国家和地区，中东、非洲、中美洲及南美洲皆有不同程度的动荡和人道主义危机，这些地区发展前景广阔，充满了机遇和挑战。</p><p>列举一些短期内可行的具体措施：</p><ol><li>中国要进一步扩大免签范围，增加英国美国等国家，支持和鼓励旅游增长，进一步提高交通、住宿、出行等便利。</li><li>中国人要更多地走出去，看一看美国的实际生活是怎样的，如果有条件，应该体验几个月日常的生活，多与当地人交流。今天的中国人更愿意去东亚或东南亚旅游，因为那里语言更方便也更便宜。但其实地球的另一面也需要了解，新闻中的描述永远是不完整的，亲眼所见的一些细节才能构建起我们看世界更丰富的角度。</li><li>很多美国人并没有很多欧洲人那么关心政治，这是值得保持的好事。欧洲的发展已经为政治让路太多了，美国也应该让政治斗争降温下来。全世界人民需要继续促进全球化，全世界合作做大蛋糕，让更多人有实现成功和美好生活的可能。</li></ol>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>全球化</tag>
      
      <tag>中国</tag>
      
      <tag>美国</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Can a Function be a Structure Member in C?</title>
    <link href="/en/2024/02/2db431afb19a/"/>
    <url>/en/2024/02/2db431afb19a/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Can a Function be a Structure Member in C?</p></blockquote><span id="more"></span><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><h3 id="Raw-Question"><a href="#Raw-Question" class="headerlink" title="Raw Question"></a>Raw Question</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">Which of the following cannot be a structure member?<br><br>A. Array<br>B. Another structure<br>C. Function<br>D. None of the mentioned<br></code></pre></td></tr></table></figure><p><img src="https://picture.zhanganzhi.com/2024/02/16/kihrafd.png" alt="Raw Question"></p><h3 id="My-First-Idea"><a href="#My-First-Idea" class="headerlink" title="My First Idea"></a>My First Idea</h3><p>I thought the answer was D, because if the array is stored in the structure as a pointer, then reciprocally, the function pointer could reasonably be a member of the structure (in natural language and common sense). For those who don’t know about function pointers, here is an example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">person</span> &#123;</span><br>    <span class="hljs-type">char</span> name[<span class="hljs-number">5</span>];<br><br>    <span class="hljs-type">void</span> (*fun)(<span class="hljs-type">int</span>);<br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Value of a is %d\n&quot;</span>, a);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">person</span> <span class="hljs-title">p1</span>;</span><br><br>    <span class="hljs-comment">// array</span><br>    <span class="hljs-built_in">strcpy</span>(p1.name, <span class="hljs-string">&quot;John&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Name is %s\n&quot;</span>, p1.name);<br><br>    <span class="hljs-comment">// function</span><br>    p1.fun = &amp;fun;<br>    p1.fun(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Argument-for-Function"><a href="#Argument-for-Function" class="headerlink" title="Argument for Function"></a>Argument for Function</h3><p>Someone argue that we can’t define a function in a structure. i.e.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">person</span> &#123;</span><br>  <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><p>is legal, and</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">person</span> &#123;</span><br>  <span class="hljs-type">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">()</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>is not legal.</p><p>I don’t think this idea is valid because reciprocally, the definition of an array should look like this: <code>char name[20] = &#123;&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;&#125;;</code>, because on the function we also define the contents, or codes of the function.</p><h3 id="Another-Justification"><a href="#Another-Justification" class="headerlink" title="Another Justification"></a>Another Justification</h3><p>To justify my point, there is another argument.</p><p>When using a function pointer, there are two ways, <code>(*p1.fun)(10);</code> and <code>p1.fun(10);</code>, because the function name is a pointer, so they can be used interchangeably. Due to historical reasons, Bell Labs uses the first form 1, while Berkeley uses the second form. For compatibility with existing codes, ANSI C considers these two forms equivalent. Subsequent standards standards also continue this contradictory harmony.</p><p>The name of an array is the address of the first element of the array, although they can be used interchangeably because there will be an implicitly conversion:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br><span class="hljs-type">char</span> *p = name;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c %c\n&quot;</span>, *p, name[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c %c\n&quot;</span>, *(p+<span class="hljs-number">1</span>), name[<span class="hljs-number">1</span>]);<br></code></pre></td></tr></table></figure><h2 id="Back-to-the-Standard"><a href="#Back-to-the-Standard" class="headerlink" title="Back to the Standard"></a>Back to the Standard</h2><p>To answer this question, we need back to the C standar: <a href="https://www.open-std.org/jtc1/sc22/wg14/www/docs/n1548.pdf">https://www.open-std.org/jtc1/sc22/wg14/www/docs/n1548.pdf</a></p><h3 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h3><h4 id="6-2-1-1-identifier"><a href="#6-2-1-1-identifier" class="headerlink" title="6.2.1.1 identifier"></a>6.2.1.1 identifier</h4><blockquote><p>An identifier can denote an object; a function; a tag or a member of a structure, union, or enumeration; a typedef name; a label name; a macro name; or a macro parameter.</p></blockquote><h4 id="6-2-5-1-object-types-and-function-types"><a href="#6-2-5-1-object-types-and-function-types" class="headerlink" title="6.2.5.1 object types and function types"></a>6.2.5.1 object types and function types</h4><blockquote><p>Types are partitioned into object types (types that describe objects) and function types (types that describe functions). At various points within a translation unit an object type may be incomplete (lacking sufficient information to determine the size of objects of that type) or complete (having sufficient information).</p></blockquote><h4 id="6-2-5-20-derived-types-array-structure-function-pointer"><a href="#6-2-5-20-derived-types-array-structure-function-pointer" class="headerlink" title="6.2.5.20 derived types, array, structure, function, pointer"></a>6.2.5.20 derived types, array, structure, function, pointer</h4><blockquote><p>Any number of derived types can be constructed from the object and function types, as follows:</p><ul><li>An <code>array</code> type describes a contiguously allocated nonempty set of objects with a particular member object type, called the element type. The element type shall be complete whenever the array type is specified. Array types are characterized by their element type and by the number of elements in the array. An array type is said to be derived from its element type, and if its element type is T, the array type is sometimes called ‘‘array of T’’. The construction of an array type from an element type is called ‘‘array type derivation’’.</li><li>A <code>structure</code> type describes a sequentially allocated nonempty set of member objects (and, in certain circumstances, an incomplete array), each of which has an optionally specified name and possibly distinct type.</li><li>A <code>function</code> type describes a function with specified return type. A function type is characterized by its return type and the number and types of its parameters. A function type is said to be derived from its return type, and if its return type is T, the function type is sometimes called ‘‘function returning T’’. The construction of a function type from a return type is called ‘‘function type derivation’’.</li><li>A <code>pointer</code> type may be derived from a function type or an object type, called the referenced type. A pointer type describes an object whose value provides a reference to an entity of the referenced type. A pointer type derived from the referenced type T is sometimes called ‘‘pointer to T’’. The construction of a pointer type from a referenced type is called ‘‘pointer type derivation’’. A pointer type is a complete object type.</li></ul></blockquote><h4 id="6-7-2-1-structure-specifiers"><a href="#6-7-2-1-structure-specifiers" class="headerlink" title="6.7.2.1 structure specifiers"></a>6.7.2.1 structure specifiers</h4><blockquote><p>3 A structure or union shall not contain a member with incomplete or function type (hence, a structure shall not contain an instance of itself, but may contain a pointer to an instance of itself), except that the last member of a structure with more than one named member may have incomplete array type; such a structure (and any union containing, possibly recursively, a member that is such a structure) shall not be a member of a structure or an element of an array.</p><p>9 A member of a structure or union may have any complete object type other than a variably modified type. In addition, a member may be declared to consist of a specified number of bits (including a sign bit, if any). Such a member is called a bit-field; its width is preceded by a colon.</p></blockquote><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><ul><li>In C, there are two general types, <code>object type</code> and <code>function type</code>.</li><li>An object type may be incomplete (lacking sufficient information to determine the size of objects of that type) or complete (having sufficient information).</li><li><code>array</code> is drived from its <strong>element type</strong>, <code>structure</code> is drived from <strong>member objects</strong>, <code>function</code> is drived from its <strong>return type</strong>, and <code>pointer</code> is drived from a <strong>function type</strong> or an <strong>object type</strong>.</li><li>A structure or union shall not contain a member with <strong>incomplete or function type</strong> (hence, a structure shall not contain an instance of itself, but may contain a pointer to an instance of itself).</li><li>A structure can contain a incomplete member, when that the last member of a structure with more than one named member may have incomplete array type;</li><li>A structure with last member is incomplete array type shall not be a member of a structure or an element of an array.</li></ul><h2 id="Discussion-and-Conclusion"><a href="#Discussion-and-Conclusion" class="headerlink" title="Discussion and Conclusion"></a>Discussion and Conclusion</h2><p>Therefore, function type cannot be a structure member strictly according to the standard. The correct answer should be C.</p><p>However, the explanation of “cannot define a function in structure” leads to the correct answer, but the process is wrong. My idea is also wrong because the idea of pointers is not crucial to the question, the type should be the key point.</p><p>In addition, the first two options are flimsy:</p><ul><li>Array cannot always be a structure member. Array implies complete array (<code>char name[50];</code>) and incomplete array (<code>char name[];</code>), and the incomplete array is only allowed in the last member of a structure with more than one named member. Saying an array can be a structure member is not accurate.</li><li>Another structure cannot always be a structure member. When another structure contains the last incomplete array member, it cannot be a member of a structure. That option is also inaccurate.</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>编程语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从一场车马万里的东欧旅行和马督工跨年演讲，谈谈全球化和 21 世纪的 20 年代</title>
    <link href="/zh-CN/2024/02/76820c6c0eea/"/>
    <url>/zh-CN/2024/02/76820c6c0eea/</url>
    
    <content type="html"><![CDATA[<!-- markdownlint-disable-file MD033 --><p>前段时间去了趟匈牙利某小城市，飞机、公交、地铁、火车，辗转万里终于到达了目的地，令人感叹在 21 世纪的 20 年代，东欧的交通如此不便，仿佛回到了中国的十年之前。今天看马督工的《答案》年终演讲，讲既然世界是巨大的草台班子，那么世界是如何发展的，我想借这次旅行和马督工的演讲，聊一些个人的看法。</p><p><img src="https://picture.zhanganzhi.com/2024/02/15/olpvssn.jpg" alt="巨大的平原田野，天然适合农业"></p><hr><p>马督工跨年演讲：</p><div style="width=100%; padding-top: 56.25%; position: relative;"><iframe style="top:0; bottom:0; left:0; right:0; position: absolute;" width="100%" height="100%" src="https://www.youtube.com/embed/YcahfLB0nrk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe></div><p>马督工谈到欧洲的现代化过程，引用了一段《共产党宣言》：</p><blockquote><p>资产阶级在它已经取得了统治的地方把一切封建的、宗法的和田园般的关系都破坏了。它无情地斩断了把人们束缚于天然尊长的形形色色的封建羁绊，它使人和人之间除了赤裸裸的利害关系，除了冷酷无情的“现金交易”，就再也没有任何别的联系了。</p><p>它把宗教虔诚、骑士热忱、小市民伤感这些情感的神圣发作，淹没在利己主义打算的冰水之中。它把人的尊严变成了交换价值，用一种没有良心的贸易自由代替了无数特许的和自力挣得的自由。</p><p>一切等级的和固定的东西都烟消云散了，一切神圣的东西都被亵渎了。人们终于不得不用冷静的眼光来看他们的生活地位、他们的相互关系。</p><p>——《共产党宣言》</p></blockquote><p>我还想补充中间被他省略的，非常重要的一段话：</p><blockquote><p>资产阶级除非对生产工具，从而对生产关系，从而对全部社会关系不断地进行革命，否则就不能生存下去。反之，原封不动地保持旧的生产方式，却是过去的一切工业阶级生存的首要条件。</p><p>生产的不断变革，一切社会状况不停的动荡，永远的不安定和变动，这就是资产阶级时代不同于过去一切时代的地方。一切固定的僵化的关系以及与之相适应的素被尊崇的观念和见解都被消除了，一切新形成的关系等不到固定下来就陈旧了。</p></blockquote><p>马督工将这段话翻译为，资产阶级破坏了旧时代的神话，向世界宣布我们就是草台班子，击碎了普通人的一切梦想。但是为了防止普通人失去梦想之后选择躺平，欧洲社会转向了 19 世纪浪漫主义时代，鼓励人们理想的社会和生活。</p><p>我听到这里，瞬间联想到了几百年来引领着美国社会和普通人发展的“美国梦”，其内核正是：</p><blockquote><p>人们相信通过自己的工作勤奋、勇气、创意、和决心迈向富裕，而非依赖于特定的社会阶级和他人的援助。通常这代表了人们在经济上的成功或是企业家的精神，任何人都有可能透过自己的努力迈向巅峰。</p><p>无论每个人的社会阶层或出生环境如何，生活都应该变得更好，更丰富，更丰裕，每个人都有机会根据能力或成就而定，所有人都有机会借由自己的奋斗而获取财富。</p></blockquote><p>而今天的中国，无数普通人满脑子躺平的想法，是否是在重新上演着两百年前的欧洲呢？欧美人们比我们提前了上百年就发现了世界是一个巨大的草台班子，今天这个社会主义的中国，却刚刚走到两百年前资本主义的欧洲，究竟谁离未来的理想社会更近呢，还是根本就没有理想的社会，应该不断革命，不断变化下去？</p><p>沙利文说，后冷战时代已经过去了，确实，冷战结束三十年，当年如火如荼的共产主义资本主义意识形态之争，其实已经越来越淡，更多的讨论围绕着更加实际的议题，例如经济发展、全球化、星辰大海、环境问题等等。随着 21 世纪 20 年代全球各处局部战争的开始，雅尔塔体系不断受到挑战，世界秩序越来越混乱，似乎在提醒着我们可能真的来到了“百年之未有大变局”，我们熟悉的那个时代，可能将要过去了。</p><hr><p>熟悉的时代过去，重建新的秩序，这不一定是坏事，我们说回在匈牙利的旅行。</p><p><img src="https://picture.zhanganzhi.com/2024/02/15/jo7znsp.jpg" alt="还有一些居民仍然过着农村的生活"></p><p><img src="https://picture.zhanganzhi.com/2024/02/15/zlq3ryf.jpg" alt="充满了年代感的铁路站台和楼房"></p><p>这里的铁路非常欠发达，80 公里的时速，体验三个小时的火车，看着大片的田野和大型机械，猜测这里应该也是一个不小的粮仓。</p><p>运气不错，在火车上和邻座的当地人聊天，令人惊讶的是她的英语水平非常好，后来得知带着两个孩子的她曾在苏格兰、土耳其等多个国家工作，但我们只简单聊了一些这个国家的概况，如果时间充裕，或许又能听到一个充满传奇的人生故事吧。</p><p>我们聊到由于粮价太低、成本上涨，农民越来越不愿意种粮，机械化的设备由于近些年的种种原因，别说购买，连租用都承担不起。而在原来的很多不再种植的农田上，已经盖起来了工厂——“Chinese Factory”。</p><p><img src="https://picture.zhanganzhi.com/2024/02/15/v3me0nt.jpg" alt="田野的远方似乎就盖着一片工厂"></p><p>虽然在当地几乎没有看到任何中国人，但是在这个全球化的时代，当地人对来自东亚的面孔似乎已经见怪不怪，用着英语和我们交流，也是再正常不过的事情了，这里的英语普及率也让我感到震惊，可以说欧洲不愿意说英语的国家，几乎只剩下法国了（这里是笑话）。</p><p>而她反复提到的中国人、中国工厂，似乎也预示着中国的全球影响力正在不断扩大。中国人从 21 世纪初走向发达国家，到现在走到了中等发达国家甚至第三世界国家，发展着自己的事业和当地的产业。过去几十年的大兴基建，如果再在这些国家重演一遍，似乎又能给很多人带来几十年的和平与财富，但地球能否承受得住这样的资源消耗，似乎也是一个问号。</p><p>在上一个咆哮的 20 年代，工业、经济、文化、政治的发展，深深地影响了世界。而在这个新的 20 年代，世界上的各个角落，多出了中国的身影。中国一直是雅尔塔体系的坚定维护者，也是全球化的最大受益者之一，虽然和一众发展中国家在尽力维护着和平发展的世界秩序，但是在当今的世界，似乎中国在做的，只是更多的布局，希望在下一个时代来临的时候，不被世界所抛弃。</p><p>我们经常说，破坏一个旧秩序不难，难的是建立一个新秩序。联想到前面的演讲，当人们发现草台班子的本质的时候，意识形态似乎已经不重要了。那么这个巨大的草台班子，和随着全球化浪潮联系越来越密切的普通人，该如何为自己画下下一个时代的蓝图呢？未来会是一个新的浪漫主义时代、又一个咆哮的 20 年代、还是充满着战争与饥荒的世界呢？</p><hr><p>我一直是坚定的全球化支持者和受益者，我一直相信未来的世界交通会更加发达和方便。过去，我们上一代人从乡下移到了城市，而现在回到乡下只需要几个小时的时间；今天，我们从一个国家走到另一个国家，同样只需要几个小时的时间。在这个全球化的时代中，世界人民必然更加紧密地联系在一起。无论是语言还是文化，我们已经可以看到，全球的文化正在融合，语言在统一、节日在互通……地球村正不断成为现实。</p><p>和平从来不是世界的主旋律，但我们都期望和平。对每一个人而言，和平带给我们的是机遇，是发展的空间，是可以生产文化作品的时代，是幸福的每一天。过去的和平，让怀揣着梦想的那些人实现了人生的跨域。今天，和平与发展，是每一个世界人民真真切切的生活与希望。</p><p>匆忙写成，内容有些杂乱，还请见谅。</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>草台班子</tag>
      
      <tag>全球化</tag>
      
      <tag>东欧</tag>
      
      <tag>匈牙利</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>借老胡探访北京外国语大学聊聊校园开放</title>
    <link href="/zh-CN/2023/12/eaa2d3058362/"/>
    <url>/zh-CN/2023/12/eaa2d3058362/</url>
    
    <content type="html"><![CDATA[<p>今天看到老胡探访北京外国语大学，再次呼吁校园开放<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="胡锡进. [老胡今天亲身经历了，这才叫大学校园开放](https://mp.weixin.qq.com/s/-WCo1FoM4gorVQyuquD4LA). 2023-12-30. [Archived](https://web.archive.org/web/20231231194901/https://mp.weixin.qq.com/s/-WCo1FoM4gorVQyuquD4LA) on 2023-12-31. Retrieved 2023-12-31.">[1]</span></a></sup>。这个话题他聊了不少次了，但这次让我感觉，或许是一次校园安全管理变革的机遇。</p><p>在清华生活了这么多年，小时候没想过开不开放的事情。热热闹闹的，挺好。</p><p>后来去国外的大学，还记得走过的第一所应该是耶鲁大学。走到其中才知道，哦，原来我已经在校园里面了。那脚尖被磨掉了漆的铜像，至今还能想起。</p><p><img src="https://picture.zhanganzhi.com/2023/12/31/0fg8pph.png" alt="耶鲁大学校长 西奥多·德怀特·伍尔西 的铜像，脚尖已被磨得发光，图片来自网络"></p><p>疫情关了起来，我最大的感受是：终于清净了。二校门再也没有了喧闹和小商小贩，也没有到处树立的旅游团旗帜，还有拥堵的道路。而很多学生所述的，丢东西的情况也少了，很多学校甚至出现了“大学生的信任”，摆摊卖东西却没人看管，全凭自觉也不会丢。大学本来就不是公园，也不是旅游景点，更不是商业街，而是学生的家园。这个家园，应该是安全的，安静的，而不是喧闹的。把它向使用它的人开放，而不是向所有人开放，或许也是合理的。</p><p><img src="https://picture.zhanganzhi.com/2023/12/31/ezm4jo9.png" alt="清华大学供游客出入的西门，图片来自网络"></p><p>过去几十年，中国的大学也曾经像国外大学那样，随意进出甚至没有围栏。<del>据说我父亲那代上大学的时候，自行车被偷了，那就偷一辆接着骑</del>。人们可以到教室里听课，也可以把校园当公园一样，是饭后遛弯的场所。</p><p>随着经济发展，最高的两所学府，清华和北大，却成为了游客的重灾区，所有从全国各地涌到北京的游客，一定要带着孩子来到清华和北大这两所最高学府，告诉孩子“这是你未来的梦想”。但在我看来，清北的硬件早已落后新办的民办大学，这些人中最后真的能考入清北的人也寥寥无几。带着全家老小到这里转一圈只是为了打卡，制造了混乱与拥堵，没有任何意义。</p><p>2023 年，似乎大学在逐步开放，但限制极其严格，几乎无法抢到的预约，或者校内教师需要请外来人员谈事，都非常麻烦。我有一朋友是北大校友，校庆时一人可以带三个人进入，然后在校门口与妻子和三个孩子被保安拦下，怒斥：我把老婆留在外面还是留一个孩子在外面？这样的限制似乎也有其不合理之处。</p><p>老胡探访北京外国语大学，提到了一个细节：</p><blockquote><p>进到主校区之后，我先后进入了教学主楼、体育馆、食堂，都未受阻拦，不需刷证件，只有在图书馆，我被拦住，需要刷校内证件才能进入<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="胡锡进. [老胡今天亲身经历了，这才叫大学校园开放](https://mp.weixin.qq.com/s/-WCo1FoM4gorVQyuquD4LA). 2023-12-30. [Archived](https://web.archive.org/web/20231231194901/https://mp.weixin.qq.com/s/-WCo1FoM4gorVQyuquD4LA) on 2023-12-31. Retrieved 2023-12-31.">[1]</span></a></sup>。</p></blockquote><p>我认为，这样的方式或许是大学校园开放的最终形式。让大学的公共场合融入城市生活，而教学区域留给学生和教师，这样的方式，或许是最好的。在国外，很多大学也在实行着这样的模式。例如剑桥大学，坐落在一个现有大学后有城的城市，校园与城市融为了一体，而重要的教学区域、实验室、学生宿舍、图书馆则需要门禁刷卡进入。即可以保持开放，又能保证安全。</p><p>最后，我想用老胡的几句话来结尾：</p><blockquote><p>让在校大学生们在一个开放的环境中度过大学时代，也是对他们开放精神的无形熏陶和引导。如果那些学生们就读的大学外人进校门要预约登记，是一个高墙围起来外人进去很不容易的地方，同样会影响他们走出校门以后的社会观、安全观。如果外人进清华北大从此变得困难重重，一些孩子们从外地专门赶来却只能在校门口拍照打卡，进都进不去，那么我很担心，这一代学生走向社会之后，中国各地的围墙和保安有可能会变得越来越多<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="胡锡进. [大学预约进入真的必要吗？诚望清华北大为开放校园做出表率](https://mp.weixin.qq.com/s/Kt9awe83YFY-k1ySC0Z3YA). 2023-07-27. [Archived](https://web.archive.org/web/20231231195808/https://mp.weixin.qq.com/s/Kt9awe83YFY-k1ySC0Z3YA) on 2023-12-31. Retrieved 2023-12-31.">[2]</span></a></sup>。</p><p>应该让疫情从我们这块土地上真正结束，不要让它的后遗症成为今后这个国家经济社会发展的一个阴影<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="胡锡进. [大学预约进入真的必要吗？诚望清华北大为开放校园做出表率](https://mp.weixin.qq.com/s/Kt9awe83YFY-k1ySC0Z3YA). 2023-07-27. [Archived](https://web.archive.org/web/20231231195808/https://mp.weixin.qq.com/s/Kt9awe83YFY-k1ySC0Z3YA) on 2023-12-31. Retrieved 2023-12-31.">[2]</span></a></sup>。</p><p>正常秩序下的开放与宽松应当是疫情后我们大家共同努力营造的社会大氛围<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="胡锡进. [老胡今天亲身经历了，这才叫大学校园开放](https://mp.weixin.qq.com/s/-WCo1FoM4gorVQyuquD4LA). 2023-12-30. [Archived](https://web.archive.org/web/20231231194901/https://mp.weixin.qq.com/s/-WCo1FoM4gorVQyuquD4LA) on 2023-12-31. Retrieved 2023-12-31.">[1]</span></a></sup>。</p></blockquote><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>胡锡进. <a href="https://mp.weixin.qq.com/s/-WCo1FoM4gorVQyuquD4LA">老胡今天亲身经历了，这才叫大学校园开放</a>. 2023-12-30. <a href="https://web.archive.org/web/20231231194901/https://mp.weixin.qq.com/s/-WCo1FoM4gorVQyuquD4LA">Archived</a> on 2023-12-31. Retrieved 2023-12-31.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>胡锡进. <a href="https://mp.weixin.qq.com/s/Kt9awe83YFY-k1ySC0Z3YA">大学预约进入真的必要吗？诚望清华北大为开放校园做出表率</a>. 2023-07-27. <a href="https://web.archive.org/web/20231231195808/https://mp.weixin.qq.com/s/Kt9awe83YFY-k1ySC0Z3YA">Archived</a> on 2023-12-31. Retrieved 2023-12-31.<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大学</tag>
      
      <tag>校园</tag>
      
      <tag>胡锡进</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TimescaleDB + Spring Data JPA Integration</title>
    <link href="/en/2023/12/a11bfb4ae60b/"/>
    <url>/en/2023/12/a11bfb4ae60b/</url>
    
    <content type="html"><![CDATA[<blockquote><p>This article introduces how to integrate TimescaleDB in Spring Data JPA.</p></blockquote><span id="more"></span><h2 id="Basic-Requirements"><a href="#Basic-Requirements" class="headerlink" title="Basic Requirements"></a>Basic Requirements</h2><p>You need to configure the TimescaleDB database, Spring Boot 3, and Spring Data JPA.</p><h2 id="Key-Issue"><a href="#Key-Issue" class="headerlink" title="Key Issue"></a>Key Issue</h2><p>Spring Data JPA will automatically create database tables, but it cannot automatically create the hypertable required by TimescaleDB, so it needs to be created manually. We want to programmatically allow the application to automatically create hypertables.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>The original version of this solution is my answer on Stack Overflow: <a href="https://stackoverflow.com/a/77729927/19420247">timescaledb with spring data jpa</a><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Andy Zhang. [timescaledb with spring data jpa](https://stackoverflow.com/a/77729927/19420247). 2023-12-29. [Archived](https://web.archive.org/web/20231229220352/https://stackoverflow.com/questions/71329742/timescaledb-with-spring-data-jpa/77729927#77729927) on 2023-12-29. Retrieved 2023-12-29.">[1]</span></a></sup>.</p><h3 id="TimescaleTable-Annotation"><a href="#TimescaleTable-Annotation" class="headerlink" title="@TimescaleTable Annotation"></a>@TimescaleTable Annotation</h3><p>We can use the <code>@TimescaleTable</code> annotation to mark the Timescale table, and then find the entity class marked with the <code>@TimescaleTable</code> annotation when the application starts, and create the hypertable.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> TimescaleTable &#123;<br>    String <span class="hljs-title function_">tableName</span><span class="hljs-params">()</span>;<br><br>    String <span class="hljs-title function_">timeColumnName</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Scan-and-Create-Hypertables"><a href="#Scan-and-Create-Hypertables" class="headerlink" title="Scan and Create Hypertables"></a>Scan and Create Hypertables</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">import</span> lombok.RequiredArgsConstructor;<br><span class="hljs-keyword">import</span> jakarta.annotation.PostConstruct;<br><span class="hljs-keyword">import</span> jakarta.persistence.EntityManager;<br><span class="hljs-keyword">import</span> jakarta.persistence.metamodel.EntityType;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimescaleTableInitializer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> EntityManager entityManager;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createHypertable</span><span class="hljs-params">(String tableName, String timeColumnName)</span> &#123;<br>        entityManager<br>                .createNativeQuery(String.format(<br>                        <span class="hljs-string">&quot;SELECT create_hypertable(&#x27;%s&#x27;,&#x27;%s&#x27;, if_not_exists =&gt; TRUE);&quot;</span>,<br>                        tableName,<br>                        timeColumnName<br>                ))<br>                .getResultList();<br>    &#125;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// get all entities</span><br>        Set&lt;EntityType&lt;?&gt;&gt; entities = entityManager.getMetamodel().getEntities();<br><br>        <span class="hljs-comment">// for each entity</span><br>        <span class="hljs-keyword">for</span> (EntityType&lt;?&gt; entity : entities) &#123;<br>            <span class="hljs-comment">// get entity class</span><br>            Class&lt;?&gt; javaType = entity.getJavaType();<br><br>            <span class="hljs-comment">// check of TimescaleTable annotation</span><br>            <span class="hljs-keyword">if</span> (javaType.isAnnotationPresent(TimescaleTable.class)) &#123;<br>                <span class="hljs-comment">// get metadata from annotation</span><br>                <span class="hljs-type">TimescaleTable</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> javaType.getAnnotation(TimescaleTable.class);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">tableName</span> <span class="hljs-operator">=</span> annotation.tableName();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">timeColumnName</span> <span class="hljs-operator">=</span> annotation.timeColumnName();<br><br>                <span class="hljs-comment">// create hypertable</span><br>                createHypertable(tableName, timeColumnName);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Use-TimescaleTable-Annotation"><a href="#Use-TimescaleTable-Annotation" class="headerlink" title="Use @TimescaleTable Annotation"></a>Use @TimescaleTable Annotation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-keyword">import</span> lombok.*;<br><span class="hljs-keyword">import</span> jakarta.persistence.*;<br><br><span class="hljs-keyword">import</span> ***.app.config.timescaledb.TimescaleTable;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table(name = SensorData.TABLE_NAME)</span><br><span class="hljs-meta">@TimescaleTable(tableName = SensorData.TABLE_NAME, timeColumnName = SensorData.TIME_COLUMN_NAME)</span><br><span class="hljs-meta">@IdClass(SensorData.SensorDataID.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SensorData</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TABLE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sensor_data&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TIME_COLUMN_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;time&quot;</span>;<br><br>    <span class="hljs-meta">@Data</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SensorDataID</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>        <span class="hljs-keyword">private</span> Integer id;<br>        <span class="hljs-keyword">private</span> LocalDateTime time;<br>    &#125;<br><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@Column(name = TIME_COLUMN_NAME, nullable = false)</span><br>    <span class="hljs-keyword">private</span> LocalDateTime time;<br><br>    <span class="hljs-meta">@Column(nullable = false)</span><br>    <span class="hljs-keyword">private</span> String sensor;<br><br>    <span class="hljs-meta">@Column(nullable = false)</span><br>    <span class="hljs-keyword">private</span> String data;<br>&#125;<br></code></pre></td></tr></table></figure><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Andy Zhang. <a href="https://stackoverflow.com/a/77729927/19420247">timescaledb with spring data jpa</a>. 2023-12-29. <a href="https://web.archive.org/web/20231229220352/https://stackoverflow.com/questions/71329742/timescaledb-with-spring-data-jpa/77729927#77729927">Archived</a> on 2023-12-29. Retrieved 2023-12-29.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>软件开发</category>
      
      <category>后端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Spring Boot</tag>
      
      <tag>Java</tag>
      
      <tag>Spring Data JPA</tag>
      
      <tag>PostgreSQL</tag>
      
      <tag>TimescaleDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TimescaleDB + Spring Data JPA 整合</title>
    <link href="/zh-CN/2023/12/a11bfb4ae60b/"/>
    <url>/zh-CN/2023/12/a11bfb4ae60b/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍了如何在 Spring Data JPA 中整合 TimescaleDB。</p></blockquote><span id="more"></span><h2 id="基础要求"><a href="#基础要求" class="headerlink" title="基础要求"></a>基础要求</h2><p>您需要配置好 TimescaleDB 数据库，以及 Spring Boot 3 + Spring Data JPA。</p><h2 id="关键问题"><a href="#关键问题" class="headerlink" title="关键问题"></a>关键问题</h2><p>Spring Data JPA 会自动创建数据库表，但是无法自动创建 TimescaleDB 需要的超级表，因此需要手动创建。我们希望以编程方式让应用可以自动创建超级表。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>该方案的原始版本是我在 Stack Overflow 的回答：<a href="https://stackoverflow.com/a/77729927/19420247">timescaledb with spring data jpa</a><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Andy Zhang. [timescaledb with spring data jpa](https://stackoverflow.com/a/77729927/19420247). 2023-12-29. [Archived](https://web.archive.org/web/20231229220352/https://stackoverflow.com/questions/71329742/timescaledb-with-spring-data-jpa/77729927#77729927) on 2023-12-29. Retrieved 2023-12-29.">[1]</span></a></sup>。</p><h3 id="TimescaleTable-注解"><a href="#TimescaleTable-注解" class="headerlink" title="@TimescaleTable 注解"></a>@TimescaleTable 注解</h3><p>我们可以使用 <code>@TimescaleTable</code> 注解来标记 Timescale 表，然后在应用启动时，找到标记了 <code>@TimescaleTable</code> 注解的实体类，创建超级表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> TimescaleTable &#123;<br>    String <span class="hljs-title function_">tableName</span><span class="hljs-params">()</span>;<br><br>    String <span class="hljs-title function_">timeColumnName</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="扫描并创建超级表"><a href="#扫描并创建超级表" class="headerlink" title="扫描并创建超级表"></a>扫描并创建超级表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">import</span> lombok.RequiredArgsConstructor;<br><span class="hljs-keyword">import</span> jakarta.annotation.PostConstruct;<br><span class="hljs-keyword">import</span> jakarta.persistence.EntityManager;<br><span class="hljs-keyword">import</span> jakarta.persistence.metamodel.EntityType;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimescaleTableInitializer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> EntityManager entityManager;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createHypertable</span><span class="hljs-params">(String tableName, String timeColumnName)</span> &#123;<br>        entityManager<br>                .createNativeQuery(String.format(<br>                        <span class="hljs-string">&quot;SELECT create_hypertable(&#x27;%s&#x27;,&#x27;%s&#x27;, if_not_exists =&gt; TRUE);&quot;</span>,<br>                        tableName,<br>                        timeColumnName<br>                ))<br>                .getResultList();<br>    &#125;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// get all entities</span><br>        Set&lt;EntityType&lt;?&gt;&gt; entities = entityManager.getMetamodel().getEntities();<br><br>        <span class="hljs-comment">// for each entity</span><br>        <span class="hljs-keyword">for</span> (EntityType&lt;?&gt; entity : entities) &#123;<br>            <span class="hljs-comment">// get entity class</span><br>            Class&lt;?&gt; javaType = entity.getJavaType();<br><br>            <span class="hljs-comment">// check of TimescaleTable annotation</span><br>            <span class="hljs-keyword">if</span> (javaType.isAnnotationPresent(TimescaleTable.class)) &#123;<br>                <span class="hljs-comment">// get metadata from annotation</span><br>                <span class="hljs-type">TimescaleTable</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> javaType.getAnnotation(TimescaleTable.class);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">tableName</span> <span class="hljs-operator">=</span> annotation.tableName();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">timeColumnName</span> <span class="hljs-operator">=</span> annotation.timeColumnName();<br><br>                <span class="hljs-comment">// create hypertable</span><br>                createHypertable(tableName, timeColumnName);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用-TimescaleTable-注解"><a href="#使用-TimescaleTable-注解" class="headerlink" title="使用 @TimescaleTable 注解"></a>使用 @TimescaleTable 注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-keyword">import</span> lombok.*;<br><span class="hljs-keyword">import</span> jakarta.persistence.*;<br><br><span class="hljs-keyword">import</span> ***.app.config.timescaledb.TimescaleTable;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table(name = SensorData.TABLE_NAME)</span><br><span class="hljs-meta">@TimescaleTable(tableName = SensorData.TABLE_NAME, timeColumnName = SensorData.TIME_COLUMN_NAME)</span><br><span class="hljs-meta">@IdClass(SensorData.SensorDataID.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SensorData</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TABLE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sensor_data&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TIME_COLUMN_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;time&quot;</span>;<br><br>    <span class="hljs-meta">@Data</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SensorDataID</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>        <span class="hljs-keyword">private</span> Integer id;<br>        <span class="hljs-keyword">private</span> LocalDateTime time;<br>    &#125;<br><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@Column(name = TIME_COLUMN_NAME, nullable = false)</span><br>    <span class="hljs-keyword">private</span> LocalDateTime time;<br><br>    <span class="hljs-meta">@Column(nullable = false)</span><br>    <span class="hljs-keyword">private</span> String sensor;<br><br>    <span class="hljs-meta">@Column(nullable = false)</span><br>    <span class="hljs-keyword">private</span> String data;<br>&#125;<br></code></pre></td></tr></table></figure><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Andy Zhang. <a href="https://stackoverflow.com/a/77729927/19420247">timescaledb with spring data jpa</a>. 2023-12-29. <a href="https://web.archive.org/web/20231229220352/https://stackoverflow.com/questions/71329742/timescaledb-with-spring-data-jpa/77729927#77729927">Archived</a> on 2023-12-29. Retrieved 2023-12-29.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>软件开发</category>
      
      <category>后端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Spring Boot</tag>
      
      <tag>Java</tag>
      
      <tag>Spring Data JPA</tag>
      
      <tag>PostgreSQL</tag>
      
      <tag>TimescaleDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot 3 Request Tracing</title>
    <link href="/en/2023/12/2e66e27724a7/"/>
    <url>/en/2023/12/2e66e27724a7/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Traditional Spring Cloud Sleuth<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Spring Cloud Sleuth](https://github.com/spring-cloud/spring-cloud-sleuth). spring-cloud. [2023-12-24]. （原始内容[存档](https://web.archive.org/web/20231224134733/https://github.com/spring-cloud/spring-cloud-sleuth)于2023-12-24）">[1]</span></a></sup> tracing is no longer applicable to Spring Boot 3. This article will introduce how to configure Micrometer to trace requests in Spring Boot 3.</p></blockquote><span id="more"></span><p>After Spring Boot 3 is updated, <a href="https://github.com/spring-cloud/spring-cloud-sleuth">Spring Cloud Sleuth</a> indicates that it is no longer supported<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Spring Cloud Sleuth](https://github.com/spring-cloud/spring-cloud-sleuth). spring-cloud. [2023-12-24]. （原始内容[存档](https://web.archive.org/web/20231224134733/https://github.com/spring-cloud/spring-cloud-sleuth)于2023-12-24）">[1]</span></a></sup>, it is need to be migrated to <a href="https://micrometer.io/">Micrometer</a>.</p><h2 id="Add-Dependency"><a href="#Add-Dependency" class="headerlink" title="Add Dependency"></a>Add Dependency</h2><p>In order to trace requests in Spring Boot 3, we need to add the following dependency in <code>build.gradle</code>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.micrometer<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>micrometer-tracing-bridge-brave<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> <br></code></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs groovy">implementation <span class="hljs-string">&quot;io.micrometer:micrometer-tracing-bridge-brave&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Configure-Log-Pattern"><a href="#Configure-Log-Pattern" class="headerlink" title="Configure Log Pattern"></a>Configure Log Pattern</h2><p>After Spring Boot 3.2, Spring Boot will automatically configure the log format. If the version is lower than 3.2, manual configuration is required.</p><p>Refer to the <a href="https://github.com/micrometer-metrics/tracing/wiki/Spring-Cloud-Sleuth-3.1-Migration-Guide#log-pattern">Spring Cloud Sleuth 3.1 Migration Guide</a>, add the following configuration in <code>application.properties</code>:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">logging.pattern.level</span>=<span class="hljs-string">%5p [$&#123;spring.application.name:&#125;,%X&#123;traceId:-&#125;,%X&#123;spanId:-&#125;]</span><br></code></pre></td></tr></table></figure><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/spring-cloud/spring-cloud-sleuth">Spring Cloud Sleuth</a>. spring-cloud. [2023-12-24]. （原始内容<a href="https://web.archive.org/web/20231224134733/https://github.com/spring-cloud/spring-cloud-sleuth">存档</a>于2023-12-24）<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://github.com/micrometer-metrics/tracing/wiki/Spring-Cloud-Sleuth-3.1-Migration-Guide">Spring Cloud Sleuth 3.1 Migration Guide</a>. micrometer-metrics. 2023-09-07 [2023-12-24]. （原始内容<a href="https://web.archive.org/web/20231224135002/https://github.com/micrometer-metrics/tracing/wiki/Spring-Cloud-Sleuth-3.1-Migration-Guide">存档</a>于2023-12-24）<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>软件开发</category>
      
      <category>后端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Spring Boot</tag>
      
      <tag>Java</tag>
      
      <tag>Spring Cloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot 3 请求追踪</title>
    <link href="/zh-CN/2023/12/2e66e27724a7/"/>
    <url>/zh-CN/2023/12/2e66e27724a7/</url>
    
    <content type="html"><![CDATA[<blockquote><p>传统的 Spring Cloud Sleuth<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Spring Cloud Sleuth](https://github.com/spring-cloud/spring-cloud-sleuth). spring-cloud. [2023-12-24]. （原始内容[存档](https://web.archive.org/web/20231224134733/https://github.com/spring-cloud/spring-cloud-sleuth)于2023-12-24）">[1]</span></a></sup> 追踪已经不适用于 Spring Boot 3，本文将介绍如何在 Spring Boot 3 中配置 Micrometer 追踪请求。</p></blockquote><span id="more"></span><p>Spring Boot 3 更新后，<a href="https://github.com/spring-cloud/spring-cloud-sleuth">Spring Cloud Sleuth</a> 表示不再支持<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Spring Cloud Sleuth](https://github.com/spring-cloud/spring-cloud-sleuth). spring-cloud. [2023-12-24]. （原始内容[存档](https://web.archive.org/web/20231224134733/https://github.com/spring-cloud/spring-cloud-sleuth)于2023-12-24）">[1]</span></a></sup>，而是迁移到 <a href="https://micrometer.io/">Micrometer</a>。</p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>为了在 Spring Boot 3 中追踪请求，我们需要在 <code>build.gradle</code> 中添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.micrometer<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>micrometer-tracing-bridge-brave<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> <br></code></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs groovy">implementation <span class="hljs-string">&quot;io.micrometer:micrometer-tracing-bridge-brave&quot;</span><br></code></pre></td></tr></table></figure><h2 id="配置日志格式"><a href="#配置日志格式" class="headerlink" title="配置日志格式"></a>配置日志格式</h2><p>Spring Boot 3.2 之后，Spring Boot 将会自动配置日志格式，若版本低于 3.2，需要手动配置。</p><p>参考 <a href="https://github.com/micrometer-metrics/tracing/wiki/Spring-Cloud-Sleuth-3.1-Migration-Guide#log-pattern">Spring Cloud Sleuth 3.1 Migration Guide</a>，在 <code>application.properties</code> 中添加如下配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">logging.pattern.level</span>=<span class="hljs-string">%5p [$&#123;spring.application.name:&#125;,%X&#123;traceId:-&#125;,%X&#123;spanId:-&#125;]</span><br></code></pre></td></tr></table></figure><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/spring-cloud/spring-cloud-sleuth">Spring Cloud Sleuth</a>. spring-cloud. [2023-12-24]. （原始内容<a href="https://web.archive.org/web/20231224134733/https://github.com/spring-cloud/spring-cloud-sleuth">存档</a>于2023-12-24）<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://github.com/micrometer-metrics/tracing/wiki/Spring-Cloud-Sleuth-3.1-Migration-Guide">Spring Cloud Sleuth 3.1 Migration Guide</a>. micrometer-metrics. 2023-09-07 [2023-12-24]. （原始内容<a href="https://web.archive.org/web/20231224135002/https://github.com/micrometer-metrics/tracing/wiki/Spring-Cloud-Sleuth-3.1-Migration-Guide">存档</a>于2023-12-24）<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>软件开发</category>
      
      <category>后端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Spring Boot</tag>
      
      <tag>Java</tag>
      
      <tag>Spring Cloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈基于在线 Git 的爱好社区困境</title>
    <link href="/zh-CN/2023/12/9a7469cbe8a1/"/>
    <url>/zh-CN/2023/12/9a7469cbe8a1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>随着经济和社会发展、生活水平提高、精神文化需求更加丰富多彩，人们逐渐具有相同爱好的数字社区。而在线 Git 如 GitHub 逐渐成为了这些社区的平台选择，它能提供方便的协同交互和标记语言的文档撰写功能，可以有效减少传统论坛的维护成本。但是，这些社区也面临着一些困境，本文将基于一个运转超 6 年的社区和一个新建社区的现实情况，浅谈基于在线 Git 的爱好社区困境。</p></blockquote><span id="more"></span><p>昨天看到一个视频，《<a href="https://www.bilibili.com/video/BV1MC4y1D7jQ/">基于Gitea的红石数电索引</a>》<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[基于Gitea的红石数电索引](https://www.bilibili.com/video/BV1MC4y1D7jQ/). shenjack_. 2023-12-23 [2023-12-24]. （原始内容[存档](https://web.archive.org/web/20231224110755/https://www.bilibili.com/video/BV1MC4y1D7jQ/)于2023-12-24）">[1]</span></a></sup>。这个视频讲的是一个基于 Gitea 的爱好社区，使用 Gitea 作为在线 Git，协同编辑和维护红石数电的技术文档和基础组件，以及社区的一些规则和指南。这个社区是新建的，一开始选择使用可以在线协同编辑的腾讯文档，但似乎是这位高级成员提出使用 Gitea 作为社区平台，因为腾讯文档仅提供了协同编辑功能，但当内容庞大后将无法实现所需功能，且权限管理并不方便，而且 Gitea 作为一个开源项目，可以私有化社区数据。</p><p>这很容易让人联想到 CFPA 社区，酒石酸菌于 2017 年创立的一个 MC 模组和整合包翻译社区，最早在 GitHub 基于 PR 收集社区贡献，后来引入了 Weblate 平台实现自动管理 Git，避免了学习成本，在之后舍弃了 Weblate 平台，只保留了 GitHub + PR 的模式，同时通过 GitHub Actions 实现了部分流程的自动化管理。</p><p>这类基于在线 Git 的社区运转核心逻辑是，社区成员提交 PR 贡献工作和参与社区建设，社区的管理员会负责审核、维护、流程性工作。而 Issue 功能也提供了同话题讨论的平台，相当于传统的邮件功能，相关人员可以在同一个话题下集中讨论同一个问题。这样可以避免开发自由平台或论坛的成本，也可以节约一定的制度约定成本。</p><p>但是，这类社区也面临着几点困境。</p><ol><li>文档繁琐。社区需要大量繁杂的文档维持秩序，往往需要大量的讨论不断更新制度文档。而分类整理这些文档，使用同样的风格和样式，也需要大量的工作。有些社区甚至会陷入制度设计的瘾。</li><li>人力成本高。这些流程需要人工确保执行，还需要避免争议，长期以来需要社区核心维护者频繁投入大量时间，挤压个人生活和工作。尽管近年来随着 GitHub Actions 等自动化工具的出现可以节约一些人力成本，但这些工具的开发和随着制度变更的维护本身就是巨大的成本。</li><li>参与门槛高。参与这些社区的贡献往往需要学习使用 GitHub 或 Gitea 这样的计算机领域专业平台，甚至对某些区域的用户还会存在可访问性问题。而且往往需要学习标记性语言的语法以撰写文档，并花费大量的时间确保自己撰写的文档符合不断变化的规范。而规范文档经常更新不及时或缺少细节，贡献者需要从他人的样例中学习，适应多次后才能提交符合要求的工作。这些门槛造就了参与者很难将大部分的精力放在贡献本身，而是陷入了制度的沼泽。</li><li>权责不明，出现争议无法有效解决。这些社区的核心维护者往往是社区的创始人，但随着社区发展壮大，有些分歧可能会难以解决，最后造成社区的分裂。而且随着核心维护者因为个人原因离开社区或没有精力维护，他留下来的责任将被搁置，由于缺少维护形成长期的累赘。这也会反过来绑架核心参与者，让人们望而却步不敢参与太多，导致社区无法真正成为社区。</li><li>内部与外部矛盾。随着时间发展，难免会出现冲突和矛盾。内部矛盾可能还好消化，而外部矛盾可能会成为社区分裂或瓦解的导火索，例如 CFPA 的<a href="https://github.com/CFPAOrg/Minecraft-Mod-Language-Package/pull/1536">纳夸达</a><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[[讨论] 纳夸达](https://github.com/CFPAOrg/Minecraft-Mod-Language-Package/pull/1536). WuzgXY-GitHub. 2022-02-15 [2023-12-24]. （原始内容[存档](https://web.archive.org/web/20231224130456/https://github.com/CFPAOrg/Minecraft-Mod-Language-Package/pull/1536)于2023-12-24）">[2]</span></a></sup>事件，真正想要讨论问题本身的人，想要作出贡献的人，被舆论裹挟、磨平了热情，最终黯然离场。</li><li>外围贡献积压。这些社区往往是开放的，但接受外部贡献则意味着不确定性。CFPA 就因此面临了大量 PR 提交者无响应，最终大量积压的问题。目前他们采取了 <code>7+7</code> 和 <code>3+7</code> 这样的制度来尝试<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[关于应对无响应 PR 的措施](https://github.com/CFPAOrg/Minecraft-Mod-Language-Package/issues/2658). dovisutu. 2022-12-03 [2023-12-24]. （原始内容[存档](https://web.archive.org/web/20231224131003/https://github.com/CFPAOrg/Minecraft-Mod-Language-Package/issues/2658)于2023-12-24）">[3]</span></a></sup>，运行效果如何还需要未来再观察。</li></ol><p>固然自研平台是非常好的解决方案，但其开发和维护成本也是巨大的，虽然可以方便社区用户，但对核心开发者的要求只增不减。而且这可能最终也会滑向另一个反面：技术霸权，一切在框架和程序内运转，大家都是流水线的员工，而不是社区的成员和建设者。这可能会导致社区成员主动性的丧失，陷入技术的牢笼，最终人们放弃选择离开。社区的核心是人，而不是技术，技术终究只是社区的工具。</p><p>制度设计上瘾和技术霸权等问题，在吕德文的文章《<a href="https://new.qq.com/rain/a/20230406A07TZH00">当前基层治理的十大怪现象</a>》<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[当前基层治理的十大怪现](https://new.qq.com/rain/a/20230406A07TZH00). 吕德文. 2023-04-06 [2023-12-24]. （原始内容[存档](https://web.archive.org/web/20231224095641/https://new.qq.com/rain/a/20230406A07TZH00)于2023-12-24）">[4]</span></a></sup>中得到了深入的探讨，这篇文章很有参考的价值和意义，或许对今天的在线社区治理能有一定的启发。</p><p>这个时代各类小众社区越来越多，而很多传统社区也在做数字化转型，基于在线平台的社区和传统社区同样面临着诸多困境。而这类问题最终如何妥善解决，可能是这些社区能否长久良好运行、维系人与人之间的关系、保持开放的必经之路。</p><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.bilibili.com/video/BV1MC4y1D7jQ/">基于Gitea的红石数电索引</a>. shenjack_. 2023-12-23 [2023-12-24]. （原始内容<a href="https://web.archive.org/web/20231224110755/https://www.bilibili.com/video/BV1MC4y1D7jQ/">存档</a>于2023-12-24）<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://github.com/CFPAOrg/Minecraft-Mod-Language-Package/pull/1536">[讨论] 纳夸达</a>. WuzgXY-GitHub. 2022-02-15 [2023-12-24]. （原始内容<a href="https://web.archive.org/web/20231224130456/https://github.com/CFPAOrg/Minecraft-Mod-Language-Package/pull/1536">存档</a>于2023-12-24）<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://github.com/CFPAOrg/Minecraft-Mod-Language-Package/issues/2658">关于应对无响应 PR 的措施</a>. dovisutu. 2022-12-03 [2023-12-24]. （原始内容<a href="https://web.archive.org/web/20231224131003/https://github.com/CFPAOrg/Minecraft-Mod-Language-Package/issues/2658">存档</a>于2023-12-24）<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://new.qq.com/rain/a/20230406A07TZH00">当前基层治理的十大怪现</a>. 吕德文. 2023-04-06 [2023-12-24]. （原始内容<a href="https://web.archive.org/web/20231224095641/https://new.qq.com/rain/a/20230406A07TZH00">存档</a>于2023-12-24）<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>GitHub</tag>
      
      <tag>Gitea</tag>
      
      <tag>社区</tag>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>How Does Compiler Explorer (Godbolt) Work?</title>
    <link href="/en/2023/12/bc4129caff08/"/>
    <url>/en/2023/12/bc4129caff08/</url>
    
    <content type="html"><![CDATA[<!-- markdownlint-disable MD010 MD033 --><blockquote><p>Compiler Explorer (Godbolt) is an interactive online compiler, which shows corresponding assembly code compiled by high-level language compilers. This article explores its principles and implements a local command-line version.</p></blockquote><span id="more"></span><h2 id="What-is-Assembly-Language"><a href="#What-is-Assembly-Language" class="headerlink" title="What is Assembly Language"></a>What is Assembly Language</h2><p>It is suggested to read <a href="https://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html">汇编语言入门教程 - 阮一峰的网络日志</a><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="阮一峰. [汇编语言入门教程 - 阮一峰的网络日志](https://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html). 2018-01-21. [Archived](https://web.archive.org/web/20231211131556/https://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html) on 2023-12-11. Retrieved 2023-12-11.">[1]</span></a></sup> to learn the basics of assembly language.</p><h2 id="Example-Code"><a href="#Example-Code" class="headerlink" title="Example Code"></a>Example Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>    c = a + b;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Result-from-Compiler-Explorer"><a href="#Result-from-Compiler-Explorer" class="headerlink" title="Result from Compiler Explorer"></a>Result from Compiler Explorer</h2><p>First of all, we use Compiler Explorer to compile the code above, and get the result as follows, which is our target:</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/rfd7a37.png" alt="Output form Compiler Explorer"></p><h2 id="Compile-to-Assembly-by-GCC"><a href="#Compile-to-Assembly-by-GCC" class="headerlink" title="Compile to Assembly by GCC"></a>Compile to Assembly by GCC</h2><p>Use that command to compile C++ code to assembly<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Antoine Pelisse. [Does C++ compile to assembly?](https://stackoverflow.com/questions/4779336/does-c-compile-to-assembly/4779372#4779372). 2011-01-24. [Archived](https://web.archive.org/web/20231211153914/https://stackoverflow.com/questions/4779336/does-c-compile-to-assembly/4779372#4779372) on 2023-12-11. Retrieved 2023-12-11.">[2]</span></a></sup><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="Andrew Edgecombe. [How do you get assembler output from C/C++ source in GCC?](https://stackoverflow.com/questions/137038/how-do-you-get-assembler-output-from-c-c-source-in-gcc/137074#137074). 2008-09-26. [Archived](https://web.archive.org/web/20231211153931/https://stackoverflow.com/questions/137038/how-do-you-get-assembler-output-from-c-c-source-in-gcc/137074#137074) on 2023-12-11. Retrieved 2023-12-11.">[3]</span></a></sup>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -S example.cpp<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.file&quot;example.cpp&quot;<br>.text<br>.def__main;.scl2;.type32;.endef<br>.globlmain<br>.defmain;.scl2;.type32;.endef<br>.seh_procmain<br>main:<br>.LFB0:<br>pushq%rbp<br>.seh_pushreg%rbp<br>movq%rsp, %rbp<br>.seh_setframe%rbp, 0<br>subq$48, %rsp<br>.seh_stackalloc48<br>.seh_endprologue<br>call__main<br>movl-4(%rbp), %edx<br>movl-8(%rbp), %eax<br>addl%edx, %eax<br>movl%eax, -12(%rbp)<br>movl$0, %eax<br>addq$48, %rsp<br>popq%rbp<br>ret<br>.seh_endproc<br>.ident&quot;GCC: (GNU) 13.2.0&quot;<br></code></pre></td></tr></table></figure><h2 id="File-Cleaning-and-Arguments-Optimization"><a href="#File-Cleaning-and-Arguments-Optimization" class="headerlink" title="File Cleaning and Arguments Optimization"></a>File Cleaning and Arguments Optimization</h2><blockquote><p>This article mainly shares the exploration process, this part will not actually be used in the end, you can consider skipping it.</p></blockquote><h3 id="seh-Commands"><a href="#seh-Commands" class="headerlink" title=".seh_* Commands"></a><code>.seh_*</code> Commands</h3><p>First we need to remove <code>.seh_*</code>, which are the MASM frame handling pseudo code <code>gas</code> implementation<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="David Wohlferd. [What are .seh_* assembly commands that gcc outputs?](https://stackoverflow.com/questions/20819927/what-are-seh-assembly-commands-that-gcc-outputs/38181874#38181874). 2016-07-04. [Archived](https://web.archive.org/web/20231211160356/https://stackoverflow.com/questions/20819927/what-are-seh-assembly-commands-that-gcc-outputs/38181874#38181874) on 2023-12-11. Retrieved 2023-12-11.">[4]</span></a></sup>. Add the argument <code>-fno-asynchronous-unwind-tables</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -S -fno-asynchronous-unwind-tables example.cpp<br></code></pre></td></tr></table></figure><h3 id="Specify-Output-File"><a href="#Specify-Output-File" class="headerlink" title="Specify Output File"></a>Specify Output File</h3><p>Add the argument <code>-o</code> to specify the output file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -S -fno-asynchronous-unwind-tables -o example.asm example.cpp<br></code></pre></td></tr></table></figure><h3 id="Intel-Style"><a href="#Intel-Style" class="headerlink" title="Intel Style"></a>Intel Style</h3><p>The assembly code on Compiler Explorer does not have <code>%</code>, while the result of direct compilation has a lot of <code>%</code>. Searching, I found that this is the difference between AT&amp;T style and Intel style.</p><p>Update the command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -S -masm=intel -fno-asynchronous-unwind-tables -o example.asm example.cpp<br></code></pre></td></tr></table></figure><h3 id="Remove-ident"><a href="#Remove-ident" class="headerlink" title="Remove .ident"></a>Remove <code>.ident</code></h3><p>Search by <code>-fno-asynchronous-unwind-tables</code>, found the GCC document, and found that the <code>-fno-ident</code> parameter can remove <code>.ident</code><sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Code Gen Options (Using the GNU Compiler Collection (GCC))](https://stackoverflow.com/questions/20819927/what-are-seh-assembly-commands-that-gcc-outputs/38181874#38181874). [Archived](https://web.archive.org/web/20231211161014/https://gcc.gnu.org/onlinedocs/gcc/Code-Gen-Options.html) on 2023-12-11. Retrieved 2023-12-11.">[5]</span></a></sup>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -S -masm=intel -fno-asynchronous-unwind-tables -fno-ident -o example.asm example.cpp<br></code></pre></td></tr></table></figure><h3 id="Current-Result"><a href="#Current-Result" class="headerlink" title="Current Result"></a>Current Result</h3><p>Now the result is basically the same as the output on Compiler Explorer:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.file&quot;example.cpp&quot;<br>.intel_syntax noprefix<br>.text<br>.def__main;.scl2;.type32;.endef<br>.globlmain<br>.defmain;.scl2;.type32;.endef<br>main:<br>pushrbp<br>movrbp, rsp<br>subrsp, 48<br>call__main<br>movedx, DWORD PTR -4[rbp]<br>moveax, DWORD PTR -8[rbp]<br>addeax, edx<br>movDWORD PTR -12[rbp], eax<br>moveax, 0<br>leave<br>ret<br></code></pre></td></tr></table></figure><p><img src="https://picture.zhanganzhi.com/2023/12/11/iznyq18.png" alt="Output from Compiler Explorer"></p><h2 id="Deep-into-Compiler-Explorer"><a href="#Deep-into-Compiler-Explorer" class="headerlink" title="Deep into Compiler Explorer"></a>Deep into Compiler Explorer</h2><h3 id="Is-GCC-Really-Filtering"><a href="#Is-GCC-Really-Filtering" class="headerlink" title="Is GCC Really Filtering?"></a>Is GCC Really Filtering?</h3><p>I noticed that there is a filter option on Compiler Explorer, and there is a huge difference in the results when the filter is not selected.</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/rargnnn.png" alt="Not Filtering"></p><p><img src="https://picture.zhanganzhi.com/2023/12/11/65edkm7.png" alt="Filter All"></p><p>I suspect that this filter is not a function of the GCC compiler, because the binary file generated after the complete compilation process needs to be executable, and it must contain library function files, etc., and whether the Compiler Explorer actually filters after the compilation, and implements this effect.</p><p>For example, the simple code in the previous section, use the following command to view the preprocessed file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -E -o example.txt example.cpp<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"># <span class="hljs-number">0</span> <span class="hljs-string">&quot;example.cpp&quot;</span><br># <span class="hljs-number">0</span> <span class="hljs-string">&quot;&lt;built-in&gt;&quot;</span><br># <span class="hljs-number">0</span> <span class="hljs-string">&quot;&lt;command-line&gt;&quot;</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;example.cpp&quot;</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>    c = a + b;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>After adding <code>#include &lt;stdio.h&gt;</code>, the preprocessed file becomes more than a thousand lines, and the contents of <code>stdio</code> are also included, so the compiler will compile this part into assembly code so that the executable file contains all the libraries.</p><h3 id="Search-for-Compiler-Explorer-Principles"><a href="#Search-for-Compiler-Explorer-Principles" class="headerlink" title="Search for Compiler Explorer Principles"></a>Search for Compiler Explorer Principles</h3><p>Compiler Explorer was originally named <code>godbolt</code>, search for how does <code>godbolt</code> filter assembly code:</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/kdrp4ee.png" alt="Search Result&lt;sup id=&quot;fnref:6&quot; class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn:6&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--rounded&quot; aria-label=&quot;Peter Cordes. [Step into standard library call with godbolt](https://stackoverflow.com/questions/56245402/step-into-standard-library-call-with-godbolt/56246283#56246283). 2019-05-21. [Archived](https://web.archive.org/web/20231211162509/https://stackoverflow.com/questions/56245402/step-into-standard-library-call-with-godbolt/56246283#56246283) on 2023-12-11. Retrieved 2023-12-11.&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&quot;fnref:7&quot; class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn:7&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--rounded&quot; aria-label=&quot;Peter Cordes. [How to remove &quot;noise&quot; from GCC/clang assembly output?](https://stackoverflow.com/questions/38552116/how-to-remove-noise-from-gcc-clang-assembly-output/38552509#38552509). 2016-01-24. [Archived](https://web.archive.org/web/20231211162508/https://stackoverflow.com/questions/38552116/how-to-remove-noise-from-gcc-clang-assembly-output/38552509#38552509) on 2023-12-11. Retrieved 2023-12-11.&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;"></p><p>Then I found this talk by Matt Godbolt, the author of Compiler Explorer: <a href="https://www.youtube.com/watch?v=bSkpMdDe4g4">CppCon 2017: Matt Godbolt “What Has My Compiler Done for Me Lately? Unbolting the Compiler’s Lid”</a></p><div style="width=90%; padding-top: 56.25%; position: relative;"><iframe style="top:0; bottom:0; left:0; right:0; position: absolute;" width="100%" height="100%" src="https://www.youtube.com/embed/bSkpMdDe4g4" title="CppCon 2017: Matt Godbolt “What Has My Compiler Done for Me Lately? Unbolting the Compiler's Lid”" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe></div><h3 id="Matt-Godbolt’s-Talk"><a href="#Matt-Godbolt’s-Talk" class="headerlink" title="Matt Godbolt’s Talk"></a>Matt Godbolt’s Talk</h3><p>This speech explains in detail the differences between registers, how to maintain compatibility from 8-bit processors to 64-bit processors, Intel syntax and AT&amp;T syntax, Compiler Explorer principles…</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/lm0pkxk.png" alt="Registers Name and Convention"></p><p><img src="https://picture.zhanganzhi.com/2023/12/11/tkwgh5q.png" alt="Registers from 8-bit to 64-bit"></p><blockquote><p>I personally strongly recommend this speech to undergraduate students in computer science. This is very helpful for understanding the process of the C compiler, the basic knowledge of assembly language, registers, compiler optimization strategies, etc. It is definitely worth spending 2-3 hours to learn and understand this speech.</p><p>Each of the details in it can diverge a lot of content, such as the history and changes of computers from 8-bit to 64-bit, assembly language basics, compiler optimization (he demonstrated several cases and showed how the compiler optimized them), linux commands, Docker, cloud server practice and virtual machines…</p><p>Learning the content of this talk, and fully understand it, is beneficial to students who are aiming for either industry or academia.</p></blockquote><h3 id="Filter-Lines-Starting-with-a-Dot-and-C-Symbols"><a href="#Filter-Lines-Starting-with-a-Dot-and-C-Symbols" class="headerlink" title="Filter Lines Starting with a Dot and C++ Symbols"></a>Filter Lines Starting with a Dot and C++ Symbols</h3><p>In the speech, I noticed the following command:</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/b06924r.png" alt="The simplest way to filter"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ /tmp/test.cc -O2 -c -S -o - -masm=intel | c++filt | grep -vE <span class="hljs-string">&#x27;\s+\.&#x27;</span><br></code></pre></td></tr></table></figure><p>The parameters of this command are as follows:</p><ul><li><code>-O2</code> optimization level</li><li><code>-c</code> compile and assemble only, do not link, but we don’t need object files</li><li><code>-S</code> compile and get assembly code</li><li><code>-o -</code> output to command line</li><li><code>-masm=intel</code> use intel syntax</li><li><code>c++filt</code> filter C++ symbols</li><li><code>grep -vE &#39;\s+\.</code> filter lines starting with a dot</li></ul><p>The function of <code>c++filt</code> is to filter C++ symbols, because C++ has function overloading, the compiler will handle this, and we want to get human-readable function names, for example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">echo</span> _ZNSt11char_traitsIcE6lengthEPKc | c++filt<br>std::char_traits&lt;char&gt;::length(char const*)<br></code></pre></td></tr></table></figure><p>From this command, we can update our compilation command as follows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -S -masm=intel -fno-asynchronous-unwind-tables -fno-ident -o - example.cpp | c++filt | grep -vE <span class="hljs-string">&#x27;\s+\.&#x27;</span> &gt; example.asm<br></code></pre></td></tr></table></figure><p>The result of this compilation:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs assembly">main:<br>pushrbp<br>movrbp, rsp<br>subrsp, 48<br>call__main<br>movedx, DWORD PTR -4[rbp]<br>moveax, DWORD PTR -8[rbp]<br>addeax, edx<br>movDWORD PTR -12[rbp], eax<br>moveax, 0<br>leave<br>ret<br></code></pre></td></tr></table></figure><h3 id="Problem-of-Command-Parameters"><a href="#Problem-of-Command-Parameters" class="headerlink" title="Problem of Command Parameters"></a>Problem of Command Parameters</h3><p>Now we can see that <code>-fno-asynchronous-unwind-tables</code> and <code>-fno-ident</code> are actually not needed, and may filter out the content we want to keep, and further modify the command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -S -masm=intel -o - example.cpp | c++filt | grep -vE <span class="hljs-string">&#x27;\s+\.&#x27;</span> &gt; example.asm<br></code></pre></td></tr></table></figure><h3 id="Matt’s-Simple-Solution"><a href="#Matt’s-Simple-Solution" class="headerlink" title="Matt’s Simple Solution"></a>Matt’s Simple Solution</h3><p>In the speech, Matt mentioned his previous simple solution: use the <code>watch</code> command to execute the compilation command regularly, and then use <code>tmux</code> to open <code>vim</code> and <code>watch</code> at the same time to achieve a simple Compiler Explorer. I simply reproduced his solution:</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/mv03xaf.png" alt="A Simple Compiler Explorer"></p><h2 id="Discussion-of-Platform-Differences"><a href="#Discussion-of-Platform-Differences" class="headerlink" title="Discussion of Platform Differences"></a>Discussion of Platform Differences</h2><p>Here is current result, there are still some differences from the code on Compiler Explorer (green is my result, red is Compiler Explorer):</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs diff">main:<br><span class="hljs-addition">+ .LFB0:</span><br>pushrbp<br>movrbp, rsp<br><span class="hljs-addition">+ subrsp, 48</span><br><span class="hljs-addition">+ call__main</span><br><span class="hljs-deletion">- movedx, DWORD PTR [rbp-4]</span><br><span class="hljs-deletion">- moveax, DWORD PTR [rbp-8]</span><br><span class="hljs-addition">+ movedx, DWORD PTR -4[rbp]</span><br><span class="hljs-addition">+ moveax, DWORD PTR -8[rbp]</span><br>addeax, edx<br><span class="hljs-deletion">- movDWORD PTR [rbp-12], eax</span><br><span class="hljs-addition">+ movDWORD PTR -12[rbp], eax</span><br>moveax, 0<br><span class="hljs-addition">+ addrsp, 48</span><br>poprbp<br>ret<br></code></pre></td></tr></table></figure><p>I considered whether it was because of the difference in the platform, so I compiled with the same GCC 13 on the AMD platform, Ubuntu system, and the same GCC 13, the results are as follows:</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/9jx6rpj.png" alt="Different Compilation Result on Different Platforms"></p><p>We can see that the operations on <code>rsp</code> and the <code>call __main</code> are removed, but there are still differences when using pointer variables.</p><h3 id="Indirect-Operands-Pointer-Based"><a href="#Indirect-Operands-Pointer-Based" class="headerlink" title="Indirect Operands (Pointer Based)"></a>Indirect Operands (Pointer Based)</h3><p>The indirect operands of Compiler Explorer is <code>[rbp-4]</code>, while ours is <code>-4[rbp]</code>.</p><p>Generally, <code>-4(%rbp)</code> is AT&amp;T syntax, <code>[rbp-4]</code> is Intel syntax, but in our compilation result, Intel syntax produces <code>-4[rbp]</code>.</p><p>Adding <code>-fno-pie</code> flag can produce the expected output on Linux gcc, let’s ignore these platform differences for now and continue to explore the principles of Compiler Explorer.</p><h2 id="Compiler-Explorer-Principles"><a href="#Compiler-Explorer-Principles" class="headerlink" title="Compiler Explorer Principles"></a>Compiler Explorer Principles</h2><h3 id="Deep-into-Source-Code"><a href="#Deep-into-Source-Code" class="headerlink" title="Deep into Source Code"></a>Deep into Source Code</h3><p>Now our code is basically the same as the code on Compiler Explorer, we only need to do two things: filters Library functions and Unused label.</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/65edkm7.png" alt="Compiler Explorer&#39;s Filter Options"></p><p>The talk did not mention how to filter, so I searched for the source code of Compiler Explorer: <a href="https://github.com/compiler-explorer/compiler-explorer">https://github.com/compiler-explorer/compiler-explorer</a></p><p>First, we search for <code>filters</code> in the source code, and find all available filters in the API documentation:</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/214qhv6.png" alt="Search for filters"></p><p>Then, we search for <code>libraryCode</code> and find the following code:</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/6kagrcr.png" alt="Search for libraryCode"></p><p><code>objdump</code> is a tool that disassembles the target file. We haven’t seen <code>ASMPARSER</code> before, it seems to be an assembler parser. Then I continue to search for <code>externalparser</code>, and found the software name:</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/6gl9non.png" alt="Search for externalparser"></p><h3 id="Update-Test-Code"><a href="#Update-Test-Code" class="headerlink" title="Update Test Code"></a>Update Test Code</h3><p>In order to test the ability of the filter library function, we update the test code to:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">fq</span><span class="hljs-params">(<span class="hljs-number">26</span>, <span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-type">int</span> a, b, c;<br>    c = a + b;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="asm-parser"><a href="#asm-parser" class="headerlink" title="asm-parser"></a>asm-parser</h3><p>I found the <code>asm-parser</code> software of the author, which is written in C++:</p><p><a href="https://github.com/compiler-explorer/asm-parser">https://github.com/compiler-explorer/asm-parser</a></p><p>This software only compiles on the Linux platform. I tried to compile it on Windows but without success. I executed the following command on Linux:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -g -c example.cpp<br>objdump -d example.o -M intel -l --insn-width=16 | ./asm-parser -stdin -binary -outputtext -library_functions &gt; example.asm<br></code></pre></td></tr></table></figure><p>The result is as follows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs assembly">main:<br>...<br> mov    DWORD PTR [rbp-0x48],0x0<br> lea    rcx,[rbp-0x49]<br> lea    rdx,[rbp-0x48]<br> lea    rax,[rbp-0x30]<br> mov    esi,0x1a<br> mov    rdi,rax<br> call   46 &lt;main+0x46&gt;<br> lea    rax,[rbp-0x49]<br> mov    rdi,rax<br> call   52 &lt;main+0x52&gt;<br> nop<br> mov    edx,DWORD PTR [rbp-0x44]<br> mov    eax,DWORD PTR [rbp-0x40]<br>...<br></code></pre></td></tr></table></figure><p>The result on Compiler Explorer:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs assembly">main:<br>...<br> mov    DWORD PTR [rbp-0x2c],0x0<br> lea    rcx,[rbp-0x2d]<br> lea    rdx,[rbp-0x2c]<br> lea    rax,[rbp-0x50]<br> mov    esi,0x1a<br> mov    rdi,rax<br> call   33 &lt;main+0x33&gt;<br>    R_X86_64_PLT32 std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector(unsigned long, int const&amp;, std::allocator&lt;int&gt; const&amp;)-0x4<br> lea    rax,[rbp-0x2d]<br> mov    rdi,rax<br> call   3f &lt;main+0x3f&gt;<br>    R_X86_64_PLT32 std::__new_allocator&lt;int&gt;::~__new_allocator()-0x4<br> nop<br> mov    edx,DWORD PTR [rbp-0x14]<br> mov    eax,DWORD PTR [rbp-0x18]<br> add    eax,edx<br> mov    DWORD PTR [rbp-0x1c],eax<br> mov    ebx,0x0<br> lea    rax,[rbp-0x50]<br> mov    rdi,rax<br> call   5c &lt;main+0x5c&gt;<br>...<br></code></pre></td></tr></table></figure><p>The flag <code>-library_functions</code> of this software completely removes all library functions, not unused library functions. I found that in Compiler Explorer, you can choose the <code>binary</code> option, which is to compile to binary object files and then compile to assembly, or directly use the source file to compile to assembly. This software may be a bit outdated, and can only process binary files.</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/m2dxt3m.png" alt="binary option of Compiler Explorer"></p><h3 id="Back-to-Source-Code"><a href="#Back-to-Source-Code" class="headerlink" title="Back to Source Code"></a>Back to Source Code</h3><p>Back to the source code of Compiler Explorer, I found a file named <code>asm-parser.ts</code>, which contains a lot of regular expressions. This is probably the filter that the platform is currently using. <strong>This further confirms my idea that filtering is not a parameter of gcc, but filtering after compilation.</strong></p><p><img src="https://picture.zhanganzhi.com/2023/12/11/ylbpnta.png" alt="asm_parser.ts"></p><p>I downloaded the source code and ran it locally to see if it would output the command used in the console, but it didn’t.</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/qyoojki.png" alt="Run Locally"></p><h2 id="Extract-Source-Code-to-Local-Program"><a href="#Extract-Source-Code-to-Local-Program" class="headerlink" title="Extract Source Code to Local Program"></a>Extract Source Code to Local Program</h2><h3 id="Extract-Filtering-Code"><a href="#Extract-Filtering-Code" class="headerlink" title="Extract Filtering Code"></a>Extract Filtering Code</h3><p>Then I plan to extract the filtered js code and repackage it, so that it can be run locally.</p><p>In the <code>asm-parser.ts</code> file mentioned above, the last two functions seem to be functions that process binary and non-binary assembly.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title function_">processBinaryAsm</span>(<span class="hljs-attr">asmResult</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">filters</span>: <span class="hljs-title class_">ParseFiltersAndOutputOptions</span>): <span class="hljs-title class_">ParsedAsmResult</span> &#123;<br>    ...<br>&#125;<br><br><span class="hljs-title function_">process</span>(<span class="hljs-params">asm: <span class="hljs-built_in">string</span>, filters: ParseFiltersAndOutputOptions</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">processAsm</span>(asm, filters);<br>&#125;<br></code></pre></td></tr></table></figure><p>The next thing is simple, set a breakpoint and view the method parameters:</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/s6jez8j.png" alt="Debug"></p><p><code>asm</code> is the text of assembly code, <code>filter</code> is a object contains filtering options.</p><p>By the asm text here, we know that the actual compilation parameters are as follows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -g -S -masm=intel -o - example.cpp &gt; example.asm<br></code></pre></td></tr></table></figure><p>Which is added <code>-g</code> parameter, this is to add debug information in the assembly code, I guess <code>c++filt</code> will use it later.</p><p>I extracted <code>asm_parser.ts</code> and other files I needed, and wrote a main file.</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/3e3l94o.png" alt="Main File"></p><p>According to the documentation of asm-parser that written in C++, filter library function is based on file path, the file name must be <code>example.cpp</code> to be retained, otherwise the main file will be filtered as a library file. The regular expression in the source code shows this:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">stdInLooking</span> = <span class="hljs-regexp">/&lt;stdin&gt;|^-$|example\.[^/]+$|&lt;source&gt;/</span>;<br></code></pre></td></tr></table></figure><h3 id="JSON-to-Text"><a href="#JSON-to-Text" class="headerlink" title="JSON to Text"></a>JSON to Text</h3><p>The current output is still in JSON format, and I wanted to convert it to plain text, so I wrote a function to output plain text.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">resultToText</span>(<span class="hljs-params">r: ParsedAsmResult</span>) &#123;<br>  <span class="hljs-keyword">return</span> r.<span class="hljs-property">asm</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">line</span> =&gt;</span> line.<span class="hljs-property">text</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="c-filt"><a href="#c-filt" class="headerlink" title="c++filt"></a>c++filt</h3><p>The next step is to filter C++ symbols by <code>c++filt</code>, then we have the almost same result as Compiler Explorer.</p><h3 id="Description-after-Symbol"><a href="#Description-after-Symbol" class="headerlink" title="Description after Symbol"></a>Description after Symbol</h3><p><img src="https://picture.zhanganzhi.com/2023/12/11/klyq497.png" alt="Comparing Results"></p><p>The comparison of the above shows that the output of Compiler Explorer adds a description in brackets after the function call. After reading the source code again, I extracted the <code>CppDemangler</code> class.</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/a0hquni.png" alt="Compiler Explorer uses this class to mark library functions"></p><p>Up to now, the output is exactly the same as the output on godbolt.</p><h2 id="asm-parser-in-Typescript"><a href="#asm-parser-in-Typescript" class="headerlink" title="asm-parser in Typescript"></a>asm-parser in Typescript</h2><h3 id="Optimize-Command-Line-Interface"><a href="#Optimize-Command-Line-Interface" class="headerlink" title="Optimize Command Line Interface"></a>Optimize Command Line Interface</h3><p>Finally, I made some small modifications to the code, improved the command line interface, read the assembly code from <code>stdin</code>, and output to <code>stdout</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">AsmParser</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./src/lib/asm-parser.js&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">BaseCompiler</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./src/lib/fake-base-compiler.js&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">CppDemangler</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./src/lib/demangler/cpp.js&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">ParsedAsmResult</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./src/types/asmresult/asmresult.interfaces.js&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;<br>  <span class="hljs-title class_">ParseFiltersAndOutputOptions</span><br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./src/types/features/filters.interfaces.js&quot;</span>;<br><br><span class="hljs-keyword">const</span> baseCompiler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseCompiler</span>();<br><span class="hljs-keyword">const</span> cppDemangler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CppDemangler</span>(<span class="hljs-string">&quot;c++filt&quot;</span>, baseCompiler);<br><span class="hljs-keyword">const</span> asmParser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsmParser</span>();<br><br><span class="hljs-keyword">const</span> args = process.<span class="hljs-property">argv</span>;<br><span class="hljs-keyword">const</span> outputTextFlag = args.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;--outputtext&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-attr">filters</span>: <span class="hljs-title class_">ParseFiltersAndOutputOptions</span> = &#123;<br>  <span class="hljs-attr">labels</span>: args.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;--unused_labels&quot;</span>),<br>  <span class="hljs-attr">libraryCode</span>: args.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;--library_code&quot;</span>),<br>  <span class="hljs-attr">directives</span>: args.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;--directives&quot;</span>),<br>  <span class="hljs-attr">commentOnly</span>: args.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;--comment_only&quot;</span>),<br>  <span class="hljs-attr">binary</span>: args.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;--binary&quot;</span>),<br>  <span class="hljs-attr">binaryObject</span>: args.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;--binary&quot;</span>)<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">resultToText</span>(<span class="hljs-params">r: ParsedAsmResult</span>) &#123;<br>  <span class="hljs-keyword">return</span> r.<span class="hljs-property">asm</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">line</span> =&gt;</span> line.<span class="hljs-property">text</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getInput</span>(<span class="hljs-params"></span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">string</span>&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) &#123;<br>    <span class="hljs-keyword">const</span> stdin = process.<span class="hljs-property">stdin</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">data</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br>    stdin.<span class="hljs-title function_">setEncoding</span>(<span class="hljs-string">&quot;utf8&quot;</span>);<br>    stdin.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">chunk</span>) &#123;<br>      data += chunk;<br>    &#125;);<br><br>    stdin.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;end&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">resolve</span>(data);<br>    &#125;);<br><br>    stdin.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;error&#x27;</span>, reject);<br>  &#125;);<br>&#125;<br><br><span class="hljs-title function_">getInput</span>().<span class="hljs-title function_">then</span>(<span class="hljs-keyword">async</span> (<span class="hljs-attr">input</span>: <span class="hljs-built_in">string</span>) =&gt; &#123;<br>  <span class="hljs-comment">// parse</span><br>  <span class="hljs-keyword">let</span> result = asmParser.<span class="hljs-title function_">process</span>(input, filters);<br><br>  <span class="hljs-comment">// demangle</span><br>  result = <span class="hljs-keyword">await</span> cppDemangler.<span class="hljs-title function_">process</span>(result);<br><br>  <span class="hljs-comment">// print</span><br>  <span class="hljs-keyword">if</span> (outputTextFlag) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">resultToText</span>(result));<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(result, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span>));<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -g -S -masm=intel -o - example.cpp | ts-node-esm index.ts --unused_labels --library_code --directives --comment_only  --outputtext &gt; example.asm<br></code></pre></td></tr></table></figure><p>Test again, the output is the same as the output on Compiler Explorer, and the output is exactly the same.</p><p>Then we use <a href="https://github.com/vercel/pkg">https://github.com/vercel/pkg</a> to compile ts into binary files, this tool can compile to three platforms at the same.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">tsc index.ts --target esnext --module nodenext --skipLibCheck --outDir dist<br>rollup dist/index.js --file dist/bundle.js --format cjs<span class="hljs-string">&quot;,</span><br><span class="hljs-string">pkg dist/bundle.js --out-path dist</span><br></code></pre></td></tr></table></figure><p>I published this project on GitHub, and welcome everyone to use and give suggestions: <a href="https://github.com/AnzhiZhang/asm-parser">https://github.com/AnzhiZhang/asm-parser</a></p><p>Now we have the full compile command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -g -S -masm=intel -o - example.cpp | asm-parser-win --unused_labels --library_code --directives --comment_only --outputtext &gt; example.asm<br></code></pre></td></tr></table></figure><h3 id="Source-Code-Correspondence-and-Coloring"><a href="#Source-Code-Correspondence-and-Coloring" class="headerlink" title="Source Code Correspondence and Coloring"></a>Source Code Correspondence and Coloring</h3><p>The last small problem is that the assembly code on Compiler Explorer is colored to mark the correspondence between the assembly code and the source code, but ours is not. Looking at the return data of the interface, it can be found that the front end receives JSON format, and each line has the line number of the corresponding source code. This feature is implemented by the front end.</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/g4872u6.png" alt="Correspondence on Compiler Explorer"></p><p>We only need to remove the <code>--outputtext</code> parameter when using <code>asm-parser</code>, and we can get the data with the correspondence between the source code and the line numbers. The command is as follows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -g -S -masm=intel -o - example.cpp | asm-parser-win --unused_labels --library_code --directives --comment_only &gt; example.asm<br></code></pre></td></tr></table></figure><h2 id="Other-Platforms"><a href="#Other-Platforms" class="headerlink" title="Other Platforms"></a>Other Platforms</h2><p>We may also want to get filtered assembly code on the armv8 and riscv platforms. The following briefly introduces the implementation method.</p><p>To facilitate demonstration, I only use the following code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>    c = a + b;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Also, in order to facilitate cross-compilation, we use <code>clang</code> and add <code>-target &lt;triple&gt;</code> to specify the target platform.<sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Cross-compilation using Clang — Clang 18.0.0git documentation](https://clang.llvm.org/docs/CrossCompilation.html#target-triple). [Archived](https://web.archive.org/web/20231211182735/https://clang.llvm.org/docs/CrossCompilation.html#target-triple) on 2023-12-11. Retrieved 2023-12-11.">[8]</span></a></sup></p><blockquote><p>The triple has the general format <code>&lt;arch&gt;&lt;sub&gt;-&lt;vendor&gt;-&lt;sys&gt;-&lt;env&gt;</code>, where:</p><ul><li><code>arch</code> &#x3D; <code>x86_64</code>, <code>i386</code>, <code>arm</code>, <code>thumb</code>, <code>mips</code>, etc.</li><li><code>sub</code> &#x3D; for ex. on ARM: <code>v5</code>, <code>v6m</code>, <code>v7a</code>, <code>v7m</code>, etc.</li><li><code>vendor</code> &#x3D; <code>pc</code>, <code>apple</code>, <code>nvidia</code>, <code>ibm</code>, etc.</li><li><code>sys</code> &#x3D; <code>none</code>, <code>linux</code>, <code>win32</code>, <code>darwin</code>, <code>cuda</code>, etc.</li><li><code>env</code> &#x3D; <code>eabi</code>, <code>gnu</code>, <code>android</code>, <code>macho</code>, <code>elf</code>, etc.</li></ul></blockquote><h3 id="armv8"><a href="#armv8" class="headerlink" title="armv8"></a>armv8</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang -g -S -o - -target aarch64-pc-linux-gnu example.cpp | asm-parser-win --unused_labels --library_code --directives --comment_only --outputtext<br></code></pre></td></tr></table></figure><p>Compile output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs assembly">main:                                   // @main<br>        sub     sp, sp, #16<br>        mov     w0, wzr<br>        str     wzr, [sp, #12]<br>        ldr     w8, [sp, #8]<br>        ldr     w9, [sp, #4]<br>        add     w8, w8, w9<br>        str     w8, [sp]<br>        add     sp, sp, #16<br>        ret<br></code></pre></td></tr></table></figure><p><img src="https://picture.zhanganzhi.com/2023/12/11/ie2wr3i.png" alt="armv8 result on Compiler Explorer"></p><h3 id="riscv"><a href="#riscv" class="headerlink" title="riscv"></a>riscv</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang -g -S -o - -target riscv64-unknown-linux-gnu example.cpp | asm-parser-win --unused_labels --library_code --directives --comment_only --outputtext<br></code></pre></td></tr></table></figure><p>Compile output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs assembly">main:                                   # @main<br>        addi    sp, sp, -32<br>        sd      ra, 24(sp)                      # 8-byte Folded Spill<br>        sd      s0, 16(sp)                      # 8-byte Folded Spill<br>        addi    s0, sp, 32<br>        li      a0, 0<br>        sw      a0, -20(s0)<br>        lw      a1, -24(s0)<br>        lw      a2, -28(s0)<br>        addw    a1, a1, a2<br>        sw      a1, -32(s0)<br>        ld      ra, 24(sp)                      # 8-byte Folded Reload<br>        ld      s0, 16(sp)                      # 8-byte Folded Reload<br>        addi    sp, sp, 32<br>        ret<br></code></pre></td></tr></table></figure><p><img src="https://picture.zhanganzhi.com/2023/12/11/w99hp8l.png" alt="riscv result on Compiler Explorer"></p><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>阮一峰. <a href="https://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html">汇编语言入门教程 - 阮一峰的网络日志</a>. 2018-01-21. <a href="https://web.archive.org/web/20231211131556/https://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html">Archived</a> on 2023-12-11. Retrieved 2023-12-11.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>Antoine Pelisse. <a href="https://stackoverflow.com/questions/4779336/does-c-compile-to-assembly/4779372#4779372">Does C++ compile to assembly?</a>. 2011-01-24. <a href="https://web.archive.org/web/20231211153914/https://stackoverflow.com/questions/4779336/does-c-compile-to-assembly/4779372#4779372">Archived</a> on 2023-12-11. Retrieved 2023-12-11.<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>Andrew Edgecombe. <a href="https://stackoverflow.com/questions/137038/how-do-you-get-assembler-output-from-c-c-source-in-gcc/137074#137074">How do you get assembler output from C&#x2F;C++ source in GCC?</a>. 2008-09-26. <a href="https://web.archive.org/web/20231211153931/https://stackoverflow.com/questions/137038/how-do-you-get-assembler-output-from-c-c-source-in-gcc/137074#137074">Archived</a> on 2023-12-11. Retrieved 2023-12-11.<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>David Wohlferd. <a href="https://stackoverflow.com/questions/20819927/what-are-seh-assembly-commands-that-gcc-outputs/38181874#38181874">What are .seh_* assembly commands that gcc outputs?</a>. 2016-07-04. <a href="https://web.archive.org/web/20231211160356/https://stackoverflow.com/questions/20819927/what-are-seh-assembly-commands-that-gcc-outputs/38181874#38181874">Archived</a> on 2023-12-11. Retrieved 2023-12-11.<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://stackoverflow.com/questions/20819927/what-are-seh-assembly-commands-that-gcc-outputs/38181874#38181874">Code Gen Options (Using the GNU Compiler Collection (GCC))</a>. <a href="https://web.archive.org/web/20231211161014/https://gcc.gnu.org/onlinedocs/gcc/Code-Gen-Options.html">Archived</a> on 2023-12-11. Retrieved 2023-12-11.<a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span>Peter Cordes. <a href="https://stackoverflow.com/questions/56245402/step-into-standard-library-call-with-godbolt/56246283#56246283">Step into standard library call with godbolt</a>. 2019-05-21. <a href="https://web.archive.org/web/20231211162509/https://stackoverflow.com/questions/56245402/step-into-standard-library-call-with-godbolt/56246283#56246283">Archived</a> on 2023-12-11. Retrieved 2023-12-11.<a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span>Peter Cordes. <a href="https://stackoverflow.com/questions/38552116/how-to-remove-noise-from-gcc-clang-assembly-output/38552509#38552509">How to remove “noise” from GCC&#x2F;clang assembly output?</a>. 2016-01-24. <a href="https://web.archive.org/web/20231211162508/https://stackoverflow.com/questions/38552116/how-to-remove-noise-from-gcc-clang-assembly-output/38552509#38552509">Archived</a> on 2023-12-11. Retrieved 2023-12-11.<a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span><a href="https://clang.llvm.org/docs/CrossCompilation.html#target-triple">Cross-compilation using Clang — Clang 18.0.0git documentation</a>. <a href="https://web.archive.org/web/20231211182735/https://clang.llvm.org/docs/CrossCompilation.html#target-triple">Archived</a> on 2023-12-11. Retrieved 2023-12-11.<a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学术</category>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>汇编</tag>
      
      <tag>Compiler Explorer</tag>
      
      <tag>编译器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Compiler Explorer（Godbolt）是如何工作的？</title>
    <link href="/zh-CN/2023/12/e1e8adfb656e/"/>
    <url>/zh-CN/2023/12/e1e8adfb656e/</url>
    
    <content type="html"><![CDATA[<!-- markdownlint-disable MD010 MD033 --><blockquote><p>Compiler Explorer（Godbolt）是一个交互式在线汇编语言编译器，本文主要分享探索其原理的过程，并提取其开源代码实现了一个本地命令行版本。</p></blockquote><span id="more"></span><h2 id="什么是汇编"><a href="#什么是汇编" class="headerlink" title="什么是汇编"></a>什么是汇编</h2><p>推荐阅读<a href="https://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html">汇编语言入门教程 - 阮一峰的网络日志</a><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="阮一峰. [汇编语言入门教程 - 阮一峰的网络日志](https://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html). 2018-01-21. [Archived](https://web.archive.org/web/20231211131556/https://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html) on 2023-12-11. Retrieved 2023-12-11.">[1]</span></a></sup>了解汇编语言的基础知识。</p><h2 id="样例代码"><a href="#样例代码" class="headerlink" title="样例代码"></a>样例代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>    c = a + b;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Compiler-Explorer-结果"><a href="#Compiler-Explorer-结果" class="headerlink" title="Compiler Explorer 结果"></a>Compiler Explorer 结果</h2><p>首先使用 Compiler Explorer 编译上述代码，得到如下结果，确定我们的目标：</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/rfd7a37.png" alt="Compiler Explorer 的输出"></p><h2 id="GCC-编译到汇编"><a href="#GCC-编译到汇编" class="headerlink" title="GCC 编译到汇编"></a>GCC 编译到汇编</h2><p>使用以下命令将 C++ 代码编译到汇编<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Antoine Pelisse. [Does C++ compile to assembly?](https://stackoverflow.com/questions/4779336/does-c-compile-to-assembly/4779372#4779372). 2011-01-24. [Archived](https://web.archive.org/web/20231211153914/https://stackoverflow.com/questions/4779336/does-c-compile-to-assembly/4779372#4779372) on 2023-12-11. Retrieved 2023-12-11.">[2]</span></a></sup><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="Andrew Edgecombe. [How do you get assembler output from C/C++ source in GCC?](https://stackoverflow.com/questions/137038/how-do-you-get-assembler-output-from-c-c-source-in-gcc/137074#137074). 2008-09-26. [Archived](https://web.archive.org/web/20231211153931/https://stackoverflow.com/questions/137038/how-do-you-get-assembler-output-from-c-c-source-in-gcc/137074#137074) on 2023-12-11. Retrieved 2023-12-11.">[3]</span></a></sup>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -S example.cpp<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.file&quot;example.cpp&quot;<br>.text<br>.def__main;.scl2;.type32;.endef<br>.globlmain<br>.defmain;.scl2;.type32;.endef<br>.seh_procmain<br>main:<br>.LFB0:<br>pushq%rbp<br>.seh_pushreg%rbp<br>movq%rsp, %rbp<br>.seh_setframe%rbp, 0<br>subq$48, %rsp<br>.seh_stackalloc48<br>.seh_endprologue<br>call__main<br>movl-4(%rbp), %edx<br>movl-8(%rbp), %eax<br>addl%edx, %eax<br>movl%eax, -12(%rbp)<br>movl$0, %eax<br>addq$48, %rsp<br>popq%rbp<br>ret<br>.seh_endproc<br>.ident&quot;GCC: (GNU) 13.2.0&quot;<br></code></pre></td></tr></table></figure><h2 id="文件清理及优化参数"><a href="#文件清理及优化参数" class="headerlink" title="文件清理及优化参数"></a>文件清理及优化参数</h2><blockquote><p>本文主要分享探索过程，这部分实际上并不会在最后用到，可以考虑跳过。</p></blockquote><h3 id="seh-指令"><a href="#seh-指令" class="headerlink" title=".seh_* 指令"></a><code>.seh_*</code> 指令</h3><p>首先移除 <code>.seh_*</code>，这些是 MASM 的帧处理伪代码 <code>gas</code> 的实现<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="David Wohlferd. [What are .seh_* assembly commands that gcc outputs?](https://stackoverflow.com/questions/20819927/what-are-seh-assembly-commands-that-gcc-outputs/38181874#38181874). 2016-07-04. [Archived](https://web.archive.org/web/20231211160356/https://stackoverflow.com/questions/20819927/what-are-seh-assembly-commands-that-gcc-outputs/38181874#38181874) on 2023-12-11. Retrieved 2023-12-11.">[4]</span></a></sup>。添加参数 <code>-fno-asynchronous-unwind-tables</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -S -fno-asynchronous-unwind-tables example.cpp<br></code></pre></td></tr></table></figure><h3 id="指定输出文件"><a href="#指定输出文件" class="headerlink" title="指定输出文件"></a>指定输出文件</h3><p>使用 <code>-o</code> 参数指定输出文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -S -fno-asynchronous-unwind-tables -o example.asm example.cpp<br></code></pre></td></tr></table></figure><h3 id="Intel-风格"><a href="#Intel-风格" class="headerlink" title="Intel 风格"></a>Intel 风格</h3><p>在 Compiler Explorer 上的汇编代码没有 <code>%</code>，而直接编译的结果有大量的 <code>%</code>，搜索发现这是 AT&amp;T 风格和 Intel 风格的区别。</p><p>更新命令参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -S -masm=intel -fno-asynchronous-unwind-tables -o example.asm example.cpp<br></code></pre></td></tr></table></figure><h3 id="移除-ident"><a href="#移除-ident" class="headerlink" title="移除 .ident"></a>移除 <code>.ident</code></h3><p>以 <code>-fno-asynchronous-unwind-tables</code> 为线索搜索，找到了 GCC 文档，发现 <code>-fno-ident</code> 参数可以移除 <code>.ident</code><sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Code Gen Options (Using the GNU Compiler Collection (GCC))](https://stackoverflow.com/questions/20819927/what-are-seh-assembly-commands-that-gcc-outputs/38181874#38181874). [Archived](https://web.archive.org/web/20231211161014/https://gcc.gnu.org/onlinedocs/gcc/Code-Gen-Options.html) on 2023-12-11. Retrieved 2023-12-11.">[5]</span></a></sup>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -S -masm=intel -fno-asynchronous-unwind-tables -fno-ident -o example.asm example.cpp<br></code></pre></td></tr></table></figure><h3 id="当前的成果"><a href="#当前的成果" class="headerlink" title="当前的成果"></a>当前的成果</h3><p>此时已经和 Compiler Explorer 的输出基本一致了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.file&quot;example.cpp&quot;<br>.intel_syntax noprefix<br>.text<br>.def__main;.scl2;.type32;.endef<br>.globlmain<br>.defmain;.scl2;.type32;.endef<br>main:<br>pushrbp<br>movrbp, rsp<br>subrsp, 48<br>call__main<br>movedx, DWORD PTR -4[rbp]<br>moveax, DWORD PTR -8[rbp]<br>addeax, edx<br>movDWORD PTR -12[rbp], eax<br>moveax, 0<br>leave<br>ret<br></code></pre></td></tr></table></figure><p><img src="https://picture.zhanganzhi.com/2023/12/11/iznyq18.png" alt="Compiler Explorer 的输出"></p><h2 id="深入-Compiler-Explorer-原理"><a href="#深入-Compiler-Explorer-原理" class="headerlink" title="深入 Compiler Explorer 原理"></a>深入 Compiler Explorer 原理</h2><h3 id="真的是-GCC-在过滤吗？"><a href="#真的是-GCC-在过滤吗？" class="headerlink" title="真的是 GCC 在过滤吗？"></a>真的是 GCC 在过滤吗？</h3><p>在 Compiler Explorer 上，有一个过滤器选项，不选择过滤时，结果有着巨大的差异。</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/rargnnn.png" alt="不过滤未使用的标签和库函数"></p><p><img src="https://picture.zhanganzhi.com/2023/12/11/65edkm7.png" alt="过滤所有"></p><p>于是我怀疑是否这个过滤不是 GCC 编译器的功能，因为完整的编译流程后产生的二进制文件需要可执行，是必须包含库函数等文件的，是不是 Compiler Explorer 实际上在编译后过滤了一遍，实现的这个效果。</p><p>例如上文的简单代码，使用以下命令查看预处理后的文件是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -E -o example.txt example.cpp<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"># <span class="hljs-number">0</span> <span class="hljs-string">&quot;example.cpp&quot;</span><br># <span class="hljs-number">0</span> <span class="hljs-string">&quot;&lt;built-in&gt;&quot;</span><br># <span class="hljs-number">0</span> <span class="hljs-string">&quot;&lt;command-line&gt;&quot;</span><br># <span class="hljs-number">1</span> <span class="hljs-string">&quot;example.cpp&quot;</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>    c = a + b;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>而添加 <code>#include &lt;stdio.h&gt;</code> 后，预处理后的文件变为了一千多行，<code>stdio</code> 中的内容也被包含了进来，于是编译器会将这部分也编译为汇编代码，以便可执行文件包含所有的库。</p><h3 id="搜索-Compiler-Explorer-原理"><a href="#搜索-Compiler-Explorer-原理" class="headerlink" title="搜索 Compiler Explorer 原理"></a>搜索 Compiler Explorer 原理</h3><p>Compiler Explorer 曾经名为 <code>godbolt</code>，直接检索 godbolt 如何过滤汇编代码：</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/kdrp4ee.png" alt="搜索结果&lt;sup id=&quot;fnref:6&quot; class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn:6&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--rounded&quot; aria-label=&quot;Peter Cordes. [Step into standard library call with godbolt](https://stackoverflow.com/questions/56245402/step-into-standard-library-call-with-godbolt/56246283#56246283). 2019-05-21. [Archived](https://web.archive.org/web/20231211162509/https://stackoverflow.com/questions/56245402/step-into-standard-library-call-with-godbolt/56246283#56246283) on 2023-12-11. Retrieved 2023-12-11.&quot;&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&quot;fnref:7&quot; class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn:7&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--rounded&quot; aria-label=&quot;Peter Cordes. [How to remove &quot;noise&quot; from GCC/clang assembly output?](https://stackoverflow.com/questions/38552116/how-to-remove-noise-from-gcc-clang-assembly-output/38552509#38552509). 2016-01-24. [Archived](https://web.archive.org/web/20231211162508/https://stackoverflow.com/questions/38552116/how-to-remove-noise-from-gcc-clang-assembly-output/38552509#38552509) on 2023-12-11. Retrieved 2023-12-11.&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;"></p><p>然后找到了 Compiler Explorer 作者 Matt Godbolt 的演讲：<a href="https://www.youtube.com/watch?v=bSkpMdDe4g4">CppCon 2017: Matt Godbolt “What Has My Compiler Done for Me Lately? Unbolting the Compiler’s Lid”</a></p><div style="width=90%; padding-top: 56.25%; position: relative;"><iframe style="top:0; bottom:0; left:0; right:0; position: absolute;" width="100%" height="100%" src="https://www.youtube.com/embed/bSkpMdDe4g4" title="CppCon 2017: Matt Godbolt “What Has My Compiler Done for Me Lately? Unbolting the Compiler's Lid”" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe></div><h3 id="Matt-Godbolt-的演讲"><a href="#Matt-Godbolt-的演讲" class="headerlink" title="Matt Godbolt 的演讲"></a>Matt Godbolt 的演讲</h3><p>这个演讲详细解释了寄存器的区别、如何保持从 8 位处理器到现在 64 位的兼容、Intel 语法和 AT&amp;T 语法、Compiler Explorer 原理……</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/lm0pkxk.png" alt="关于寄存器的名称和约定"></p><p><img src="https://picture.zhanganzhi.com/2023/12/11/tkwgh5q.png" alt="从 8 位到 64 位时代的寄存器"></p><blockquote><p>我个人强烈推荐这个演讲给计算机本科的同学，这对于了解 C 编译器的过程、汇编语言的基本知识、寄存器、编译器的优化策略等都有很大的帮助，绝对值得花费 2-3 小时的时间学习和理解这个演讲。</p><p>其中的每一个细节的知识点都可以发散出非常多的内容，例如计算机从 8 位发展到 64 位的历史和变化、汇编语言基础、编译器的优化（他演示了几种情况，展示了编译器如何优化它们）、linux 命令、Docker、云服务器实践和虚拟机……</p><p>学习这个演讲的内容，并完全消化，无论对于目标是工业界还是学术界的学生都是有益的。</p></blockquote><h3 id="过滤以点开头的行和-C-符号"><a href="#过滤以点开头的行和-C-符号" class="headerlink" title="过滤以点开头的行和 C++ 符号"></a>过滤以点开头的行和 C++ 符号</h3><p>在演讲中，我注意到了以下命令：</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/b06924r.png" alt="最简易的过滤方式"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ /tmp/test.cc -O2 -c -S -o - -masm=intel | c++filt | grep -vE <span class="hljs-string">&#x27;\s+\.&#x27;</span><br></code></pre></td></tr></table></figure><p>参数的含义如下：</p><ul><li><code>-O2</code> 优化等级</li><li><code>-c</code> 仅编译和汇编，不链接，但实际上我们不需要 object 文件</li><li><code>-S</code> 编译，获得汇编代码</li><li><code>-o -</code> 输出到命令行</li><li><code>-masm=intel</code> 使用 intel 语法</li><li><code>c++filt</code> 过滤 C++ 的符号</li><li><code>grep -vE &#39;\s+\.</code> 过滤以点开头的行</li></ul><p><code>c++filt</code> 的作用是过滤 C++ 的符号，因为 C++ 有函数重载，编译器会对此处理，而我们希望获得人类可读的函数名，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">echo</span> _ZNSt11char_traitsIcE6lengthEPKc | c++filt<br>std::char_traits&lt;char&gt;::length(char const*)<br></code></pre></td></tr></table></figure><p>借鉴这个命令，优化我们的编译命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -S -masm=intel -fno-asynchronous-unwind-tables -fno-ident -o - example.cpp | c++filt | grep -vE <span class="hljs-string">&#x27;\s+\.&#x27;</span> &gt; example.asm<br></code></pre></td></tr></table></figure><p>此时的编译结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs assembly">main:<br>pushrbp<br>movrbp, rsp<br>subrsp, 48<br>call__main<br>movedx, DWORD PTR -4[rbp]<br>moveax, DWORD PTR -8[rbp]<br>addeax, edx<br>movDWORD PTR -12[rbp], eax<br>moveax, 0<br>leave<br>ret<br></code></pre></td></tr></table></figure><h3 id="命令参数的问题"><a href="#命令参数的问题" class="headerlink" title="命令参数的问题"></a>命令参数的问题</h3><p>由此我们也可以看出来 <code>-fno-asynchronous-unwind-tables</code> 和 <code>-fno-ident</code> 其实并不需要，反而可能会过滤掉我们希望保留的内容，进一步修改命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -S -masm=intel -o - example.cpp | c++filt | grep -vE <span class="hljs-string">&#x27;\s+\.&#x27;</span> &gt; example.asm<br></code></pre></td></tr></table></figure><h3 id="Matt-的简单方案"><a href="#Matt-的简单方案" class="headerlink" title="Matt 的简单方案"></a>Matt 的简单方案</h3><p>有了这样的指令，Matt 提到了他以前使用的简单方案：基于 Linux 的 <code>watch</code> 命令实现定时执行编译命令，然后用 <code>tmux</code> 一边开 <code>vim</code> 一边 <code>watch</code>，实现了简单的 Compiler Explorer。我简单复现了他的方案：</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/mv03xaf.png" alt="简陋版的 Compiler Explorer"></p><h2 id="简单讨论平台差异"><a href="#简单讨论平台差异" class="headerlink" title="简单讨论平台差异"></a>简单讨论平台差异</h2><p>当前的编译结果是这样的，其中有几行依然与 Compiler Explorer 上的代码不同（绿色为我的结果，红色为 Compiler Explorer 的）：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs diff">main:<br><span class="hljs-addition">+ .LFB0:</span><br>pushrbp<br>movrbp, rsp<br><span class="hljs-addition">+ subrsp, 48</span><br><span class="hljs-addition">+ call__main</span><br><span class="hljs-deletion">- movedx, DWORD PTR [rbp-4]</span><br><span class="hljs-deletion">- moveax, DWORD PTR [rbp-8]</span><br><span class="hljs-addition">+ movedx, DWORD PTR -4[rbp]</span><br><span class="hljs-addition">+ moveax, DWORD PTR -8[rbp]</span><br>addeax, edx<br><span class="hljs-deletion">- movDWORD PTR [rbp-12], eax</span><br><span class="hljs-addition">+ movDWORD PTR -12[rbp], eax</span><br>moveax, 0<br><span class="hljs-addition">+ addrsp, 48</span><br>poprbp<br>ret<br></code></pre></td></tr></table></figure><p>我考虑是否有可能是有平台的区别，于是在 AMD 平台，Ubuntu 系统，使用同样的 GCC 13 编译，结果如下：</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/9jx6rpj.png" alt="在不同平台的编译结果不同"></p><p>可以看到确实对 <code>rsp</code> 的无用操作和 <code>call __main</code> 消失了，但是在使用指针变量时仍然有区别。</p><h3 id="指针语法"><a href="#指针语法" class="headerlink" title="指针语法"></a>指针语法</h3><p>Compiler Explorer 的编译结果中的引用格式是 <code>[rbp-4]</code>，而我们的是 <code>-4[rbp]</code>。</p><p>一般而言，<code>-4(%rbp)</code> 是 AT&amp;T 语法，<code>[rbp-4]</code> 是 Intel 语法，但是在我们的编译结果中，Intel 语法产生了 <code>-4[rbp]</code> 的结果。</p><p>我们先放下这些平台差异，继续探索 Compiler Explorer 的原理。</p><h2 id="Compiler-Explorer-原理"><a href="#Compiler-Explorer-原理" class="headerlink" title="Compiler Explorer 原理"></a>Compiler Explorer 原理</h2><h3 id="深入源码"><a href="#深入源码" class="headerlink" title="深入源码"></a>深入源码</h3><p>现在我们的代码已经和 Compiler Explorer 上的代码基本一致了，我们只需要做两件事：过滤 Library functions 和 Unused label。</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/65edkm7.png" alt="Compiler Explorer 的过滤选项"></p><p>演讲中并没有提到是怎么过滤的，于是我查找了 Compiler Explorer 的源码：<a href="https://github.com/compiler-explorer/compiler-explorer">https://github.com/compiler-explorer/compiler-explorer</a></p><p>首先搜索 <code>filters</code>，在 API 文档中找到了所有可用的 filters：</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/214qhv6.png" alt="filters 的搜索结果"></p><p>继续搜索 <code>libraryCode</code>，找到了这段代码，看起来是生成一个过滤用的脚本。</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/6kagrcr.png" alt="libraryCode 的搜索结果"></p><p><code>objdump</code>，是将目标文件反汇编的工具，而 <code>ASMPARSER</code> 之前并没有见过，似乎是汇编语言的解析器，于是继续搜索 <code>externalparser</code>，找到了这个软件名：</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/6gl9non.png" alt="externalparser 的搜索结果"></p><h3 id="更新测试代码"><a href="#更新测试代码" class="headerlink" title="更新测试代码"></a>更新测试代码</h3><p>为了测试过滤库函数的能力，我们将测试代码更新为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">fq</span><span class="hljs-params">(<span class="hljs-number">26</span>, <span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-type">int</span> a, b, c;<br>    c = a + b;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="asm-parser"><a href="#asm-parser" class="headerlink" title="asm-parser"></a>asm-parser</h3><p>随后找到了该作者的 <code>asm-parser</code> 软件，使用 C++ 编写：</p><p><a href="https://github.com/compiler-explorer/asm-parser">https://github.com/compiler-explorer/asm-parser</a></p><p>这个软件只编译了 Linux 平台，我尝试在 Windows 编译没有成功，在 Linux 执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -g -c example.cpp<br>objdump -d example.o -M intel -l --insn-width=16 | ./asm-parser -stdin -binary -outputtext -library_functions &gt; example.asm<br></code></pre></td></tr></table></figure><p>编译后的结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs assembly">main:<br>...<br> mov    DWORD PTR [rbp-0x48],0x0<br> lea    rcx,[rbp-0x49]<br> lea    rdx,[rbp-0x48]<br> lea    rax,[rbp-0x30]<br> mov    esi,0x1a<br> mov    rdi,rax<br> call   46 &lt;main+0x46&gt;<br> lea    rax,[rbp-0x49]<br> mov    rdi,rax<br> call   52 &lt;main+0x52&gt;<br> nop<br> mov    edx,DWORD PTR [rbp-0x44]<br> mov    eax,DWORD PTR [rbp-0x40]<br>...<br></code></pre></td></tr></table></figure><p>Compiler Explorer 上的结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs assembly">main:<br>...<br> mov    DWORD PTR [rbp-0x2c],0x0<br> lea    rcx,[rbp-0x2d]<br> lea    rdx,[rbp-0x2c]<br> lea    rax,[rbp-0x50]<br> mov    esi,0x1a<br> mov    rdi,rax<br> call   33 &lt;main+0x33&gt;<br>    R_X86_64_PLT32 std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector(unsigned long, int const&amp;, std::allocator&lt;int&gt; const&amp;)-0x4<br> lea    rax,[rbp-0x2d]<br> mov    rdi,rax<br> call   3f &lt;main+0x3f&gt;<br>    R_X86_64_PLT32 std::__new_allocator&lt;int&gt;::~__new_allocator()-0x4<br> nop<br> mov    edx,DWORD PTR [rbp-0x14]<br> mov    eax,DWORD PTR [rbp-0x18]<br> add    eax,edx<br> mov    DWORD PTR [rbp-0x1c],eax<br> mov    ebx,0x0<br> lea    rax,[rbp-0x50]<br> mov    rdi,rax<br> call   5c &lt;main+0x5c&gt;<br>...<br></code></pre></td></tr></table></figure><p>该软件的 <code>-library_functions</code> 参数完全删除了所有的库函数，并不是未使用的库函数，而且我发现在 Compiler Explorer 上可以选择 <code>binary</code> 选项，即为先编译到二进制对象文件再编译到汇编，还是直接使用源文件编译到汇编，而这个软件可能版本有些落后，且只能处理二进制文件。</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/m2dxt3m.png" alt="Compiler Explorer 的 binary 选项"></p><h3 id="回到源码"><a href="#回到源码" class="headerlink" title="回到源码"></a>回到源码</h3><p>再次回到 Compiler Explorer 的源码，找到了一个名为 <code>asm_parser.ts</code> 的文件，其中有大量的正则表达式，这个大概就是该平台目前实际上正在使用的过滤器。<strong>这也进一步印证了我的想法，过滤并不是 gcc 的参数，而是在编译后再过滤。</strong></p><p><img src="https://picture.zhanganzhi.com/2023/12/11/ylbpnta.png" alt="asm_parser.ts"></p><p>我将源码下载下来在本地运行，尝试查看是否会在控制台输出使用的命令，但是并没有。</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/qyoojki.png" alt="本地运行，但是控制台并没有日志输出"></p><h2 id="提取源码组合本地程序"><a href="#提取源码组合本地程序" class="headerlink" title="提取源码组合本地程序"></a>提取源码组合本地程序</h2><h3 id="提取过滤的-js-代码"><a href="#提取过滤的-js-代码" class="headerlink" title="提取过滤的 js 代码"></a>提取过滤的 js 代码</h3><p>于是我计划将过滤的 js 代码提取出来重新封装，这样就可以在本地运行了。</p><p>在上文提到的 <code>asm_parser.ts</code> 文件中，最后两个函数似乎是处理二进制和非二进制汇编的函数。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title function_">processBinaryAsm</span>(<span class="hljs-attr">asmResult</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">filters</span>: <span class="hljs-title class_">ParseFiltersAndOutputOptions</span>): <span class="hljs-title class_">ParsedAsmResult</span> &#123;<br>    ...<br>&#125;<br><br><span class="hljs-title function_">process</span>(<span class="hljs-params">asm: <span class="hljs-built_in">string</span>, filters: ParseFiltersAndOutputOptions</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">processAsm</span>(asm, filters);<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来就很简单了，打断点调试，查看方法参数：</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/s6jez8j.png" alt="断点调试"></p><p><code>asm</code> 是汇编的原文，<code>filter</code> 是个集合了过滤选项的对象。</p><p>根据这里的原文，知道了实际的编译参数是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -g -S -masm=intel -o - example.cpp &gt; example.asm<br></code></pre></td></tr></table></figure><p>添加了 <code>-g</code> 参数，这是为了在汇编代码中添加调试信息，我猜测 <code>c++filt</code> 会在之后使用。</p><p>我将 <code>asm_parser.ts</code> 和需要的其他文件提取出来，并写了一个主文件。</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/3e3l94o.png" alt="提取的主文件"></p><p>根据之前 C++ 版 asm-parser 的文档，过滤库函数是基于文件路径的，文件名必须是 <code>example.cpp</code> 才可以被保留，否则主文件会被当做库文件被过滤。源码中的这个正则展示了这一点：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">stdInLooking</span> = <span class="hljs-regexp">/&lt;stdin&gt;|^-$|example\.[^/]+$|&lt;source&gt;/</span>;<br></code></pre></td></tr></table></figure><h3 id="JSON-转纯文本"><a href="#JSON-转纯文本" class="headerlink" title="JSON 转纯文本"></a>JSON 转纯文本</h3><p>当前的输出还是 JSON 的格式，我希望转为纯文本，于是撰写了一个函数使其输出纯文本。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">resultToText</span>(<span class="hljs-params">r: ParsedAsmResult</span>) &#123;<br>  <span class="hljs-keyword">return</span> r.<span class="hljs-property">asm</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">line</span> =&gt;</span> line.<span class="hljs-property">text</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="c-filt"><a href="#c-filt" class="headerlink" title="c++filt"></a>c++filt</h3><p>再使用 <code>c++filt</code> 过滤 C++ 符号，就可以得到和 Compiler Explorer 几乎一样的结果了。</p><h3 id="符号后的描述"><a href="#符号后的描述" class="headerlink" title="符号后的描述"></a>符号后的描述</h3><p><img src="https://picture.zhanganzhi.com/2023/12/11/klyq497.png" alt="对比输出结果"></p><p>上图的对比可以看出，Compiler Explorer 的输出在调用函数后使用方括号补充了一段描述。再次阅读源码后，我将 <code>CppDemangler</code> 提取了出来。</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/a0hquni.png" alt="Compiler Explorer 使用这个类标注库函数"></p><p>至此，输出与 godbolt 上的输出完全一致。</p><h2 id="Typescript-版-asm-parser"><a href="#Typescript-版-asm-parser" class="headerlink" title="Typescript 版 asm-parser"></a>Typescript 版 asm-parser</h2><h3 id="完善命令行接口"><a href="#完善命令行接口" class="headerlink" title="完善命令行接口"></a>完善命令行接口</h3><p>最后做一些小修改，完善命令行接口，从 stdin 读取汇编代码，输出到 stdout。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">AsmParser</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./src/lib/asm-parser.js&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">BaseCompiler</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./src/lib/fake-base-compiler.js&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">CppDemangler</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./src/lib/demangler/cpp.js&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">ParsedAsmResult</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./src/types/asmresult/asmresult.interfaces.js&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;<br>  <span class="hljs-title class_">ParseFiltersAndOutputOptions</span><br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./src/types/features/filters.interfaces.js&quot;</span>;<br><br><span class="hljs-keyword">const</span> baseCompiler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseCompiler</span>();<br><span class="hljs-keyword">const</span> cppDemangler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CppDemangler</span>(<span class="hljs-string">&quot;c++filt&quot;</span>, baseCompiler);<br><span class="hljs-keyword">const</span> asmParser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsmParser</span>();<br><br><span class="hljs-keyword">const</span> args = process.<span class="hljs-property">argv</span>;<br><span class="hljs-keyword">const</span> outputTextFlag = args.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;--outputtext&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-attr">filters</span>: <span class="hljs-title class_">ParseFiltersAndOutputOptions</span> = &#123;<br>  <span class="hljs-attr">labels</span>: args.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;--unused_labels&quot;</span>),<br>  <span class="hljs-attr">libraryCode</span>: args.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;--library_code&quot;</span>),<br>  <span class="hljs-attr">directives</span>: args.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;--directives&quot;</span>),<br>  <span class="hljs-attr">commentOnly</span>: args.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;--comment_only&quot;</span>),<br>  <span class="hljs-attr">binary</span>: args.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;--binary&quot;</span>),<br>  <span class="hljs-attr">binaryObject</span>: args.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;--binary&quot;</span>)<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">resultToText</span>(<span class="hljs-params">r: ParsedAsmResult</span>) &#123;<br>  <span class="hljs-keyword">return</span> r.<span class="hljs-property">asm</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">line</span> =&gt;</span> line.<span class="hljs-property">text</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getInput</span>(<span class="hljs-params"></span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">string</span>&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) &#123;<br>    <span class="hljs-keyword">const</span> stdin = process.<span class="hljs-property">stdin</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">data</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br>    stdin.<span class="hljs-title function_">setEncoding</span>(<span class="hljs-string">&quot;utf8&quot;</span>);<br>    stdin.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">chunk</span>) &#123;<br>      data += chunk;<br>    &#125;);<br><br>    stdin.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;end&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">resolve</span>(data);<br>    &#125;);<br><br>    stdin.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;error&#x27;</span>, reject);<br>  &#125;);<br>&#125;<br><br><span class="hljs-title function_">getInput</span>().<span class="hljs-title function_">then</span>(<span class="hljs-keyword">async</span> (<span class="hljs-attr">input</span>: <span class="hljs-built_in">string</span>) =&gt; &#123;<br>  <span class="hljs-comment">// parse</span><br>  <span class="hljs-keyword">let</span> result = asmParser.<span class="hljs-title function_">process</span>(input, filters);<br><br>  <span class="hljs-comment">// demangle</span><br>  result = <span class="hljs-keyword">await</span> cppDemangler.<span class="hljs-title function_">process</span>(result);<br><br>  <span class="hljs-comment">// print</span><br>  <span class="hljs-keyword">if</span> (outputTextFlag) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">resultToText</span>(result));<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(result, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span>));<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -g -S -masm=intel -o - example.cpp | ts-node-esm index.ts --unused_labels --library_code --directives --comment_only  --outputtext &gt; example.asm<br></code></pre></td></tr></table></figure><p>再测试，在同一台机器上，输出结果完全一致。</p><p>然后再使用 <a href="https://github.com/vercel/pkg">https://github.com/vercel/pkg</a> 将 ts 编译为二进制文件，这个工具可以同时编译到三个平台。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">tsc index.ts --target esnext --module nodenext --skipLibCheck --outDir dist<br>rollup dist/index.js --file dist/bundle.js --format cjs<span class="hljs-string">&quot;,</span><br><span class="hljs-string">pkg dist/bundle.js --out-path dist</span><br></code></pre></td></tr></table></figure><p>我将这个项目开源在了 GitHub 上，欢迎大家使用和提出建议：<a href="https://github.com/AnzhiZhang/asm-parser">https://github.com/AnzhiZhang/asm-parser</a></p><p>至此，完整的编译命令是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -g -S -masm=intel -o - example.cpp | asm-parser-win --unused_labels --library_code --directives --comment_only --outputtext &gt; example.asm<br></code></pre></td></tr></table></figure><h3 id="源码对应关系和上色"><a href="#源码对应关系和上色" class="headerlink" title="源码对应关系和上色"></a>源码对应关系和上色</h3><p>还有最后一个小问题，Compiler Explorer 上的汇编代码是有上色的，用于标记和源码的对应关系，而我们的没有。查看接口的返回数据，可以发现前端收到的是 JSON 格式的，每一行都有对应源码的行号，这个功能是前端实现的。</p><p><img src="https://picture.zhanganzhi.com/2023/12/11/g4872u6.png" alt="Compiler Explorer 的行数对应关系"></p><p>只需要在使用 <code>asm-parser</code> 时移除 <code>--outputtext</code> 参数，就可以得到带有源码行数对应关系的数据了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -g -S -masm=intel -o - example.cpp | asm-parser-win --unused_labels --library_code --directives --comment_only &gt; example.asm<br></code></pre></td></tr></table></figure><h2 id="其他平台"><a href="#其他平台" class="headerlink" title="其他平台"></a>其他平台</h2><p>我们还希望在 armv8 和 riscv 平台上获得过滤的汇编代码，下文简短介绍了实现方式。</p><p>为方便演示，我仅用以下代码示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>    c = a + b;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了方便交叉编译，我们使用 <code>clang</code>，添加 <code>-target &lt;triple&gt;</code> 即可指定目标平台<sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Cross-compilation using Clang — Clang 18.0.0git documentation](https://clang.llvm.org/docs/CrossCompilation.html#target-triple). [Archived](https://web.archive.org/web/20231211182735/https://clang.llvm.org/docs/CrossCompilation.html#target-triple) on 2023-12-11. Retrieved 2023-12-11.">[8]</span></a></sup>：</p><blockquote><p>The triple has the general format <code>&lt;arch&gt;&lt;sub&gt;-&lt;vendor&gt;-&lt;sys&gt;-&lt;env&gt;</code>, where:</p><ul><li><code>arch</code> &#x3D; <code>x86_64</code>, <code>i386</code>, <code>arm</code>, <code>thumb</code>, <code>mips</code>, etc.</li><li><code>sub</code> &#x3D; for ex. on ARM: <code>v5</code>, <code>v6m</code>, <code>v7a</code>, <code>v7m</code>, etc.</li><li><code>vendor</code> &#x3D; <code>pc</code>, <code>apple</code>, <code>nvidia</code>, <code>ibm</code>, etc.</li><li><code>sys</code> &#x3D; <code>none</code>, <code>linux</code>, <code>win32</code>, <code>darwin</code>, <code>cuda</code>, etc.</li><li><code>env</code> &#x3D; <code>eabi</code>, <code>gnu</code>, <code>android</code>, <code>macho</code>, <code>elf</code>, etc.</li></ul></blockquote><h3 id="armv8"><a href="#armv8" class="headerlink" title="armv8"></a>armv8</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang -g -S -o - -target aarch64-pc-linux-gnu example.cpp | asm-parser-win --unused_labels --library_code --directives --comment_only --outputtext<br></code></pre></td></tr></table></figure><p>编译结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs assembly">main:                                   // @main<br>        sub     sp, sp, #16<br>        mov     w0, wzr<br>        str     wzr, [sp, #12]<br>        ldr     w8, [sp, #8]<br>        ldr     w9, [sp, #4]<br>        add     w8, w8, w9<br>        str     w8, [sp]<br>        add     sp, sp, #16<br>        ret<br></code></pre></td></tr></table></figure><p><img src="https://picture.zhanganzhi.com/2023/12/11/ie2wr3i.png" alt="Compiler Explorer 编译的 armv8 结果"></p><h3 id="riscv"><a href="#riscv" class="headerlink" title="riscv"></a>riscv</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang -g -S -o - -target riscv64-unknown-linux-gnu example.cpp | asm-parser-win --unused_labels --library_code --directives --comment_only --outputtext<br></code></pre></td></tr></table></figure><p>编译结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs assembly">main:                                   # @main<br>        addi    sp, sp, -32<br>        sd      ra, 24(sp)                      # 8-byte Folded Spill<br>        sd      s0, 16(sp)                      # 8-byte Folded Spill<br>        addi    s0, sp, 32<br>        li      a0, 0<br>        sw      a0, -20(s0)<br>        lw      a1, -24(s0)<br>        lw      a2, -28(s0)<br>        addw    a1, a1, a2<br>        sw      a1, -32(s0)<br>        ld      ra, 24(sp)                      # 8-byte Folded Reload<br>        ld      s0, 16(sp)                      # 8-byte Folded Reload<br>        addi    sp, sp, 32<br>        ret<br></code></pre></td></tr></table></figure><p><img src="https://picture.zhanganzhi.com/2023/12/11/w99hp8l.png" alt="Compiler Explorer 编译的 riscv 结果"></p><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>阮一峰. <a href="https://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html">汇编语言入门教程 - 阮一峰的网络日志</a>. 2018-01-21. <a href="https://web.archive.org/web/20231211131556/https://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html">Archived</a> on 2023-12-11. Retrieved 2023-12-11.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>Antoine Pelisse. <a href="https://stackoverflow.com/questions/4779336/does-c-compile-to-assembly/4779372#4779372">Does C++ compile to assembly?</a>. 2011-01-24. <a href="https://web.archive.org/web/20231211153914/https://stackoverflow.com/questions/4779336/does-c-compile-to-assembly/4779372#4779372">Archived</a> on 2023-12-11. Retrieved 2023-12-11.<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>Andrew Edgecombe. <a href="https://stackoverflow.com/questions/137038/how-do-you-get-assembler-output-from-c-c-source-in-gcc/137074#137074">How do you get assembler output from C&#x2F;C++ source in GCC?</a>. 2008-09-26. <a href="https://web.archive.org/web/20231211153931/https://stackoverflow.com/questions/137038/how-do-you-get-assembler-output-from-c-c-source-in-gcc/137074#137074">Archived</a> on 2023-12-11. Retrieved 2023-12-11.<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>David Wohlferd. <a href="https://stackoverflow.com/questions/20819927/what-are-seh-assembly-commands-that-gcc-outputs/38181874#38181874">What are .seh_* assembly commands that gcc outputs?</a>. 2016-07-04. <a href="https://web.archive.org/web/20231211160356/https://stackoverflow.com/questions/20819927/what-are-seh-assembly-commands-that-gcc-outputs/38181874#38181874">Archived</a> on 2023-12-11. Retrieved 2023-12-11.<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://stackoverflow.com/questions/20819927/what-are-seh-assembly-commands-that-gcc-outputs/38181874#38181874">Code Gen Options (Using the GNU Compiler Collection (GCC))</a>. <a href="https://web.archive.org/web/20231211161014/https://gcc.gnu.org/onlinedocs/gcc/Code-Gen-Options.html">Archived</a> on 2023-12-11. Retrieved 2023-12-11.<a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span>Peter Cordes. <a href="https://stackoverflow.com/questions/56245402/step-into-standard-library-call-with-godbolt/56246283#56246283">Step into standard library call with godbolt</a>. 2019-05-21. <a href="https://web.archive.org/web/20231211162509/https://stackoverflow.com/questions/56245402/step-into-standard-library-call-with-godbolt/56246283#56246283">Archived</a> on 2023-12-11. Retrieved 2023-12-11.<a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span>Peter Cordes. <a href="https://stackoverflow.com/questions/38552116/how-to-remove-noise-from-gcc-clang-assembly-output/38552509#38552509">How to remove “noise” from GCC&#x2F;clang assembly output?</a>. 2016-01-24. <a href="https://web.archive.org/web/20231211162508/https://stackoverflow.com/questions/38552116/how-to-remove-noise-from-gcc-clang-assembly-output/38552509#38552509">Archived</a> on 2023-12-11. Retrieved 2023-12-11.<a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span><a href="https://clang.llvm.org/docs/CrossCompilation.html#target-triple">Cross-compilation using Clang — Clang 18.0.0git documentation</a>. <a href="https://web.archive.org/web/20231211182735/https://clang.llvm.org/docs/CrossCompilation.html#target-triple">Archived</a> on 2023-12-11. Retrieved 2023-12-11.<a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学术</category>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>汇编</tag>
      
      <tag>Compiler Explorer</tag>
      
      <tag>编译器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>下载 PDF.js 禁止下载的文件</title>
    <link href="/zh-CN/2023/08/6946cd043888/"/>
    <url>/zh-CN/2023/08/6946cd043888/</url>
    
    <content type="html"><![CDATA[<blockquote><p>部分使用 PDF.js 提供 PDF 预览的网站会禁止下载文件，本文介绍了如何绕过限制，下载这些文件。</p></blockquote><span id="more"></span><h2 id="PDF-js-简介"><a href="#PDF-js-简介" class="headerlink" title="PDF.js 简介"></a>PDF.js 简介</h2><p>PDF.js 是一个通用的、基于 Web 标准的平台，用于解析和呈现 PDF<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[pdf.js禁用打开打印下载功能](https://cloud.tencent.com/developer/article/1549679?from=15425). 似水的流年. 2019-12-05 [2023-08-17]. （原始内容[存档](https://web.archive.org/web/20230818123734/https://cloud.tencent.com/developer/article/1549679?from=15425)于2023-08-18）.">[1]</span></a></sup>。</p><h2 id="禁用的原理"><a href="#禁用的原理" class="headerlink" title="禁用的原理"></a>禁用的原理</h2><p>禁用主要是依赖以下几个魔改，部分网站可能只有其中之一或几个：</p><ol><li>禁用右键菜单</li><li>隐藏下载按钮</li><li>移除 PDF.js eventBus 的 openfile, save 和 print 事件</li><li>移除 PDF.js 相关下载和打印的方法，避免从 Console 调用</li></ol><p>更多的详细信息可以参考 《<a href="https://cloud.tencent.com/developer/article/1549679?from=15425">pdf.js禁用打开打印下载功能</a>》[^2]</p><p><img src="https://picture.zhanganzhi.com/2023/08/18/uadnbjh.png" alt="没有下载按钮，保存和打印的快捷键和右键也无效"></p><h2 id="研究过程"><a href="#研究过程" class="headerlink" title="研究过程"></a>研究过程</h2><p>阅读 Sources，发现确实使用了文章中的类似方法，搜索 <code>download</code> 可以找到多处被注释的内容。</p><p><img src="https://picture.zhanganzhi.com/2023/08/18/e3ns35c.png" alt="被隐藏的相关方法"></p><p>在了解了原理后，解决就很简单了，某知名人士说过：</p><blockquote><p>给用户看的数据一定可以被保存下来，即使是用手机拍屏幕。</p></blockquote><p>首先我在 Console 中找到了 <code>PDFViewerApplication</code> 对象，确认确实没有 downlaod 方法。<strong>需要注意这个网站的 <code>PDFViewerApplication</code> 在 <code>this[0]</code> 中，但不同网站可能有所区别，下文的代码实际使用时也要注意修改。</strong></p><p><img src="https://picture.zhanganzhi.com/2023/08/18/eyi55v2.png" alt="下载方法也被注释了"></p><p>由于浏览器里阅读实在麻烦，于是我下载了一份 PDF.js 源码，在 <code>/web/viewer.js</code> 中找到了核心的两段代码：</p><p>第一段是 <code>PDFViewerApplication</code> 的 <code>download</code> 方法，获取了文件的 blob 然后调用了 <code>downloadManager</code> 的 <code>download</code> 方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">PDFViewerApplication</span> = &#123;<br>  <span class="hljs-comment">/** 已省略 */</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">options = &#123;&#125;</span>) &#123;<br>    <span class="hljs-keyword">const</span> url = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_downloadUrl</span>,<br>      filename = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_docFilename</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_ensureDownloadComplete</span>();<br>      <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">pdfDocument</span>.<span class="hljs-title function_">getData</span>();<br>      <span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([data], &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;application/pdf&quot;</span><br>      &#125;);<br>      <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">downloadManager</span>.<span class="hljs-title function_">download</span>(blob, url, filename, options);<br>    &#125; <span class="hljs-keyword">catch</span> &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">downloadManager</span>.<span class="hljs-title function_">downloadUrl</span>(url, filename, options);<br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">/** 已省略 */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>第二段是一个 <code>download</code> 方法和 <code>DownloadManager</code> 类，这个类的 <code>download</code> 方法会调用这个独立的 <code>download</code> 方法，随后创建一个 <code>a</code> 标签，然后调用 <code>a.click()</code> 方法，实现下载。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">blobUrl, filename</span>) &#123;<br>  <span class="hljs-keyword">const</span> a = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>  <span class="hljs-keyword">if</span> (!a.<span class="hljs-property">click</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;DownloadManager: &quot;a.click()&quot; is not supported.&#x27;</span>);<br>  &#125;<br>  a.<span class="hljs-property">href</span> = blobUrl;<br>  a.<span class="hljs-property">target</span> = <span class="hljs-string">&quot;_parent&quot;</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;download&quot;</span> <span class="hljs-keyword">in</span> a) &#123;<br>    a.<span class="hljs-property">download</span> = filename;<br>  &#125;<br>  (<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span> || <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>).<span class="hljs-title function_">append</span>(a);<br>  a.<span class="hljs-title function_">click</span>();<br>  a.<span class="hljs-title function_">remove</span>();<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadManager</span> &#123;<br>  #openBlobUrls = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>();<br>  <span class="hljs-title function_">downloadUrl</span>(<span class="hljs-params">url, filename, _options</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!(<span class="hljs-number">0</span>, _pdfjsLib.<span class="hljs-property">createValidAbsoluteUrl</span>)(url, <span class="hljs-string">&quot;http://example.com&quot;</span>)) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`downloadUrl - not a valid URL: <span class="hljs-subst">$&#123;url&#125;</span>`</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-title function_">download</span>(url + <span class="hljs-string">&quot;#pdfjs.action=download&quot;</span>, filename);<br>  &#125;<br>  <span class="hljs-title function_">downloadData</span>(<span class="hljs-params">data, filename, contentType</span>) &#123;<br>    <span class="hljs-keyword">const</span> blobUrl = <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([data], &#123;<br>      <span class="hljs-attr">type</span>: contentType<br>    &#125;));<br>    <span class="hljs-title function_">download</span>(blobUrl, filename);<br>  &#125;<br>  <span class="hljs-title function_">openOrDownloadData</span>(<span class="hljs-params">element, data, filename</span>) &#123;<br>    <span class="hljs-keyword">const</span> isPdfData = (<span class="hljs-number">0</span>, _pdfjsLib.<span class="hljs-property">isPdfFile</span>)(filename);<br>    <span class="hljs-keyword">const</span> contentType = isPdfData ? <span class="hljs-string">&quot;application/pdf&quot;</span> : <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span> (isPdfData) &#123;<br>      <span class="hljs-keyword">let</span> blobUrl = <span class="hljs-variable language_">this</span>.#openBlobUrls.<span class="hljs-title function_">get</span>(element);<br>      <span class="hljs-keyword">if</span> (!blobUrl) &#123;<br>        blobUrl = <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([data], &#123;<br>          <span class="hljs-attr">type</span>: contentType<br>        &#125;));<br>        <span class="hljs-variable language_">this</span>.#openBlobUrls.<span class="hljs-title function_">set</span>(element, blobUrl);<br>      &#125;<br>      <span class="hljs-keyword">let</span> viewerUrl;<br>      viewerUrl = <span class="hljs-string">&quot;?file=&quot;</span> + <span class="hljs-built_in">encodeURIComponent</span>(blobUrl + <span class="hljs-string">&quot;#&quot;</span> + filename);<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(viewerUrl);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125; <span class="hljs-keyword">catch</span> (ex) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`openOrDownloadData: <span class="hljs-subst">$&#123;ex&#125;</span>`</span>);<br>        <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">revokeObjectURL</span>(blobUrl);<br>        <span class="hljs-variable language_">this</span>.#openBlobUrls.<span class="hljs-title function_">delete</span>(element);<br>      &#125;<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">downloadData</span>(data, filename, contentType);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-title function_">download</span>(<span class="hljs-params">blob, url, filename, _options</span>) &#123;<br>    <span class="hljs-keyword">const</span> blobUrl = <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(blob);<br>    <span class="hljs-title function_">download</span>(blobUrl, filename);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>于是，我们可以将这个独立的 <code>download</code> 方法取出来，加上 <code>PDFViewerApplication.pdfDocument.getData()</code>，生成 blob 并下载即可。将下面这段粘贴到 Console 中，即可下载。<strong>请注意 <code>this[0].PDFViewerApplication</code></strong> 可能需要修改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">blobUrl, filename</span>) &#123;<br>  <span class="hljs-keyword">const</span> a = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>  <span class="hljs-keyword">if</span> (!a.<span class="hljs-property">click</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;DownloadManager: &quot;a.click()&quot; is not supported.&#x27;</span>);<br>  &#125;<br>  a.<span class="hljs-property">href</span> = blobUrl;<br>  a.<span class="hljs-property">target</span> = <span class="hljs-string">&quot;_parent&quot;</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;download&quot;</span> <span class="hljs-keyword">in</span> a) &#123;<br>    a.<span class="hljs-property">download</span> = filename;<br>  &#125;<br>  (<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span> || <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>).<span class="hljs-title function_">append</span>(a);<br>  a.<span class="hljs-title function_">click</span>();<br>  a.<span class="hljs-title function_">remove</span>();<br>&#125;<br><br><span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>[<span class="hljs-number">0</span>].<span class="hljs-property">PDFViewerApplication</span>.<span class="hljs-property">pdfDocument</span>.<span class="hljs-title function_">getData</span>();<br><span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([data], &#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;application/pdf&quot;</span><br>&#125;);<br><span class="hljs-keyword">const</span> blobUrl = <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(blob);<br><span class="hljs-keyword">const</span> filename = <span class="hljs-variable language_">this</span>[<span class="hljs-number">0</span>].<span class="hljs-property">PDFViewerApplication</span>.<span class="hljs-property">contentDispositionFilename</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(blobUrl);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(filename)<br><span class="hljs-title function_">download</span>(blobUrl, filename);<br></code></pre></td></tr></table></figure><p><img src="https://picture.zhanganzhi.com/2023/08/18/kqz47lw.png" alt="成功获取 blob 并下载"></p><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://mozilla.github.io/pdf.js/">PDF.js</a>. Mozilla and individual contributors. [2023-08-17].<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:1" class="footnote-text"><span><a href="https://cloud.tencent.com/developer/article/1549679?from=15425">pdf.js禁用打开打印下载功能</a>. 似水的流年. 2019-12-05 [2023-08-17]. （原始内容<a href="https://web.archive.org/web/20230818123734/https://cloud.tencent.com/developer/article/1549679?from=15425">存档</a>于2023-08-18）.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>逆向工程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>逆向工程</tag>
      
      <tag>PDF.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Security 自定义 @Anonymous 和 @HasRole 注解</title>
    <link href="/zh-CN/2023/08/f2d4df6ce0b9/"/>
    <url>/zh-CN/2023/08/f2d4df6ce0b9/</url>
    
    <content type="html"><![CDATA[<blockquote><p>使用 SpringSecurity 时，不同接口的鉴权较为麻烦，本文实现了 @Anonymous 和 @HasRole 注解，使得鉴权更加简单。</p></blockquote><span id="more"></span><h2 id="编写注解"><a href="#编写注解" class="headerlink" title="编写注解"></a>编写注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Anonymous &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> HasRole &#123;<br>    Role <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编写-AnonymousAuthenticationToken-和工具类"><a href="#编写-AnonymousAuthenticationToken-和工具类" class="headerlink" title="编写 AnonymousAuthenticationToken 和工具类"></a>编写 AnonymousAuthenticationToken 和工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnonymousAuthenticationToken</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PreAuthenticatedAuthenticationToken</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AnonymousAuthenticationToken</span><span class="hljs-params">(Object aPrincipal, Object aCredentials, Collection&lt;? extends GrantedAuthority&gt; anAuthorities)</span> &#123;<br>        <span class="hljs-built_in">super</span>(aPrincipal, aCredentials, anAuthorities);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<br><span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityUtils</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Get authentication.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> authentication.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Authentication <span class="hljs-title function_">getAuthentication</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> SecurityContextHolder.getContext().getAuthentication();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Get principal.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> principal.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getPrincipal</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> getAuthentication();<br>        <span class="hljs-keyword">return</span> authentication == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : authentication.getPrincipal();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Get current account.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> current account.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Account <span class="hljs-title function_">getCurrentAccount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isAuthenticated()) &#123;<br>            <span class="hljs-keyword">return</span> (Account) getPrincipal();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Current principal is not an account&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Set authentication.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> authentication authentication.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAuthentication</span><span class="hljs-params">(Authentication authentication)</span> &#123;<br>        SecurityContextHolder.getContext().setAuthentication(authentication);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编写-Filter"><a href="#编写-Filter" class="headerlink" title="编写 Filter"></a>编写 Filter</h2><p>导入请自行补全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.function.Function;<br><br><span class="hljs-keyword">import</span> jakarta.servlet.FilterChain;<br><span class="hljs-keyword">import</span> jakarta.servlet.ServletException;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> lombok.RequiredArgsConstructor;<br><span class="hljs-keyword">import</span> org.springframework.lang.NonNull;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.security.core.authority.AuthorityUtils;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.WebAuthenticationDetailsSource;<br><span class="hljs-keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;<br><span class="hljs-keyword">import</span> org.springframework.web.method.HandlerMethod;<br><br><span class="hljs-keyword">import</span> **.Anonymous;<br><span class="hljs-keyword">import</span> **.SecurityUtils;<br><span class="hljs-keyword">import</span> **.AnonymousAuthenticationToken;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnonymousFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OncePerRequestFilter</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Function&lt;HttpServletRequest, HandlerMethod&gt; handlerMethodGetter;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@NonNull</span> HttpServletRequest request,</span><br><span class="hljs-params">            <span class="hljs-meta">@NonNull</span> HttpServletResponse response,</span><br><span class="hljs-params">            <span class="hljs-meta">@NonNull</span> FilterChain filterChain</span><br><span class="hljs-params">    )</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-keyword">if</span> (SecurityUtils.getAuthentication() == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// get the handler method</span><br>            <span class="hljs-type">HandlerMethod</span> <span class="hljs-variable">handlerMethod</span> <span class="hljs-operator">=</span> handlerMethodGetter.apply(request);<br><br>            <span class="hljs-keyword">if</span> (handlerMethod != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">Anonymous</span> <span class="hljs-variable">anonymous</span> <span class="hljs-operator">=</span> handlerMethod.getMethodAnnotation(Anonymous.class);<br>                <span class="hljs-keyword">if</span> (anonymous != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-type">AnonymousAuthenticationToken</span> <span class="hljs-variable">authToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnonymousAuthenticationToken</span>(<br>                            <span class="hljs-string">&quot;anonymousUser&quot;</span>,<br>                            <span class="hljs-string">&quot;&quot;</span>,<br>                            AuthorityUtils.createAuthorityList(<span class="hljs-string">&quot;ROLE_ANONYMOUS&quot;</span>)<br>                    );<br>                    authToken.setDetails(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebAuthenticationDetailsSource</span>().buildDetails(request));<br>                    SecurityUtils.setAuthentication(authToken);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// continue to other filters</span><br>        filterChain.doFilter(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Account 为用户类，需要自行编写 hasRole 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.function.Function;<br><br><span class="hljs-keyword">import</span> jakarta.servlet.FilterChain;<br><span class="hljs-keyword">import</span> jakarta.servlet.ServletException;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> lombok.RequiredArgsConstructor;<br><span class="hljs-keyword">import</span> org.springframework.lang.NonNull;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.security.access.AccessDeniedException;<br><span class="hljs-keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;<br><span class="hljs-keyword">import</span> org.springframework.web.method.HandlerMethod;<br><br><span class="hljs-keyword">import</span> **.HasRole;<br><span class="hljs-keyword">import</span> **.Account;<br><span class="hljs-keyword">import</span> **.SecurityUtils;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HasRoleFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OncePerRequestFilter</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Function&lt;HttpServletRequest, HandlerMethod&gt; handlerMethodGetter;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@NonNull</span> HttpServletRequest request,</span><br><span class="hljs-params">            <span class="hljs-meta">@NonNull</span> HttpServletResponse response,</span><br><span class="hljs-params">            <span class="hljs-meta">@NonNull</span> FilterChain filterChain</span><br><span class="hljs-params">    )</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-keyword">if</span> (SecurityUtils.isAuthenticated()) &#123;<br>            <span class="hljs-comment">// get the handler method</span><br>            <span class="hljs-type">HandlerMethod</span> <span class="hljs-variable">handlerMethod</span> <span class="hljs-operator">=</span> handlerMethodGetter.apply(request);<br><br>            <span class="hljs-keyword">if</span> (handlerMethod != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> SecurityUtils.getCurrentAccount();<br>                <span class="hljs-type">HasRole</span> <span class="hljs-variable">hasRole</span> <span class="hljs-operator">=</span> handlerMethod.getMethodAnnotation(HasRole.class);<br><br>                <span class="hljs-comment">// the ordinal of the required role must be greater than or equal to the ordinal of the current role</span><br>                <span class="hljs-keyword">if</span> (hasRole != <span class="hljs-literal">null</span> &amp;&amp; !account.hasRole(hasRole.value())) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccessDeniedException</span>(<span class="hljs-string">&quot;Does not match the required role&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// continue to other filters</span><br>        filterChain.doFilter(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="添加到-SecurityConfig"><a href="#添加到-SecurityConfig" class="headerlink" title="添加到 SecurityConfig"></a>添加到 SecurityConfig</h2><p>只写了 filter 的部分，其他部分请视情况自行合并。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">import</span> lombok.RequiredArgsConstructor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configurers.CsrfConfigurer;<br><span class="hljs-keyword">import</span> org.springframework.security.web.SecurityFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.security.web.access.ExceptionTranslationFilter;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;<br><br><span class="hljs-keyword">import</span> **.filters.*;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-meta">@EnableMethodSecurity</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AnonymousFilter anonymousFilter;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SecurityJwtFilter securityJwtFilter;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> HasRoleFilter hasRoleFilter;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http<br>                .addFilterBefore(anonymousFilter, UsernamePasswordAuthenticationFilter.class)<br>                .addFilterBefore(securityJwtFilter, UsernamePasswordAuthenticationFilter.class)<br>                .addFilterAfter(hasRoleFilter, ExceptionTranslationFilter.class);<br><br>        <span class="hljs-keyword">return</span> http.build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>软件开发</category>
      
      <category>后端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Spring Boot</tag>
      
      <tag>Spring Security</tag>
      
      <tag>Java</tag>
      
      <tag>注解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决 WebStorm 开发 uni-app 时 rpx 单位不识别问题</title>
    <link href="/zh-CN/2023/07/9b33bad6bb1d/"/>
    <url>/zh-CN/2023/07/9b33bad6bb1d/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>WebStorm 开发 uni-app 时，rpx 单位不识别，且无法正常格式化。</p><span id="more"></span><p><img src="https://picture.zhanganzhi.com/2023/07/25/43fup1w.png" alt="不识别 rpx 单位"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>查阅资料推荐安装这两个插件，但都不好用或更新不及时导致不支持。</p><p><img src="https://picture.zhanganzhi.com/2023/07/25/vikukwx.png" alt="第一个没用，第二个更新较慢"></p><p>最终方案：安装 <a href="https://plugins.jetbrains.com/plugin/21470-uniapp-tool">Uniapp Tool</a>，问题解决。</p><p><img src="https://picture.zhanganzhi.com/2023/07/25/5xsnxd3.png" alt="安装 Uniapp Tool"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>软件开发</category>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebStorm</tag>
      
      <tag>微信小程序</tag>
      
      <tag>uni-app</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Security customizing status code, and prevent other codes overridden by 403</title>
    <link href="/en/2023/07/d7099ff451fa/"/>
    <url>/en/2023/07/d7099ff451fa/</url>
    
    <content type="html"><![CDATA[<!-- markdownlint-disable-file MD033 --><blockquote><p>The Spring Security will override all errors like 400, 405, and 500 to 403, and we may want to use 401 for unauthorized requests. This article will solve this problem by customizing an AuthenticationEntryPoint.</p></blockquote><span id="more"></span><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><ul><li>I folled this video to setup Spring Security and JWT authorization:</li></ul><div style="width=100%; padding-top: 56.25%; position: relative;"><iframe style="top:0; bottom:0; left:0; right:0; position: absolute;" width="100%" height="100%" src="https://www.youtube.com/embed/KxqlJblhzfI" title="Spring Boot 3 + Spring Security 6 - JWT Authentication and Authorisation [NEW] [2023]" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe></div><ul><li>Also referred to this answer: <a href="https://stackoverflow.com/a/47507342/19420247">https://stackoverflow.com/a/47507342/19420247</a></li><li>Based on the above, due to the version updating may make some changes, please note that the article time is not too old</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>Add <code>exceptionHandling</code> to <code>SecurityFilterChain</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.RequiredArgsConstructor;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.web.SecurityFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.HttpStatusEntryPoint;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-meta">@EnableMethodSecurity</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http<br>                .exceptionHandling(<br>                        exceptionHandling -&gt; exceptionHandling<br>                                .accessDeniedHandler(<br>                                        (request, response, accessDeniedException) -&gt; response<br>                                                .sendError(HttpStatus.UNAUTHORIZED.value())<br>                                )<br>                                .authenticationEntryPoint(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpStatusEntryPoint</span>(HttpStatus.UNAUTHORIZED))<br>        <span class="hljs-keyword">return</span> http.build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>软件开发</category>
      
      <category>后端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Spring Boot</tag>
      
      <tag>Spring Security</tag>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Security 自定义状态码，防止正常状态码被 403 覆盖</title>
    <link href="/zh-CN/2023/07/2d4f8ccace6c/"/>
    <url>/zh-CN/2023/07/2d4f8ccace6c/</url>
    
    <content type="html"><![CDATA[<!-- markdownlint-disable-file MD033 --><blockquote><p>在项目中加入 Spring Security 后，它会将所有的错误状态码覆盖为 403，例如 400, 405 和 500，我们也可能需要将 403 改为 401 作为未登录的状态码。本文将介绍如何自定义 AuthenticationEntryPoint 以解决此问题。</p></blockquote><span id="more"></span><h2 id="背景情况"><a href="#背景情况" class="headerlink" title="背景情况"></a>背景情况</h2><ul><li>我根据这个视频配置了基础的 Spring Security 和 JWT 鉴权：</li></ul><div style="width=90%; padding-top: 56.25%; position: relative;"><iframe style="top:0; bottom:0; left:0; right:0; position: absolute;" width="100%" height="100%" src="https://www.youtube.com/embed/KxqlJblhzfI" title="Spring Boot 3 + Spring Security 6 - JWT Authentication and Authorisation [NEW] [2023]" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe></div><ul><li>并且参考了此回答：<a href="https://stackoverflow.com/a/47507342/19420247">https://stackoverflow.com/a/47507342/19420247</a></li><li>在以上的基础上，由于版本更新，所以作了一些修改，请注意文章时间是否过旧。</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>将 <code>exceptionHandling</code> 添加到 <code>SecurityFilterChain</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.RequiredArgsConstructor;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.web.SecurityFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.HttpStatusEntryPoint;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-meta">@EnableMethodSecurity</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http<br>                .exceptionHandling(<br>                        exceptionHandling -&gt; exceptionHandling<br>                                .accessDeniedHandler(<br>                                        (request, response, accessDeniedException) -&gt; response<br>                                                .sendError(HttpStatus.UNAUTHORIZED.value())<br>                                )<br>                                .authenticationEntryPoint(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpStatusEntryPoint</span>(HttpStatus.UNAUTHORIZED))<br>        <span class="hljs-keyword">return</span> http.build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>软件开发</category>
      
      <category>后端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Spring Boot</tag>
      
      <tag>Spring Security</tag>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Element UI 通用图片骨架屏组件</title>
    <link href="/zh-CN/2022/11/92e7bb97253e/"/>
    <url>/zh-CN/2022/11/92e7bb97253e/</url>
    
    <content type="html"><![CDATA[<!-- markdownlint-disable-file MD033 --><blockquote><p>近年来，骨架屏（Skeleton）逐渐成为一种流行的加载动画，其显著增强了用户等待过程中的体验。本文实现了 Vue.js + Element UI 的通用图片骨架屏组件。</p></blockquote><span id="more"></span><p>感谢 <a href="https://space.bilibili.com/1568294">@小灰灰</a> 在研究过程中提供的帮助和创新，编写了组件的部分内容，作了大量重要的工作。</p><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><video width="100%" controls>  <source src="https://picture.zhanganzhi.com/2022/11/16/0dclfq9.mp4"></video><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-skeleton</span></span><br><span class="hljs-tag">    <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;root&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">animated</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:loading</span>=<span class="hljs-string">&quot;loading&quot;</span></span><br><span class="hljs-tag">  &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">template</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-skeleton-item</span></span><br><span class="hljs-tag">        <span class="hljs-attr">:id</span>=<span class="hljs-string">&quot;idName&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;className&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;height: heightValue&#125;&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">variant</span>=<span class="hljs-string">&quot;image&quot;</span></span><br><span class="hljs-tag">      /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">&quot;idName&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;className&quot;</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">:alt</span>=<span class="hljs-string">&quot;alt&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">el-skeleton</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;BaseLoadingImage&quot;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">props</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">className</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">required</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">idName</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">required</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">src</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">alt</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">required</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">height</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">required</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">loading</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">heightValue</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">height</span> === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&quot;200px&quot;</span> : <span class="hljs-variable language_">this</span>.<span class="hljs-property">height</span>,</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">height</span> === <span class="hljs-literal">undefined</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">heightValue</span> = (<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">root</span>.<span class="hljs-property">$el</span>.<span class="hljs-property">clientWidth</span> / <span class="hljs-number">16</span> * <span class="hljs-number">9</span>) + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> img = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();</span><br><span class="language-javascript">    img.<span class="hljs-property">onload</span> = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">loading</span> = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">    img.<span class="hljs-property">src</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">src</span>;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用时只需传递相应参数即可:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">loading-image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;src.webp&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">loading-image</span>&gt;</span><br></code></pre></td></tr></table></figure><p>若需要修改图片的样式，只需传递 <code>class</code> 或 <code>id</code> 从外部使用 <code>v-deep</code> 设置 css 即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">loading-image</span> <span class="hljs-attr">class-name</span>=<span class="hljs-string">&quot;class-1&quot;</span> <span class="hljs-attr">id-name</span>=<span class="hljs-string">&quot;id-1&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;src.webp&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">loading-image</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">::v-deep .class-<span class="hljs-number">1</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><br>::v-deep #id-<span class="hljs-number">1</span> &#123;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">1rem</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h2><p>该组件主要由两大功能组成，一是加载图片并切换骨架屏显示，二是智能高度调整。</p><h3 id="加载功能"><a href="#加载功能" class="headerlink" title="加载功能"></a>加载功能</h3><p>由于默认 <code>loading</code> 为 <code>true</code>，所以 <code>&lt;img&gt;</code> 并不会显示，浏览器也不会请求图片资源。我们在 <code>mounted</code> 时使用 js 请求图片资源。当图片加载完成后，将 <code>loading</code> 设置为 <code>false</code> 且更新 <code>&lt;img&gt;</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> img = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();<br>img.<span class="hljs-property">onload</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">loading</span> = <span class="hljs-literal">false</span>;<br>&#125;;<br>img.<span class="hljs-property">src</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">src</span>;<br></code></pre></td></tr></table></figure><h3 id="智能高度调整"><a href="#智能高度调整" class="headerlink" title="智能高度调整"></a>智能高度调整</h3><p>骨架的高度遵循以下规则：</p><ol><li>若传递了高度参数，使用参数设置高度；</li><li><code>mounte</code> 之前使用 <code>200px</code> 作为默认高度；</li><li><code>mounte</code> 之后获取宽度，以 <code>16:9</code> 计算默认高度。</li></ol><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://element.eleme.io/#/zh-CN/component/skeleton">Skeleton 骨架屏</a>. Element. [2022-11-16]. （原始内容<a href="http://web.archive.org/web/20221116204140/https://element.eleme.io/#/zh-CN/component/skeleton">存档</a>于2022-11-16）.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>软件开发</category>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue.js</tag>
      
      <tag>Element UI</tag>
      
      <tag>骨架屏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个没有密码保护的 frp 服务器有多不安全</title>
    <link href="/zh-CN/2022/10/7951c3e787fe/"/>
    <url>/zh-CN/2022/10/7951c3e787fe/</url>
    
    <content type="html"><![CDATA[<blockquote><p>当使用 frp 时，务必开启权限验证。</p></blockquote><span id="more"></span><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>群内有人的家里云受到了尝试登录的攻击，在群友劝其关闭公网时表示不怕打，并公布了自己 frps 的端口。在征求同意后，我开始尝试连接和应用。</p><p><img src="https://picture.zhanganzhi.com/2022/10/30/ljwwqfd.png" alt="表示欢迎尝试玩玩"></p><h2 id="本地服务部署"><a href="#本地服务部署" class="headerlink" title="本地服务部署"></a>本地服务部署</h2><p>正好手里有个 web 项目，于是立刻启动了起来。</p><p><img src="https://picture.zhanganzhi.com/2022/10/30/haxwbw3.png" alt="一个网站项目"></p><h2 id="frpc-配置"><a href="#frpc-配置" class="headerlink" title="frpc 配置"></a>frpc 配置</h2><p>接下来到 <a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a> 下载客户端，编写配置文件然后启动。</p><p><img src="https://picture.zhanganzhi.com/2022/10/30/bzlvof9.png" alt="编写配置文件"></p><p><img src="https://picture.zhanganzhi.com/2022/10/30/z6q2lj9.png" alt="启动 frpc"></p><h2 id="检验成果"><a href="#检验成果" class="headerlink" title="检验成果"></a>检验成果</h2><p>访问他的域名和 frpc 配置的端口，检验是否成功。</p><p><img src="https://picture.zhanganzhi.com/2022/10/30/dcv4bsc.png" alt="测试成功"></p><p><img src="https://picture.zhanganzhi.com/2022/10/30/e6wxr16.png" alt="服务端日志"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>当使用 frp 时，一定要配置鉴权方式，无论是 <code>token</code> 还是 <code>oidc</code>；</li><li>不要随意公开服务器应用的端口，尤其是非公开服务；</li><li>使用路由器和防火墙将服务器应用的端口映射到公网，而不是直接暴露所有端口；</li><li>谨防社会工程学攻击。</li></ol><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://pixabay.com/photos/security-protection-antivirus-265130/">https://pixabay.com/photos/security-protection-antivirus-265130/</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>frp</tag>
      
      <tag>安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 连接 smb 非标准端口</title>
    <link href="/zh-CN/2022/09/9fe6d5ab7fe2/"/>
    <url>/zh-CN/2022/09/9fe6d5ab7fe2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>当使用家庭宽带将 smb 服务转发到公网时，由于 445 端口被封，必须使用其它端口，而 Windows 系统只支持连接标准端口，需要通过端口转发解决此问题。</p></blockquote><span id="more"></span><h2 id="关闭自带文件共享服务"><a href="#关闭自带文件共享服务" class="headerlink" title="关闭自带文件共享服务"></a>关闭自带文件共享服务</h2><p>由于 Windows 自带的文件共享服务会占用 445 端口，需要将其关闭以释放端口。</p><h3 id="关闭-Windows-功能"><a href="#关闭-Windows-功能" class="headerlink" title="关闭 Windows 功能"></a>关闭 Windows 功能</h3><p>在开始菜单中搜索 <code>启用或关闭 Windows 功能</code> 并运行，取消选中 <code>SMB 1.0/CIFS 文件共享支持</code>。</p><p><img src="https://picture.zhanganzhi.com/2022/09/03/t32qfre.png" alt="搜索并打开 启用或关闭 Windows 功能"></p><p><img src="https://picture.zhanganzhi.com/2022/09/03/3we8v69.png" alt="取消选中 SMB 功能"></p><h3 id="关闭-LanmanServer"><a href="#关闭-LanmanServer" class="headerlink" title="关闭 LanmanServer"></a>关闭 LanmanServer</h3><p>用管理员模式运行命令提示符，输入以下命令<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[PORT 445: What is the use and how to disable this TCP port](https://www.how2shout.com/how-to/port-445-what-is-the-use-and-how-to-disable-this-tcp-port.html). H2S Media. 2021-07-29 [2022-09-03]. （原始内容[存档](https://web.archive.org/web/20220903121932/https://www.how2shout.com/how-to/port-445-what-is-the-use-and-how-to-disable-this-tcp-port.html)于2022-09-03）.">[2]</span></a></sup>。</p><p><img src="https://picture.zhanganzhi.com/2022/09/03/ssalh2l.png" alt="运行命令提示符"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sc stop lanmanserver<br>sc config lanmanserver start=disabled<br></code></pre></td></tr></table></figure><h2 id="创建端口转发"><a href="#创建端口转发" class="headerlink" title="创建端口转发"></a>创建端口转发</h2><p>使用以下命令<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="纸乎. [Windows 10 下如何修改 smb 连接的默认端口(445)？](https://www.zhihu.com/question/59814912/answer/684689433). 知乎. 2019-05-16 [2022-09-03]. （原始内容[存档](https://web.archive.org/web/20220903121926/https://www.zhihu.com/question/59814912/answer/684689433)于2022-09-03）.">[3]</span></a></sup>创建本机的端口转发，将远程 smb 服务转发到本机的 445 端口。将 <code>serverport</code> 和 <code>serverip</code> 改为远程服务的地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">netsh interface portproxy add v4tov4 listenport=445 listenaddress=127.0.0.1 connectport=serverport connectaddress=serverip<br></code></pre></td></tr></table></figure><p>随后<strong>重启</strong>，即可通过 <code>\\127.0.0.1</code> 连接远程 smb 服务。</p><h2 id="IP-地址变化"><a href="#IP-地址变化" class="headerlink" title="IP 地址变化"></a>IP 地址变化</h2><p>我们一般会将端口转发绑定到域名上，若域名改变将无法连接，需要重新启动 <code>IP Helper Service</code> 来重新映射域名。启动命令提示符并运行以下命令<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="Morris. [Windows 10 下如何修改 smb 连接的默认端口(445)？](https://www.zhihu.com/question/59814912/answer/2355661073). 知乎. 2022-02-20 [2022-09-03]. （原始内容[存档](https://web.archive.org/web/20220903121933/https://www.zhihu.com/question/59814912/answer/2355661073)于2022-09-03）.">[4]</span></a></sup>；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ipconfig /flushdns<br>net stop iphlpsvc<br>net start iphlpsvc<br></code></pre></td></tr></table></figure><h2 id="端口转发检查"><a href="#端口转发检查" class="headerlink" title="端口转发检查"></a>端口转发检查</h2><p>查看所有的端口转发设置<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="纸乎. [Windows 10 下如何修改 smb 连接的默认端口(445)？](https://www.zhihu.com/question/59814912/answer/684689433). 知乎. 2019-05-16 [2022-09-03]. （原始内容[存档](https://web.archive.org/web/20220903121926/https://www.zhihu.com/question/59814912/answer/684689433)于2022-09-03）.">[3]</span></a></sup>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">netsh interface portproxy show all<br></code></pre></td></tr></table></figure><p>查看 445 端口占用情况，若已经建立 smb 的连接，可以在这里看到远程 IP<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="Morris. [Windows 10 下如何修改 smb 连接的默认端口(445)？](https://www.zhihu.com/question/59814912/answer/2355661073). 知乎. 2022-02-20 [2022-09-03]. （原始内容[存档](https://web.archive.org/web/20220903121933/https://www.zhihu.com/question/59814912/answer/2355661073)于2022-09-03）.">[4]</span></a></sup>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">netstat -ano|findstr 445<br></code></pre></td></tr></table></figure><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.pexels.com/zh-cn/photo/1181772/">https://www.pexels.com/zh-cn/photo/1181772/</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.how2shout.com/how-to/port-445-what-is-the-use-and-how-to-disable-this-tcp-port.html">PORT 445: What is the use and how to disable this TCP port</a>. H2S Media. 2021-07-29 [2022-09-03]. （原始内容<a href="https://web.archive.org/web/20220903121932/https://www.how2shout.com/how-to/port-445-what-is-the-use-and-how-to-disable-this-tcp-port.html">存档</a>于2022-09-03）.<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>纸乎. <a href="https://www.zhihu.com/question/59814912/answer/684689433">Windows 10 下如何修改 smb 连接的默认端口(445)？</a>. 知乎. 2019-05-16 [2022-09-03]. （原始内容<a href="https://web.archive.org/web/20220903121926/https://www.zhihu.com/question/59814912/answer/684689433">存档</a>于2022-09-03）.<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>Morris. <a href="https://www.zhihu.com/question/59814912/answer/2355661073">Windows 10 下如何修改 smb 连接的默认端口(445)？</a>. 知乎. 2022-02-20 [2022-09-03]. （原始内容<a href="https://web.archive.org/web/20220903121933/https://www.zhihu.com/question/59814912/answer/2355661073">存档</a>于2022-09-03）.<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>经验分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>端口转发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【MCDR Tutorials 01】Introduction</title>
    <link href="/en/2022/08/8fe975c3db2b/"/>
    <url>/en/2022/08/8fe975c3db2b/</url>
    
    <content type="html"><![CDATA[<blockquote><p>The vanilla Minecraft technology survival has become a hot topic in recent years. Perhaps because of the pandemic, people have been able to pick up the game they put down years ago, or perhaps because of the successful advertising of TIS, students have been able to look up from the tasteless mobile games, and this long-history but minority topic has gradually entered the public eye. In the last three years, a large number of new technology survival servers have been founded, and both old and new players have been blown away by the unlimited potential shown by this decade-old game. And behind these servers, almost all are using a significant server management tool - MCDReforged.</p></blockquote><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><p>In November 2018<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="TIS_TrinityUnion. &quot;[一起见证原版生存科技的巅峰！TIS服务器一周年纪念视频 TIS Trinity Union First Anniversary](https://www.bilibili.com/video/BV17J41197be?t=15.8)&quot;. bilibili. November 29, 2019. [Archived](https://web.archive.org/web/20220823131237/https://www.bilibili.com/video/BV17J41197be?t=15.8) from the original on August 23, 2022. Retrieved August 23, 2022.">[1]</span></a></sup>, before the TIS started the server, chino_desu developed the server management tool MCDaemon<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="kafuuchino-desu. &quot;[MCDaemon](https://github.com/kafuuchino-desu/MCDaemon)&quot;. GitHub. [Archived](https://web.archive.org/web/20220823093059/https://github.com/kafuuchino-desu/MCDaemon) from the original on August 23, 2022. Retrieved August 23, 2022.">[2]</span></a></sup>. Without modifying the vanilla server, the tool provides server management functions such as restart, world files backup, automatic rollback, cross-service chat, mirror synchronization, etc.</p><p><img src="https://picture.zhanganzhi.com/2022/08/23/6vgazij.png" alt="The first commit of MCDaemon&lt;sup id=&quot;fnref:3&quot; class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn:3&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--rounded&quot; aria-label=&quot;kafuuchino-desu. &quot;[Initial commit](https://github.com/kafuuchino-desu/MCDaemon/commit/ab6e9d92fdcb0f2a2a13c77d573d1af61fc51920)&quot;. GitHub. November 13, 2018. [Archived](https://web.archive.org/web/20220823093612/https://github.com/kafuuchino-desu/MCDaemon/commit/ab6e9d92fdcb0f2a2a13c77d573d1af61fc51920) from the original on August 23, 2022. Retrieved August 23, 2022.&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;"></p><p>With the development of TIS, powerful functions shown by the MCDaemon are notified by many people, especially the saves backup and rollback. They want to use MCDaemon to manage their server, but it does not support Windows. Therefore, lightbrotherV created the project MCDaemon-go<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="TISUnion. &quot;[MCDaemon-go](https://github.com/TISUnion/MCDaemon-go)&quot;. GitHub. [Archived](https://web.archive.org/web/20220823094520/https://github.com/TISUnion/MCDaemon-go) from the original on August 23, 2022. Retrieved August 23, 2022.">[4]</span></a></sup>, which is compatible with the Windows system.</p><p><img src="https://picture.zhanganzhi.com/2022/08/23/s6bco38.png" alt="Archived MCDaemon-go"></p><p><img src="https://picture.zhanganzhi.com/2022/08/23/6zjvd3y.png" alt="The first commit of MCDaemon-go&lt;sup id=&quot;fnref:5&quot; class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn:5&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--rounded&quot; aria-label=&quot;lightbrotherV. &quot;[Initial commit](https://github.com/TISUnion/MCDaemon-go/commit/72322490b6aa5570baafc3de10f3af5b32380e20)&quot;. GitHub. December 2, 2018 [Archived](https://web.archive.org/web/20220823112917/https://github.com/TISUnion/MCDaemon-go/commit/72322490b6aa5570baafc3de10f3af5b32380e20) from the original on August 23, 2022. Retrieved August 23, 2022.&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;"></p><p>Although MCDaemon-go is compatible with windows, it cannot load Python plugins from MCDaemon. Repeating the development of two system plugins is obviously not wise and unsustainable for long-term community development. During the period, some users created forks like MCD-Windows, and now most are deleted.</p><p>TIS has used MCDaemon for a while, and many problems have been revealed, and there are a lot of features to optimize, so the development of MCD 2.0 is on the agenda.</p><p>In March 2020, Fallen_Breath started the development of MCDReforged<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="Fallen-Breath. &quot;[MCDReforged](https://github.com/Fallen-Breath/MCDReforged)&quot;. GitHub. [Archived](https://web.archive.org/web/20220515211259/https://github.com/Fallen-Breath/MCDReforged) from the original on May 15, 2022. Retrieved August 23, 2022.">[6]</span></a></sup>, which can run on Windows.</p><p><img src="https://picture.zhanganzhi.com/2022/08/23/0g3fejd.png" alt="The first commit of MCDReforged&lt;sup id=&quot;fnref:7&quot; class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn:7&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--rounded&quot; aria-label=&quot;Fallen-Breath. &quot;[init](https://github.com/Fallen-Breath/MCDReforged/commit/e7cc72a523f8c8b113df37c41015704cf4031e2b)&quot;. GitHub. May 30, 2020 [Archived](https://web.archive.org/web/20220823113116/https://github.com/Fallen-Breath/MCDReforged/commit/e7cc72a523f8c8b113df37c41015704cf4031e2b) from the original on August 23, 2022. Retrieved August 23, 2022.&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;"></p><p>Chino sent the source code of MCD 2.0 and the expected features list to Fallen_Breath. In March 2020, MCDR released its first prerelease. In May, chino announced to stop the development and maintenance of MCDaemon.</p><blockquote><p>At the beginning of MCDR development, I gave Fallen a small portion of the MCD 2.0 source code I had written, as well as a list of expected MCD 2.0 features. It’s hard to say if it helped Fox write MCDR, but the directory structure in the src of MCDR does look like MCD 2.0.<br>—— <em>chino_desu</em></p></blockquote><p><img src="https://picture.zhanganzhi.com/2022/08/23/wuxhmzm.png" alt="The document of MCDaemon states it stops maintenance"></p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><blockquote><p>MCDReforged is a tool that provides the management ability of the Minecraft server using a custom plugin system. It doesn’t need to modify or mod the original Minecraft server at all. From in-game calculator, player high-light, to manipulate scoreboard, manage structure file and backup &#x2F; load backup, you can implement these by using MCDR and related plugins.<br>—— <em>The readme of MCDReforged</em><sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="Fallen-Breath. &quot;[MCDReforged](https://github.com/Fallen-Breath/MCDReforged)&quot;. GitHub. [Archived](https://web.archive.org/web/20220515211259/https://github.com/Fallen-Breath/MCDReforged) from the original on May 15, 2022. Retrieved August 23, 2022.">[6]</span></a></sup></p></blockquote><p><img src="https://picture.zhanganzhi.com/2022/08/23/bzwxibh.png" alt="The readme of MCDReforged"></p><p>The MCDReforged completely liberates the limitations of MC server management. The relatively independent server management tool can manipulate server files during the server is turned off or provides functions without permitting OP permission to players.</p><p>This really fits the needs of the vanilla technical survival players and has effectively contributed to the excellent development of MC vanilla technical survival in recent years. It is also behind the resurgence of Minecraft topics in China during the epidemic.</p><p>Today, many bukkit and mod servers use MCDR to save file management and cross-server chatting functions.</p><p><img src="https://picture.zhanganzhi.com/2022/08/23/lqu2rgv.png" alt="Google trends of Minecraft"></p><h2 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works"></a>How it works</h2><p>Actually, the principle of MCDR is straightforward.</p><blockquote><p>MCDR uses Popen to start the server as a sub-process, then it has the ability to control the standard input &#x2F; out stream of the server. Since the console output of a Minecraft server has a stable format and contains a large amount of useful information about the server, e.g. player chat messages, MCDR is able to parse and analyze the server output, abstract them into different events, and dispatch them towards plugins for responding. With the help of the Minecraft command system, MCDR can send Minecraft commands via the standard input stream to affect the actual Minecraft server. <sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="Fallen-Breath. &quot;[MCDReforged](https://github.com/Fallen-Breath/MCDReforged)&quot;. GitHub. [Archived](https://web.archive.org/web/20220515211259/https://github.com/Fallen-Breath/MCDReforged) from the original on May 15, 2022. Retrieved August 23, 2022.">[6]</span></a></sup></p></blockquote><p><img src="https://picture.zhanganzhi.com/2022/08/23/yvzoe3u.png" alt="MCDReforged will launch the server, and have its input/out stream"></p><p>Plugins react differently depending on different events. For example, players can back up server saves, send their location to other players, use the calculator, manage and store fake players, etc., by typing specific commands in the chat box.</p><p><img src="https://picture.zhanganzhi.com/2022/08/23/16gbx6q.png" alt="Player types !!qb in the chat to make a backup of save file"></p><p><img src="https://picture.zhanganzhi.com/2022/08/23/uve47tl.png" alt="Player types !!here in the chat to send his location"></p><p><img src="https://picture.zhanganzhi.com/2022/08/23/by2gpmo.png" alt="In-game calculator"></p><p><img src="https://picture.zhanganzhi.com/2022/08/23/d69iqse.png" alt="Fake players management plugin"></p><h2 id="Unique-Features"><a href="#Unique-Features" class="headerlink" title="Unique Features"></a>Unique Features</h2><ul><li><strong>The ability to control the running status of the server.</strong> No plugin or mod can manage a turned-off server, but MCDReforged can do that easily because it runs out of the server. Any Bukkit plugin or Forge&#x2F;Fabric mod can never achieve the feature.</li><li><strong>The ability to manage server files.</strong> The ability to freely control the running of the server allows MCDR to manage files that must restart the server. For example, shutting down the server and rollback the save, changing server mods or plugins, can be easily implemented by MCDR plugins, eliminating manual login to the server terminal.</li></ul><h2 id="Strongpoints"><a href="#Strongpoints" class="headerlink" title="Strongpoints"></a>Strongpoints</h2><ul><li><strong>Management ability out of the server.</strong> Independent running decoupling MCDR and the server, which helps to implement unbelievable functions in the past.</li><li><strong>Cheap to get started and easy to develop.</strong> Complete documents allow server owners only need basic computer skills to get started. MCDR and its plugins are written in Python, an easy language that makes it easy to quickly learn and develop plugins over the Internet.</li><li><strong>Fantastic community energy and support services.</strong> Many excellent plugins are still emerging from the community, and new users become plugin developers, updating old plugins to add new energy and ideas to the community. A large number of users and active MCDR developers work together to provide multi-platform, responsive, and satisfying technical support, application deployment, and emergency maintenance services.</li></ul><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>TIS_TrinityUnion. &quot;<a href="https://www.bilibili.com/video/BV17J41197be?t=15.8">一起见证原版生存科技的巅峰！TIS服务器一周年纪念视频 TIS Trinity Union First Anniversary</a>&quot;. bilibili. November 29, 2019. <a href="https://web.archive.org/web/20220823131237/https://www.bilibili.com/video/BV17J41197be?t=15.8">Archived</a> from the original on August 23, 2022. Retrieved August 23, 2022.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>kafuuchino-desu. &quot;<a href="https://github.com/kafuuchino-desu/MCDaemon">MCDaemon</a>&quot;. GitHub. <a href="https://web.archive.org/web/20220823093059/https://github.com/kafuuchino-desu/MCDaemon">Archived</a> from the original on August 23, 2022. Retrieved August 23, 2022.<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>kafuuchino-desu. &quot;<a href="https://github.com/kafuuchino-desu/MCDaemon/commit/ab6e9d92fdcb0f2a2a13c77d573d1af61fc51920">Initial commit</a>&quot;. GitHub. November 13, 2018. <a href="https://web.archive.org/web/20220823093612/https://github.com/kafuuchino-desu/MCDaemon/commit/ab6e9d92fdcb0f2a2a13c77d573d1af61fc51920">Archived</a> from the original on August 23, 2022. Retrieved August 23, 2022.<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>TISUnion. &quot;<a href="https://github.com/TISUnion/MCDaemon-go">MCDaemon-go</a>&quot;. GitHub. <a href="https://web.archive.org/web/20220823094520/https://github.com/TISUnion/MCDaemon-go">Archived</a> from the original on August 23, 2022. Retrieved August 23, 2022.<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>lightbrotherV. &quot;<a href="https://github.com/TISUnion/MCDaemon-go/commit/72322490b6aa5570baafc3de10f3af5b32380e20">Initial commit</a>&quot;. GitHub. December 2, 2018 <a href="https://web.archive.org/web/20220823112917/https://github.com/TISUnion/MCDaemon-go/commit/72322490b6aa5570baafc3de10f3af5b32380e20">Archived</a> from the original on August 23, 2022. Retrieved August 23, 2022.<a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span>Fallen-Breath. &quot;<a href="https://github.com/Fallen-Breath/MCDReforged">MCDReforged</a>&quot;. GitHub. <a href="https://web.archive.org/web/20220515211259/https://github.com/Fallen-Breath/MCDReforged">Archived</a> from the original on May 15, 2022. Retrieved August 23, 2022.<a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span>Fallen-Breath. &quot;<a href="https://github.com/Fallen-Breath/MCDReforged/commit/e7cc72a523f8c8b113df37c41015704cf4031e2b">init</a>&quot;. GitHub. May 30, 2020 <a href="https://web.archive.org/web/20220823113116/https://github.com/Fallen-Breath/MCDReforged/commit/e7cc72a523f8c8b113df37c41015704cf4031e2b">Archived</a> from the original on August 23, 2022. Retrieved August 23, 2022.<a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Minecraft</category>
      
      <category>MCDR系列教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Minecraft</tag>
      
      <tag>MCDReforged</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【MCDR 系列教程 01】简介</title>
    <link href="/zh-CN/2022/08/fc02d61c8889/"/>
    <url>/zh-CN/2022/08/fc02d61c8889/</url>
    
    <content type="html"><![CDATA[<blockquote><p>近几年的 Minecraft 原版技术生存成为了一个热门话题，或许是因为疫情大家得以闲暇捡起数年前放下的游戏、或许是 TIS 成功的宣传让学生们从索然无味的手机游戏中抬起头来，这个历史悠久但小众的玩法逐渐进入了大众的视野。近三年，大量新的技术生存服务器不断涌现，无论新老玩家都被这款有着十年历史的游戏所展现出来的无限潜力而震撼。而在这些服务器的背后，几乎都在使用一个划时代的服务端管理工具——MCDReforged。</p></blockquote><h2 id="演变历史"><a href="#演变历史" class="headerlink" title="演变历史"></a>演变历史</h2><p>2018 年 11 月<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="TIS_TrinityUnion. [一起见证原版生存科技的巅峰！TIS服务器一周年纪念视频 TIS Trinity Union First Anniversary](https://www.bilibili.com/video/BV17J41197be?t=15.8). bilibili. 2019-11-29 [2022-08-23]. （原始内容[存档](https://web.archive.org/web/20220823131237/https://www.bilibili.com/video/BV17J41197be?t=15.8)于2022-08-23）.">[1]</span></a></sup>，TIS 开服前夕，chino_desu 开发了服务端管理工具 MCDaemon<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="kafuuchino-desu. [MCDaemon](https://github.com/kafuuchino-desu/MCDaemon). GitHub. [2022-08-23]. （原始内容[存档](https://web.archive.org/web/20220823093059/https://github.com/kafuuchino-desu/MCDaemon)于2022-08-23）.">[2]</span></a></sup>。在不修改原版服务端的情况下，提供了多种服务端管理功能，例如服务器重启、存档备份和自动回档、跨服聊天、镜像服存档同步等。</p><p><img src="https://picture.zhanganzhi.com/2022/08/23/6vgazij.png" alt="MCDaemon 的第一条 commit&lt;sup id=&quot;fnref:3&quot; class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn:3&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--rounded&quot; aria-label=&quot;kafuuchino-desu. [Initial commit](https://github.com/kafuuchino-desu/MCDaemon/commit/ab6e9d92fdcb0f2a2a13c77d573d1af61fc51920). GitHub. 2018-11-03 [2022-08-23]. （原始内容[存档](https://web.archive.org/web/20220823093612/https://github.com/kafuuchino-desu/MCDaemon/commit/ab6e9d92fdcb0f2a2a13c77d573d1af61fc51920)于2022-08-23）.&quot;&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;"></p><p>随着 TIS 开服和发展，MCDaemon 展示出来的强大功能，尤其是备份回档受到了越来越多人的关注，并期望使用它来管理自己的服务器。但 MCDaemon 有个明显的缺点：不支持 Windows。于是 lightbrotherV 创建了 MCDaemon-go<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="TISUnion. [MCDaemon-go](https://github.com/TISUnion/MCDaemon-go). GitHub. [2022-08-23]. （原始内容[存档](https://web.archive.org/web/20220823094520/https://github.com/TISUnion/MCDaemon-go)于2022-08-23）.">[4]</span></a></sup> 项目，实现了 Windows 支持。</p><p><img src="https://picture.zhanganzhi.com/2022/08/23/s6bco38.png" alt="已经归档的 MCDaemon-go 项目"></p><p><img src="https://picture.zhanganzhi.com/2022/08/23/6zjvd3y.png" alt="MCDaemon-go 的第一条 commit&lt;sup id=&quot;fnref:5&quot; class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn:5&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--rounded&quot; aria-label=&quot;lightbrotherV. [Initial commit](https://github.com/TISUnion/MCDaemon-go/commit/72322490b6aa5570baafc3de10f3af5b32380e20). GitHub. 2018-12-02 [2022-08-23]. （原始内容[存档](https://web.archive.org/web/20220823112917/https://github.com/TISUnion/MCDaemon-go/commit/72322490b6aa5570baafc3de10f3af5b32380e20)于2022-08-23）.&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;"></p><p>虽然 MCDaemon-go 支持了 windows，但是并不支持 MCDaemon 的 Python 插件，重复开发两个生态的插件显然不是明智之举，对于长期社区发展也不是好事。这段时间里，社区用户也创建了一些 Fork，例如 MCD-Windows。这些 Fork 现在大部分已经删库。</p><p>MCDaemon 在被 TIS 使用一段时间后暴露出许多问题，有很大的优化空间，于是 MCD 2.0 的开发也提上了日程。</p><p>2020年3月，Fallen_Breath 开始了 MCDReforged<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="Fallen-Breath. [MCDReforged](https://github.com/Fallen-Breath/MCDReforged). GitHub. [2022-08-23]. （原始内容[存档](https://web.archive.org/web/20220515211259/https://github.com/Fallen-Breath/MCDReforged)于2022-05-15）.">[6]</span></a></sup> 的开发，其支持在 Windows 下运行。</p><p><img src="https://picture.zhanganzhi.com/2022/08/23/0g3fejd.png" alt="MCDReforged 的第一条 commit&lt;sup id=&quot;fnref:7&quot; class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn:7&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--rounded&quot; aria-label=&quot;Fallen-Breath. [init](https://github.com/Fallen-Breath/MCDReforged/commit/e7cc72a523f8c8b113df37c41015704cf4031e2b). GitHub. 2020-05-30 [2022-08-23]. （原始内容[存档](https://web.archive.org/web/20220823113116/https://github.com/Fallen-Breath/MCDReforged/commit/e7cc72a523f8c8b113df37c41015704cf4031e2b)于2022-08-23）.&quot;&gt;[7]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;"></p><p>chino 将 MCD 2.0 的源码和预期功能列表给了 Fallen_Breath。2020年4月，MCDR 发布了第一个预览版本。同年5月，chino 宣布停止 MCDaemon 的开发和维护。</p><blockquote><p>我一个周末搓的所以根本不想重构。MCDR 开发初期，我是把写了一小部分的 MCD 2.0 源码给了 Fallen 的，以及一个 MCD 2.0 预期的功能列表。很难说有没有帮上狐狸写 MCDR，但是 MCDR 的 src 里面目录结构的确是 MCD 2.0 的样子。<br>—— <em>chino_desu</em></p></blockquote><p><img src="https://picture.zhanganzhi.com/2022/08/23/wuxhmzm.png" alt="MCDaemon 的文档声明其已经停止维护"></p><h2 id="功能简介"><a href="#功能简介" class="headerlink" title="功能简介"></a>功能简介</h2><blockquote><p>MCDReforged 是一个基于 Python 的 Minecraft 服务端控制工具，可以在完全不对 Minecraft 服务端进行修改的情况下，通过可自定义的插件系统，提供对服务端的管理能力的工具。小至计算器、高亮玩家、B 站弹幕姬，大至操控计分板、管理结构文件、自助备份回档，都可以通过 MCDR 及相配套的插件实现。<br>—— <em>MCDReforged 自述文件</em><sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="Fallen-Breath. [MCDReforged](https://github.com/Fallen-Breath/MCDReforged). GitHub. [2022-08-23]. （原始内容[存档](https://web.archive.org/web/20220515211259/https://github.com/Fallen-Breath/MCDReforged)于2022-05-15）.">[6]</span></a></sup></p></blockquote><p><img src="https://picture.zhanganzhi.com/2022/08/23/7flci56.png" alt="MCDReforged 的自述文件"></p><p>MCDReforged 彻底解放了 MC 服务端控制的限制，相对独立的服务端控制工具可以在关服时操作服务器文件，或是在玩家无 OP 权限的情况下为原版生存实现各种功能。</p><p>这十分符合原版技术生存玩家的需求，切实推动了近几年 MC 原版技术生存的蓬勃发展。在疫情期间国内重新兴起的 MC 相关话题背后也有它的影子。</p><p>如今，许多插件服和模组服也会使用 MCDR 实现服务器存档管理和回档、跨服聊天等功能。</p><p><img src="https://picture.zhanganzhi.com/2022/08/23/rcnqywp.png" alt="Minecraft 的百度指数"></p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>实际上，MCDR 的实现原理非常简单。</p><blockquote><p>它将服务端作为子进程启动，以此拥有了控制服务端标准输入&#x2F;输出流的能力。服务端输出会被 MCDR 获取，而 MCDR 也可以向控制台内输入指令。Minecraft 的控制台输出非常标准，通过解析输出即可将其抽象成不同的事件并派发给插件进行响应。在 Minecraft 内置指令系统的帮助下，MCDR 可以通过向服务端标准输入流发送 Minecraft 指令来与 Minecraft 服务器做出交互。<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="Fallen-Breath. [MCDReforged](https://github.com/Fallen-Breath/MCDReforged). GitHub. [2022-08-23]. （原始内容[存档](https://web.archive.org/web/20220515211259/https://github.com/Fallen-Breath/MCDReforged)于2022-05-15）.">[6]</span></a></sup></p></blockquote><p><img src="https://picture.zhanganzhi.com/2022/08/23/yvzoe3u.png" alt="MCDReforged 会启动服务端，并获取它的输入输出流"></p><p>插件根据不同的事件做出不同的反应。例如，玩家在聊天框打出特定指令即可备份存档、向其他玩家发送自己所在的位置、使用计算器、管理和存储假人玩家等。</p><p><img src="https://picture.zhanganzhi.com/2022/08/23/16gbx6q.png" alt="玩家在聊天中打出 !!qb make 以备份存档"></p><p><img src="https://picture.zhanganzhi.com/2022/08/23/uve47tl.png" alt="玩家在聊天中打出 !!here 以发送自己所在位置"></p><p><img src="https://picture.zhanganzhi.com/2022/08/23/by2gpmo.png" alt="游戏内计算器"></p><p><img src="https://picture.zhanganzhi.com/2022/08/23/d69iqse.png" alt="假人管理插件"></p><h2 id="独特功能"><a href="#独特功能" class="headerlink" title="独特功能"></a>独特功能</h2><ul><li><strong>对服务端运行状态的控制。</strong>没有任何插件或模组能控制已关闭的服务端，而在服务端之外运行的 MCDReforged 可以轻易做到。这是 Bukkit 系插件、Forge&#x2F;Fabric 模组不可能实现的特性。</li><li><strong>对于服务端文件的管理能力。</strong>自由控制服务端的运行的能力让 MCDR 可以方便地修改必须重启服务端才可用的文件。例如关服回档、管理服务端模组或插件，都可以方便地通过 MCDR 插件实现，不再需要繁琐地登录服务器后台手动操作。</li></ul><h2 id="软件优势"><a href="#软件优势" class="headerlink" title="软件优势"></a>软件优势</h2><ul><li><strong>服务端之外的管理能力。</strong>独立于服务端运行使 MCDR 与服务端解耦，得以实现原本不可能实现的功能。</li><li><strong>容易上手、开发简单。</strong>完善的文档让服主只需基本的计算机基础即可上手。完善的文档、API 和事件系统，使插件开发简单清晰。MCDR 及其插件均使用 Python 语言，这门对新手十分友好的语言使新手能够轻松地通过互联网快速学习并直接开始插件开发。</li><li><strong>优秀的社区活力和支持服务。</strong>MCDR 社区仍有不少优秀插件涌现，新的用户成为插件开发者，迭代更新老旧插件，为社区注入新的活力和思想。庞大的用户群体与积极活跃的 MCDR 开发者共同提供了多平台、响应迅速、满意度高的技术支持、应用部署、应急维护等服务。</li></ul><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>TIS_TrinityUnion. <a href="https://www.bilibili.com/video/BV17J41197be?t=15.8">一起见证原版生存科技的巅峰！TIS服务器一周年纪念视频 TIS Trinity Union First Anniversary</a>. bilibili. 2019-11-29 [2022-08-23]. （原始内容<a href="https://web.archive.org/web/20220823131237/https://www.bilibili.com/video/BV17J41197be?t=15.8">存档</a>于2022-08-23）.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>kafuuchino-desu. <a href="https://github.com/kafuuchino-desu/MCDaemon">MCDaemon</a>. GitHub. [2022-08-23]. （原始内容<a href="https://web.archive.org/web/20220823093059/https://github.com/kafuuchino-desu/MCDaemon">存档</a>于2022-08-23）.<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>kafuuchino-desu. <a href="https://github.com/kafuuchino-desu/MCDaemon/commit/ab6e9d92fdcb0f2a2a13c77d573d1af61fc51920">Initial commit</a>. GitHub. 2018-11-03 [2022-08-23]. （原始内容<a href="https://web.archive.org/web/20220823093612/https://github.com/kafuuchino-desu/MCDaemon/commit/ab6e9d92fdcb0f2a2a13c77d573d1af61fc51920">存档</a>于2022-08-23）.<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>TISUnion. <a href="https://github.com/TISUnion/MCDaemon-go">MCDaemon-go</a>. GitHub. [2022-08-23]. （原始内容<a href="https://web.archive.org/web/20220823094520/https://github.com/TISUnion/MCDaemon-go">存档</a>于2022-08-23）.<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>lightbrotherV. <a href="https://github.com/TISUnion/MCDaemon-go/commit/72322490b6aa5570baafc3de10f3af5b32380e20">Initial commit</a>. GitHub. 2018-12-02 [2022-08-23]. （原始内容<a href="https://web.archive.org/web/20220823112917/https://github.com/TISUnion/MCDaemon-go/commit/72322490b6aa5570baafc3de10f3af5b32380e20">存档</a>于2022-08-23）.<a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span>Fallen-Breath. <a href="https://github.com/Fallen-Breath/MCDReforged">MCDReforged</a>. GitHub. [2022-08-23]. （原始内容<a href="https://web.archive.org/web/20220515211259/https://github.com/Fallen-Breath/MCDReforged">存档</a>于2022-05-15）.<a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span>Fallen-Breath. <a href="https://github.com/Fallen-Breath/MCDReforged/commit/e7cc72a523f8c8b113df37c41015704cf4031e2b">init</a>. GitHub. 2020-05-30 [2022-08-23]. （原始内容<a href="https://web.archive.org/web/20220823113116/https://github.com/Fallen-Breath/MCDReforged/commit/e7cc72a523f8c8b113df37c41015704cf4031e2b">存档</a>于2022-08-23）.<a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Minecraft</category>
      
      <category>MCDR系列教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Minecraft</tag>
      
      <tag>MCDReforged</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何科学地买菜：阶梯菜价</title>
    <link href="/zh-CN/2022/08/21f435f762dc/"/>
    <url>/zh-CN/2022/08/21f435f762dc/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在 <a href="https://www.bilibili.com/video/BV17B4y1k7fZ">《如何科学的买饼》</a><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="shenjack_. [《如何科学的买饼》](https://www.bilibili.com/video/BV17B4y1k7fZ). 2022-08-07 [2022-08-09]. （原始内容[存档](https://web.archive.org/web/20220809133655/https://www.bilibili.com/video/BV17B4y1k7fZ)于2022-08-09）.">[3]</span></a></sup> 中，我们买好了大饼，接下来需要买几棵大葱，做一道煎饼卷大葱。</p></blockquote><p><img src="https://picture.zhanganzhi.com/2022/08/09/celzgar.png" alt="煎饼卷大葱"></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><img src="https://picture.zhanganzhi.com/2022/08/09/u7ie4lr.png" alt="原始题目"></p><p>大葱的价格遵循以下规律：第一棵的价格为 1 元&#x2F;棵，每购买 20 棵则上涨一元。</p><table><thead><tr><th>数量</th><th>单价</th></tr></thead><tbody><tr><td>1-20</td><td>1 元&#x2F;棵</td></tr><tr><td>21-40</td><td>2 元&#x2F;棵</td></tr><tr><td>41-60</td><td>3 元&#x2F;棵</td></tr><tr><td>61-80</td><td>4 元&#x2F;棵</td></tr><tr><td>81-100</td><td>5 元&#x2F;棵</td></tr><tr><td>……</td><td>……</td></tr></tbody></table><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先将问题拆解，一是每棵葱的单价，二是如何合计总价。</p><p>单价的变化规律是每买 20 个增加 1，所以使用数量除以 20，整数部分即为当前数量的单价。</p><p>合计总价需要将每一棵葱的单价相加，而学过小学二年级数学的我们知道，只需要运用微积分的知识，即可求和。</p><h2 id="列式"><a href="#列式" class="headerlink" title="列式"></a>列式</h2><h3 id="单价"><a href="#单价" class="headerlink" title="单价"></a>单价</h3><p>数量每增长 20 个，单价增长 1 元。回忆我们的数学知识，这正符合阶跃函数的特征。</p><p><img src="https://picture.zhanganzhi.com/2022/08/09/4aei8w4.png" alt="阶跃函数&lt;sup id=&quot;fnref:4&quot; class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn:4&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--rounded&quot; aria-label=&quot;Stewart J, Redlin L, Watson S. Precalculus[M]. Cengage Learning, 2012.&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;"></p><p>列出表达式，并画图观察是否符合要求。</p><p>$$\lfloor\frac{n-1}{20}\rfloor+1$$</p><p><img src="https://picture.zhanganzhi.com/2022/08/09/707d2uc.png" alt="画图检查"></p><h3 id="总价"><a href="#总价" class="headerlink" title="总价"></a>总价</h3><p>有了单价，即可计算总价，使用求和符号将单价相加。</p><p><img src="https://picture.zhanganzhi.com/2022/08/09/25udoc4.png" alt="求和符号&lt;sup id=&quot;fnref:4&quot; class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn:4&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--rounded&quot; aria-label=&quot;Stewart J, Redlin L, Watson S. Precalculus[M]. Cengage Learning, 2012.&quot;&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;"></p><p>列出表达式，并画图观察是否符合要求。</p><p>$$\sum_{n&#x3D;1}^{x}(\lfloor\frac{n-1}{20}\rfloor+1)$$</p><p><img src="https://picture.zhanganzhi.com/2022/08/09/48tb3f7.png" alt="画图检查"></p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p>葱的单价为 $\lfloor\frac{n-1}{20}\rfloor+1$，总价为 $\sum_{n&#x3D;1}^{x}(\lfloor\frac{n-1}{20}\rfloor+1)$。图表链接：<a href="https://www.desmos.com/calculator/qc16ngykwu">https://www.desmos.com/calculator/qc16ngykwu</a>。</p><p>若一棵葱为半斤，那么在单价 1-2 元左右是科学的，也就是一次购买 40 棵以内是最科学的。</p><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://pixabay.com/photos/winter-onion-leek-root-stalk-228039/">https://pixabay.com/photos/winter-onion-leek-root-stalk-228039/</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.pexels.com/zh-cn/photo/1508666/">https://www.pexels.com/zh-cn/photo/1508666/</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>shenjack_. <a href="https://www.bilibili.com/video/BV17B4y1k7fZ">《如何科学的买饼》</a>. 2022-08-07 [2022-08-09]. （原始内容<a href="https://web.archive.org/web/20220809133655/https://www.bilibili.com/video/BV17B4y1k7fZ">存档</a>于2022-08-09）.<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>Stewart J, Redlin L, Watson S. Precalculus[M]. Cengage Learning, 2012.<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学术</category>
      
      <category>沙雕系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>数学</tag>
      
      <tag>微积分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>购买西数 4T 新紫盘</title>
    <link href="/zh-CN/2022/08/81f2bb325590/"/>
    <url>/zh-CN/2022/08/81f2bb325590/</url>
    
    <content type="html"><![CDATA[<blockquote><p>以前搭 NAS 的时候用了块家里旧台式机拆下来的硬盘，只有 512G，容量一直挺吃紧的，加上这个硬盘快十年了，不放心安全性，决定换个新的。</p></blockquote><span id="more"></span><h2 id="旧硬盘的由来"><a href="#旧硬盘的由来" class="headerlink" title="旧硬盘的由来"></a>旧硬盘的由来</h2><p>家里十年前买了个一体机放家里用，但是性能不强使用频率不高，去年看着再吃灰更不值钱了，几百块钱买了出去。<strong>但是卖之前上淘宝花了 16 块钱买了个 500G 的劣质硬盘偷梁换柱，还非常贴心地帮忙装了个 win7 系统。</strong></p><p><img src="https://picture.zhanganzhi.com/2022/08/02/0evw9xr.png" alt="黑心二手商家"></p><h2 id="硬盘选型"><a href="#硬盘选型" class="headerlink" title="硬盘选型"></a>硬盘选型</h2><p>综合了价格和容量之后，决定买 4T 的硬盘，对比之后确定了西数的 <code>WD42EJRX</code>。京东自营价格 529 元，等了快一个月一直没降下去，今天写文章降到 509 了。</p><p>还有一个问题，这个是不是叠瓦盘。费了一番功夫，找到了<a href="https://www.bilibili.com/read/cv14273159">这篇文章</a><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="海门牌梭鱼罐头. [十年，2T：西数新款紫盘深入测试](https://www.bilibili.com/read/cv14273159). 2021-12-03 [2022-07-20]. （原始内容[存档](http://web.archive.org/web/20220802103829/https://www.bilibili.com/read/cv14273159)于2022-08-03）.">[1]</span></a></sup>，确定不是叠瓦盘。巧的是在我下单前，这篇文章的作者发布了一条<a href="https://t.bilibili.com/687792429254836233">动态</a><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="海门牌梭鱼罐头. [动态](https://t.bilibili.com/687792429254836233). 2022-07-28 [2022-07-29]. （原始内容[存档](http://web.archive.org/web/20220802104250/https://t.bilibili.com/687792429254836233)于2022-08-03）.">[2]</span></a></sup>，通过破解电路板证实了确实是一块 CMR 硬盘。</p><h2 id="开箱"><a href="#开箱" class="headerlink" title="开箱"></a>开箱</h2><p>京东的包装有些简陋，硬盘盒子直接套了个快递泡沫袋，也不装箱。盒子里是一个塑料的架子，里面静电袋包着硬盘。</p><p><img src="https://picture.zhanganzhi.com/2022/08/02/k2c57us.jpg" alt="盒子已经挤压变形了"></p><p><img src="https://picture.zhanganzhi.com/2022/08/02/ad2fdt7.jpg" alt="硬盘正面"></p><p><img src="https://picture.zhanganzhi.com/2022/08/02/c5eiczr.png" alt="厚度非常明显"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>健康信息忘了截图了，很正常，京东自营应该不会篡改的。</p><p><img src="https://picture.zhanganzhi.com/2022/08/02/emtnrxn.png" alt="用了七个小时扫一遍坏道"></p><p><img src="https://picture.zhanganzhi.com/2022/08/02/9v329ah.png" alt="读取速度曲线"></p><p><img src="https://picture.zhanganzhi.com/2022/08/02/nmgr2ra.png" alt="写入速度曲线"></p><p>按文章<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="海门牌梭鱼罐头. [十年，2T：西数新款紫盘深入测试](https://www.bilibili.com/read/cv14273159). 2021-12-03 [2022-07-20]. （原始内容[存档](http://web.archive.org/web/20220802103829/https://www.bilibili.com/read/cv14273159)于2022-08-03）.">[1]</span></a></sup>的方法又跑了下随机读写用于判断叠瓦，真的有炒豆子的声音。</p><p><img src="https://picture.zhanganzhi.com/2022/08/02/2ece2xp.png" alt="格式化测个速"></p><h2 id="实装"><a href="#实装" class="headerlink" title="实装"></a>实装</h2><p>装上设置挂载，然后调一下 samba 配置文件，把旧硬盘文件拷过来即可。第一次拷文件在 100 MB&#x2F;s 左右徘徊，之后就可以稳定占满千兆网线的速度了。</p><p><img src="https://picture.zhanganzhi.com/2022/08/02/3jp0ese.png" alt="第一次速度不太稳"></p><p><img src="https://picture.zhanganzhi.com/2022/08/02/thu935z.png" alt="实际使用的速度"></p><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>海门牌梭鱼罐头. <a href="https://www.bilibili.com/read/cv14273159">十年，2T：西数新款紫盘深入测试</a>. 2021-12-03 [2022-07-20]. （原始内容<a href="http://web.archive.org/web/20220802103829/https://www.bilibili.com/read/cv14273159">存档</a>于2022-08-03）.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>海门牌梭鱼罐头. <a href="https://t.bilibili.com/687792429254836233">动态</a>. 2022-07-28 [2022-07-29]. （原始内容<a href="http://web.archive.org/web/20220802104250/https://t.bilibili.com/687792429254836233">存档</a>于2022-08-03）.<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>开箱</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开箱</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git Conventional Commits</title>
    <link href="/en/2022/06/ca740262a99f/"/>
    <url>/en/2022/06/ca740262a99f/</url>
    
    <content type="html"><![CDATA[<blockquote><p>The Conventional Commits specification is a lightweight convention on top of commit messages. It provides an easy set of rules for creating an explicit commit history; which makes it easier to write automated tools on top of. This convention dovetails with <a href="https://semver.org/">SemVer</a>, by describing the features, fixes, and breaking changes made in commit messages.</p></blockquote><span id="more"></span><ul><li>Automatically generating CHANGELOGs.</li><li>Automatically determining a semantic version bump (based on the types of commits landed).</li><li>Communicating the nature of changes to teammates, the public, and other stakeholders.</li><li>Triggering build and publish processes.</li><li>Making it easier for people to contribute to your projects, by allowing them to explore a more structured commit history.</li></ul><h2 id="Specification"><a href="#Specification" class="headerlink" title="Specification"></a>Specification</h2><p><a href="https://www.conventionalcommits.org/en/v1.0.0/">Conventional Commits</a><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="&quot;[Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/)&quot;. Retrieved June 28, 2022.">[1]</span></a></sup> specifies the structure of the commit message:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;type&gt;[optional scope]: &lt;description&gt;<br><br>[optional body]<br><br>[optional footer(s)]<br></code></pre></td></tr></table></figure><h3 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h3><p>The type must use <strong>lowercase</strong>, cannot empty, followed by the OPTIONAL scope, OPTIONAL <code>!</code>, and REQUIRED terminal colon and space.</p><p>There are all available commit types:</p><ul><li><code>build</code></li><li><code>chore</code></li><li><code>ci</code></li><li><code>docs</code></li><li><code>feat</code></li><li><code>fix</code></li><li><code>perf</code></li><li><code>refactor</code></li><li><code>revert</code></li><li><code>style</code></li><li><code>test</code></li></ul><h3 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h3><p>A scope MAY be provided after a type. A scope MUST consist of a noun describing a section of the codebase surrounded by parenthesis.</p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>The description is a short summary of the code changes, cannot be empty, and does not end with a period.</p><h3 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h3><p>A longer commit body MAY be provided after the short description, providing additional contextual information about the code changes. The body MUST begin one blank line after the description.</p><p>A commit body is free-form and MAY consist of any number of newline separated paragraphs.</p><h3 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h3><p>One or more footers MAY be provided one blank line after the body. Each footer MUST consist of a word token, followed by either a <code>:&lt;space&gt;</code> or <code>&lt;space&gt;#</code> separator, followed by a string value.</p><p>A footer’s token MUST use <code>-</code> in place of whitespace characters, a only exception is made for <code>BREAKING CHANGE</code>.</p><p>A footer’s value MAY contain spaces and newlines.</p><h3 id="Correlate-with-SemVer"><a href="#Correlate-with-SemVer" class="headerlink" title="Correlate with SemVer"></a>Correlate with SemVer</h3><p>Some commit types may affect <a href="https://semver.org/">SemVer</a> changes:</p><ol><li><strong>fix</strong> means patches a bug, this correlates with <code>PATCH</code> in Semantic Versioning.</li><li><strong>feat</strong> means introduces a new feature, this correlates with <code>MINOR</code> in Semantic Versioning.</li><li><strong>BREAKING CHANGE</strong> is in the footer, or appends a <code>!</code> after the type&#x2F;scope, this correlates with <code>MAJOR</code> in Semantic Versioning.</li></ol><h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><h3 id="Gitmoji"><a href="#Gitmoji" class="headerlink" title="Gitmoji"></a>Gitmoji</h3><p><a href="https://gitmoji.dev/">Gitmoji</a><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="&quot;[gitmoji](https://gitmoji.dev/)&quot;. [Archived](https://web.archive.org/web/20220628095615/https://gitmoji.dev/) from the original on June 28, 2022. Retrieved June 28, 2022.">[2]</span></a></sup> is an initiative to standardize and explain the use of emojis on GitHub commit messages.</p><h3 id="VS-Code-Extension"><a href="#VS-Code-Extension" class="headerlink" title="VS Code Extension"></a>VS Code Extension</h3><p>When committing in the VS Code, <a href="https://marketplace.visualstudio.com/items?itemName=vivaxy.vscode-conventional-commits">Conventional Commits</a><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="&quot;[Semantic Versioning](https://semver.org/)&quot;. [Archived](https://web.archive.org/web/20220628082309/https://semver.org/) from the original on June 28, 2022. Retrieved June 28, 2022.">[3]</span></a></sup> extension can help to generate a commit message.</p><p><img src="https://picture.zhanganzhi.com/2022/06/28/ap3xacu.png" alt="The interface of Conventional Commits"></p><h3 id="GitHub-Action"><a href="#GitHub-Action" class="headerlink" title="GitHub Action"></a>GitHub Action</h3><p><a href="https://github.com/google-github-actions/release-please-action">Release Please Action</a><sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="&quot;[Release Please Action](https://github.com/google-github-actions/release-please-action)&quot;. [Archived](https://web.archive.org/web/20220628095655/https://github.com/google-github-actions/release-please-action) from the original on June 28, 2022. Retrieved June 28, 2022.">[4]</span></a></sup> is a GitHub Action, which can auto-generate and create releases based on commit messages.</p><p>Release Please Action will automatically create release pr includes generated CHANGELOG. When PR is merged, it will create a release, and you can run CI&#x2F;CD and upload files to the release.</p><p><img src="https://picture.zhanganzhi.com/2022/06/28/h8ihofj.png" alt="The PR created by Release Please Action"></p><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>&quot;<a href="https://www.conventionalcommits.org/en/v1.0.0/">Conventional Commits</a>&quot;. Retrieved June 28, 2022.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>&quot;<a href="https://gitmoji.dev/">gitmoji</a>&quot;. <a href="https://web.archive.org/web/20220628095615/https://gitmoji.dev/">Archived</a> from the original on June 28, 2022. Retrieved June 28, 2022.<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>&quot;<a href="https://semver.org/">Semantic Versioning</a>&quot;. <a href="https://web.archive.org/web/20220628082309/https://semver.org/">Archived</a> from the original on June 28, 2022. Retrieved June 28, 2022.<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>&quot;<a href="https://github.com/google-github-actions/release-please-action">Release Please Action</a>&quot;. <a href="https://web.archive.org/web/20220628095655/https://github.com/google-github-actions/release-please-action">Archived</a> from the original on June 28, 2022. Retrieved June 28, 2022.<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>软件开发</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>GitHub</tag>
      
      <tag>VS Code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 约定式提交</title>
    <link href="/zh-CN/2022/06/ca740262a99f/"/>
    <url>/zh-CN/2022/06/ca740262a99f/</url>
    
    <content type="html"><![CDATA[<blockquote><p>约定式提交规范是一种基于提交信息的轻量级约定。它提供了一组简单规则来创建清晰的提交历史；这更有利于编写自动化工具。通过在提交信息中描述功能、修复和破坏性变更，使这种惯例与 <a href="https://semver.org/">SemVer</a> 相互对应。</p></blockquote><span id="more"></span><ul><li>自动化生成 CHANGELOG。</li><li>基于提交的类型，自动决定语义化的版本变更。</li><li>向同事、公众与其他利益关系者传达变化的性质。</li><li>触发构建和部署流程。</li><li>让人们探索一个更加结构化的提交历史，以便降低对你的项目做出贡献的难度。</li></ul><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><p><a href="https://www.conventionalcommits.org/en/v1.0.0/">约定式提交</a><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/). [2022-06-28].">[1]</span></a></sup> 规定了每一条 commit message 的格式：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;type&gt;[optional scope]: &lt;description&gt;<br><br>[optional body]<br><br>[optional footer(s)]<br></code></pre></td></tr></table></figure><h3 id="类型（type）"><a href="#类型（type）" class="headerlink" title="类型（type）"></a>类型（type）</h3><p>类型应当使用<strong>小写字母</strong>，不能为空，后接<strong>可选的</strong>范围字段和 <code>!</code>，以及<strong>必要的</strong>冒号和空格。</p><p>下为可用的类型列表：</p><ul><li><code>build</code></li><li><code>chore</code></li><li><code>ci</code></li><li><code>docs</code></li><li><code>feat</code></li><li><code>fix</code></li><li><code>perf</code></li><li><code>refactor</code></li><li><code>revert</code></li><li><code>style</code></li><li><code>test</code></li></ul><h3 id="范围（scope）"><a href="#范围（scope）" class="headerlink" title="范围（scope）"></a>范围（scope）</h3><p>范围字段<strong>可以</strong>跟随在类型字段后面。范围<strong>必须</strong>是一个描述某部分代码的名词，并用圆括号包围。</p><h3 id="描述（description）"><a href="#描述（description）" class="headerlink" title="描述（description）"></a>描述（description）</h3><p>对代码变更的简短总结，不能为空，结尾不写句号。</p><h3 id="正文（body）"><a href="#正文（body）" class="headerlink" title="正文（body）"></a>正文（body）</h3><p>在简短描述之后，<strong>可以</strong>编写较长的提交正文，为代码变更提供额外的上下文信息。<strong>正文</strong>必须起始于描述字段结束的一个空行后。</p><p>正文内容自由编写，并<strong>可以</strong>使用空行分隔不同段落。</p><h3 id="脚注（footer）"><a href="#脚注（footer）" class="headerlink" title="脚注（footer）"></a>脚注（footer）</h3><p>在正文结束的一个空行之后，<strong>可以</strong>编写一行或多行脚注。每行脚注都<strong>必须</strong>包含一个令牌（token），后面紧跟 <code>:&lt;space&gt;</code> 或 <code>&lt;space&gt;#</code> 作为分隔符，后面再紧跟令牌的值。</p><p>脚注的令牌<strong>必须</strong>使用 <code>-</code> 作为连字符，唯一的例外是 <code>BREAKING CHANGE</code>。</p><p>脚注的值<strong>可以</strong>包含空格和换行。</p><h3 id="SemVer-的影响"><a href="#SemVer-的影响" class="headerlink" title="SemVer 的影响"></a>SemVer 的影响</h3><p>有些提交类型对 <a href="https://semver.org/">SemVer</a> 的版本号有影响：</p><ol><li><strong>fix</strong> 表示修复了一个 bug，对应语义化版本的 <code>PATCH</code>。</li><li><strong>feat</strong> 表示新增了一个功能，对应语义化版本的 <code>MINOR</code>。</li><li><strong>BREAKING CHANGE</strong> 包含在脚注中，或类型&#x2F;范围后有一个 <code>!</code>，对应语义化版本的 <code>MAJOR</code>。</li></ol><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="Gitmoji"><a href="#Gitmoji" class="headerlink" title="Gitmoji"></a>Gitmoji</h3><p><a href="https://gitmoji.dev/">Gitmoji</a><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[gitmoji](https://gitmoji.dev/). [2022-06-28]. （原始内容[存档](https://web.archive.org/web/20220628095615/https://gitmoji.dev/)于2022-06-28）.">[2]</span></a></sup> 是一项旨在规范和解释在 GitHub 提交消息上使用表情符号的倡议。</p><h3 id="VS-Code-扩展"><a href="#VS-Code-扩展" class="headerlink" title="VS Code 扩展"></a>VS Code 扩展</h3><p>在 VS Code 中提交时，<a href="https://marketplace.visualstudio.com/items?itemName=vivaxy.vscode-conventional-commits">Conventional Commits</a><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Semantic Versioning](https://semver.org/). [2022-06-28]. （原始内容[存档](https://web.archive.org/web/20220628082309/https://semver.org/)于2022-06-28）.">[3]</span></a></sup> 扩展可以帮助生成提交信息。</p><p><img src="https://picture.zhanganzhi.com/2022/06/28/ap3xacu.png" alt="Conventional Commits 的界面"></p><h3 id="GitHub-Action"><a href="#GitHub-Action" class="headerlink" title="GitHub Action"></a>GitHub Action</h3><p><a href="https://github.com/google-github-actions/release-please-action">Release Please Action</a><sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Release Please Action](https://github.com/google-github-actions/release-please-action). [2022-06-28]. （原始内容[存档](https://web.archive.org/web/20220628095655/https://github.com/google-github-actions/release-please-action)于2022-06-28）.">[4]</span></a></sup> 是一个 GitHub Action，可以根据提交信息自动生成 CHANGELOG 和发布 Release。</p><p>Release Please Action 会自动创建发布 PR，包含生成的 CHANGELOG。当 PR 合并时，发布 Release，此时可以执行 CI&#x2F;CD，将文件上传到 Release 和发布。</p><p><img src="https://picture.zhanganzhi.com/2022/06/28/h8ihofj.png" alt="Release Please Action 创建的 PR"></p><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.conventionalcommits.org/en/v1.0.0/">Conventional Commits</a>. [2022-06-28].<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://gitmoji.dev/">gitmoji</a>. [2022-06-28]. （原始内容<a href="https://web.archive.org/web/20220628095615/https://gitmoji.dev/">存档</a>于2022-06-28）.<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://semver.org/">Semantic Versioning</a>. [2022-06-28]. （原始内容<a href="https://web.archive.org/web/20220628082309/https://semver.org/">存档</a>于2022-06-28）.<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://github.com/google-github-actions/release-please-action">Release Please Action</a>. [2022-06-28]. （原始内容<a href="https://web.archive.org/web/20220628095655/https://github.com/google-github-actions/release-please-action">存档</a>于2022-06-28）.<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>软件开发</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>GitHub</tag>
      
      <tag>VS Code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub Actions 自动部署 Hexo 博客</title>
    <link href="/zh-CN/2022/06/0800d76d306e/"/>
    <url>/zh-CN/2022/06/0800d76d306e/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Hexo 官方文档的 <a href="https://pages.github.com/">GitHub Pages</a> 部署方案<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[将 Hexo 部署到 GitHub Pages](https://hexo.io/zh-cn/docs/github-pages). Hexo. 2022-06-11 [2022-06-17]. （原始内容[存档](https://web.archive.org/web/20220617122944/https://hexo.io/zh-cn/docs/github-pages)于2022-06-17）.">[1]</span></a></sup>需要注册第三方账号且绑定信用卡，所以创建博客时选择了一键部署<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[部署](https://hexo.io/zh-cn/docs/one-command-deployment). Hexo. 2022-06-11 [2022-06-17]. （原始内容[存档](https://web.archive.org/web/20220617122947/https://hexo.io/zh-cn/docs/one-command-deployment)于2022-06-17）.">[2]</span></a></sup>的方案，但是需要手动使用 <code>hexo clean &amp;&amp; hexo d</code> 部署博客，有些麻烦，于是决定改为 GitHub Actions 自动部署。</p></blockquote><span id="more"></span><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>分别设置博客仓库和部署仓库，部署仓库为 <a href="https://pages.github.com/">GitHub Pages</a>。</p><h2 id="配置-SSH"><a href="#配置-SSH" class="headerlink" title="配置 SSH"></a>配置 SSH</h2><p>在本地生成一对 SSH 密钥，注意更改文件名避免将正在使用的密钥覆盖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>在<strong>博客仓库</strong>的 <code>Settings -&gt; Secrets -&gt; Actions</code> 中添加 SSH <strong>私钥</strong>，命名为 <code>SSH_DEPLOY_KEY</code>。</p><p><img src="https://picture.zhanganzhi.com/2022/06/19/011b4r1.png" alt="添加私钥"></p><p>在<strong>部署仓库</strong>的 <code>Settings -&gt; Deploy keys</code> 中添加 SSH <strong>公钥</strong>，注意勾选 <code>Allow write access</code>。</p><p><img src="https://picture.zhanganzhi.com/2022/06/19/ui72xts.png" alt="添加公钥"></p><p><img src="https://picture.zhanganzhi.com/2022/06/19/ktzdikp.png" alt="勾选 Allow write access"></p><h2 id="配置-hexo-deployer-git"><a href="#配置-hexo-deployer-git" class="headerlink" title="配置 hexo-deployer-git"></a>配置 hexo-deployer-git</h2><p>安装 <code>hexo-deployer-git</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git<br></code></pre></td></tr></table></figure><p>然后在 <code>_config.yml</code> 中添加以下内容<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[部署](https://hexo.io/zh-cn/docs/one-command-deployment). Hexo. 2022-06-11 [2022-06-17]. （原始内容[存档](https://web.archive.org/web/20220617122947/https://hexo.io/zh-cn/docs/one-command-deployment)于2022-06-17）.">[2]</span></a></sup>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">&#x27;git&#x27;</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:Username/Repository</span><br></code></pre></td></tr></table></figure><h2 id="编写-Workflow"><a href="#编写-Workflow" class="headerlink" title="编写 Workflow"></a>编写 Workflow</h2><p>创建 <code>.github/workflows/deployment.yml</code>，写入以下内容，注意修改仓库地址和 Git 配置。此时当 <code>push</code> 到博客仓库时，GitHub Actions 将会自动部署。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">on:</span> <span class="hljs-string">push</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">deployment:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Deployment</span><br><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Check</span> <span class="hljs-string">Out</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Clone</span> <span class="hljs-string">Repo</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">repository:</span> <span class="hljs-string">Username/Repository</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">.deploy_git</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-number">16</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Git</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          git config --global user.name &quot;Example&quot;</span><br><span class="hljs-string">          git config --global user.email &quot;email@example.com&quot;</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">SSH</span> <span class="hljs-string">Key</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          mkdir -p ~/.ssh</span><br><span class="hljs-string">          echo &quot;$&#123;&#123; secrets.SSH_DEPLOY_KEY &#125;&#125;&quot; &gt; ~/.ssh/id_ed25519</span><br><span class="hljs-string">          chmod 600 ~/.ssh/id_ed25519</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          npm install --location=global hexo-cli</span><br><span class="hljs-string">          npm install</span><br><span class="hljs-string">          hexo d</span><br></code></pre></td></tr></table></figure><h2 id="Workflow-解析"><a href="#Workflow-解析" class="headerlink" title="Workflow 解析"></a>Workflow 解析</h2><p>两个 Checkout 的作用是切换到博客仓库最新提交，并且将部署仓库克隆到 <code>.deploy_git</code>，也就是 Hexo 的部署目录。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Check</span> <span class="hljs-string">Out</span><br>    <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Clone</span> <span class="hljs-string">Repo</span><br>  <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>  <span class="hljs-attr">with:</span><br>   <span class="hljs-attr">repository:</span> <span class="hljs-string">Username/Repository</span><br>   <span class="hljs-attr">path:</span> <span class="hljs-string">.deploy_git</span><br></code></pre></td></tr></table></figure><p>下一步安装 Node，版本需要与博客使用的版本相同。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node</span><br>  <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v3</span><br>  <span class="hljs-attr">with:</span><br>    <span class="hljs-attr">node-version:</span> <span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><p>设置提交的用户名和邮箱。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Git</span><br>  <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    git config --global user.name &quot;Example&quot;</span><br><span class="hljs-string">    git config --global user.email &quot;email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>将存储在仓库 Secrets 的 SSH 私钥存储到本地供 Git 使用。<code>mkdir</code> 是为了下一步可以在 <code>~/.ssh</code> 目录中创建文件，<code>chmod</code> 设置权限，Git 才能使用私钥<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[利用 Github Actions 自动部署 Hexo 博客](https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/). Sanonz. 2020-05-12 [2022-06-17]. （原始内容[存档](https://web.archive.org/web/20210618140206/https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/)于2021-06-18）.">[3]</span></a></sup>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">SSH</span> <span class="hljs-string">Key</span><br>  <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    mkdir -p ~/.ssh</span><br><span class="hljs-string">    echo &quot;$&#123;&#123; secrets.SSH_DEPLOY_KEY &#125;&#125;&quot; &gt; ~/.ssh/id_ed25519</span><br><span class="hljs-string">    chmod 600 ~/.ssh/id_ed25519</span><br></code></pre></td></tr></table></figure><p>最后安装 Hexo 和依赖，运行 <code>hexo d</code> 部署博客。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span><br>  <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    npm install --location=global hexo-cli</span><br><span class="hljs-string">    npm install</span><br><span class="hljs-string">    hexo d</span><br></code></pre></td></tr></table></figure><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/github-pages">将 Hexo 部署到 GitHub Pages</a>. Hexo. 2022-06-11 [2022-06-17]. （原始内容<a href="https://web.archive.org/web/20220617122944/https://hexo.io/zh-cn/docs/github-pages">存档</a>于2022-06-17）.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/one-command-deployment">部署</a>. Hexo. 2022-06-11 [2022-06-17]. （原始内容<a href="https://web.archive.org/web/20220617122947/https://hexo.io/zh-cn/docs/one-command-deployment">存档</a>于2022-06-17）.<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/">利用 Github Actions 自动部署 Hexo 博客</a>. Sanonz. 2020-05-12 [2022-06-17]. （原始内容<a href="https://web.archive.org/web/20210618140206/https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/">存档</a>于2021-06-18）.<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>经验分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
      <tag>博客</tag>
      
      <tag>自动部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CurseForge Modpack Downloader Tutorial</title>
    <link href="/en/2022/06/7b049d0aa9ff/"/>
    <url>/en/2022/06/7b049d0aa9ff/</url>
    
    <content type="html"><![CDATA[<blockquote><p>On May 16, 2022, CurseForge released the official API. This result in third-party launchers no longer to download modpacks, like MultiMC and PCL2. More info can be found in <a href="https://medium.com/overwolf/the-curseforge-official-api-is-now-live-d314606355c2">“The CurseForge Official API is Now Live”</a><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Moran Weiss. &quot;[The CurseForge Official API is Now Live](https://medium.com/overwolf/the-curseforge-official-api-is-now-live-d314606355c2)&quot;. Overwolf Blog. May 16, 2022. [Archived](https://web.archive.org/web/20220608151743/https://medium.com/overwolf/the-curseforge-official-api-is-now-live-d314606355c2) from the original on June 8, 2022. Retrieved May 23, 2022.">[1]</span></a></sup>.</p></blockquote><span id="more"></span><p>Therefore, I made a software <a href="https://github.com/AnzhiZhang/CurseForgeModpackDownloader">CurseForge Modpack Downloader</a> (CMPDL). It could download mods for modpack downloaded from CurseForge, an pack to the format that is supported by launchers like MultiMC, HMCL, and PCL2.</p><p>At this moment, they say HMCL and PCL2 can download again, but obviously, it is not in the official method. MMC’s author said he has may support the API Key of CurseForge to downlaod<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="phit. &quot;[Looks like CurseForge API in MultiMC is deprecated and unusable](https://github.com/MultiMC/Launcher/issues/4716#issuecomment-1135498404)&quot;. GitHub. May 24, 2022. [Archived](https://web.archive.org/web/20220608152954/https://github.com/MultiMC/Launcher/issues/4716) from the original on June 8, 2022. Retrieved May 26, 2022.">[2]</span></a></sup>.</p><p>Today (July 2023), I recommend using <a href="https://prismlauncher.org/">Prism Launcher</a> instead of MMC, which is an forked version of MMC and supports package downloads from CourseForge and more useful features.  There is no migration cost and you just need to set up the same instance directory as MMC.</p><h2 id="Download-Program"><a href="#Download-Program" class="headerlink" title="Download Program"></a>Download Program</h2><p>Open the <a href="https://github.com/AnzhiZhang/CurseForgeModpackDownloader">repository</a>, and download the newest version on the right side. You also could click <a href="https://github.com/AnzhiZhang/CurseForgeModpackDownloader/releases/latest">here</a> to go to the newest release.</p><p><img src="https://picture.zhanganzhi.com/2022/07/02/stjqlmi.png" alt="Find Releases"></p><p><img src="https://picture.zhanganzhi.com/2022/07/02/bp3dzql.png" alt="Download the first one in Assets"></p><h2 id="Download-Modpack"><a href="#Download-Modpack" class="headerlink" title="Download Modpack"></a>Download Modpack</h2><p>There are two ways to download modpacks: direct download in program or import.</p><h3 id="Direct-Download-in-CMPDL"><a href="#Direct-Download-in-CMPDL" class="headerlink" title="Direct Download in CMPDL"></a>Direct Download in CMPDL</h3><p>You could find modpacks in the list.</p><p><img src="https://picture.zhanganzhi.com/2022/07/02/l7f94y7.png" alt="Select a modpack"></p><p><img src="https://picture.zhanganzhi.com/2022/07/02/1uo8z0g.png" alt="Entry keywords at the top to search"></p><p><img src="https://picture.zhanganzhi.com/2022/07/02/mptddvj.png" alt="Change sort"></p><p><img src="https://picture.zhanganzhi.com/2022/07/02/b5o9rnr.png" alt="Filter game version"></p><p>After selecting a modpack, you could choose the modpack version at the bottom right.</p><p><img src="https://picture.zhanganzhi.com/2022/06/19/2defdt2.png" alt="Choose modpack version"></p><p><img src="https://picture.zhanganzhi.com/2022/07/02/ldo9vkm.png" alt="Click download and wait for the downloading"></p><h3 id="Use-CurseForge-Download-and-Import"><a href="#Use-CurseForge-Download-and-Import" class="headerlink" title="Use CurseForge Download and Import"></a>Use CurseForge Download and Import</h3><p>Find moodpack your like on CourseForge and download modpack file, I will use Restrict Skyblock for example.</p><p><img src="https://picture.zhanganzhi.com/2022/06/19/7jqy8d1.png" alt="Go to Files"></p><p><img src="https://picture.zhanganzhi.com/2022/06/19/0lwxnnf.png" alt="Choose modpack version"></p><p><img src="https://picture.zhanganzhi.com/2022/06/19/4lgr1mb.png" alt="Click Download"></p><p><img src="https://picture.zhanganzhi.com/2022/07/02/ebln9qo.png" alt="Click Import"></p><p><img src="https://picture.zhanganzhi.com/2022/06/19/teu0gwf.png" alt="Select the file downloaded from CurseForge"></p><p><img src="https://picture.zhanganzhi.com/2022/07/02/yg7seuc.png" alt="Wait for the downloading"></p><h2 id="Import-to-Launcher"><a href="#Import-to-Launcher" class="headerlink" title="Import to Launcher"></a>Import to Launcher</h2><p>Wait for the downloading to finish and pop this prompt. Import the zip file (located at the program path, if imported from a specific file, it is the original path) into your launcher.</p><p><img src="https://picture.zhanganzhi.com/2022/07/02/wps5n6s.png" alt="Prompt of finished"></p><p><img src="https://picture.zhanganzhi.com/2022/06/19/r1o164g.png" alt="Import to MultiMC"></p><h2 id="Get-CurseForge-API-Key"><a href="#Get-CurseForge-API-Key" class="headerlink" title="Get CurseForge API Key"></a>Get CurseForge API Key</h2><p>Go to <a href="https://console.curseforge.com/">https://console.curseforge.com/</a> and sign up with Google.</p><p><img src="https://picture.zhanganzhi.com/2022/06/27/4shwhrw.png" alt="Only allowed Google"></p><p><img src="https://picture.zhanganzhi.com/2022/06/27/n854m6c.png" alt="Copy in API Keys"></p><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Moran Weiss. &quot;<a href="https://medium.com/overwolf/the-curseforge-official-api-is-now-live-d314606355c2">The CurseForge Official API is Now Live</a>&quot;. Overwolf Blog. May 16, 2022. <a href="https://web.archive.org/web/20220608151743/https://medium.com/overwolf/the-curseforge-official-api-is-now-live-d314606355c2">Archived</a> from the original on June 8, 2022. Retrieved May 23, 2022.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>phit. &quot;<a href="https://github.com/MultiMC/Launcher/issues/4716#issuecomment-1135498404">Looks like CurseForge API in MultiMC is deprecated and unusable</a>&quot;. GitHub. May 24, 2022. <a href="https://web.archive.org/web/20220608152954/https://github.com/MultiMC/Launcher/issues/4716">Archived</a> from the original on June 8, 2022. Retrieved May 26, 2022.<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Minecraft</category>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Minecraft</tag>
      
      <tag>整合包</tag>
      
      <tag>CurseForge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CurseForge 整合包下载器教程</title>
    <link href="/zh-CN/2022/06/7b049d0aa9ff/"/>
    <url>/zh-CN/2022/06/7b049d0aa9ff/</url>
    
    <content type="html"><![CDATA[<blockquote><p>2022年5月16日，CurseForge 发布了官方 API，同时弃用了旧的 API，这导致第三方启动器无法下载，如 MultiMC 和 PCL2。具体原因和详细情况在 <a href="https://medium.com/overwolf/the-curseforge-official-api-is-now-live-d314606355c2">《The CurseForge Official API is Now Live》</a><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Moran Weiss. [The CurseForge Official API is Now Live](https://medium.com/overwolf/the-curseforge-official-api-is-now-live-d314606355c2). Overwolf Blog. 2022-05-16 [2022-05-23]. （原始内容[存档](https://web.archive.org/web/20220608151743/https://medium.com/overwolf/the-curseforge-official-api-is-now-live-d314606355c2)于2022-06-08）.">[1]</span></a></sup> 中有详细说明。</p></blockquote><span id="more"></span><p>因此，我制作了一个软件 <a href="https://github.com/AnzhiZhang/CurseForgeModpackDownloader">CurseForge Modpack Downloader</a> (CMPDL)，可以将 CurseForge 下载的整合包补全文件，制作为启动器支持的格式。目前已测试支持的启动器列表为：MultiMC，HMCL 和 PCL2。</p><p>当前，据说 HMCL 和 PCL2 已重新支持下载，但显然不是官方认可的方式。MMC 作者表示没有短期支持的计划，长期可能支持 API Key 的方式<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="phit. [Looks like CurseForge API in MultiMC is deprecated and unusable](https://github.com/MultiMC/Launcher/issues/4716#issuecomment-1135498404). GitHub. 2022-05-24 [2022-05-26]. （原始内容[存档](https://web.archive.org/web/20220608152954/https://github.com/MultiMC/Launcher/issues/4716)于2022-06-08）.">[2]</span></a></sup>。</p><p>今天（2023年7月），我建议使用 <a href="https://prismlauncher.org/">Prism Launcher</a> 来替代 MMC，这是 MMC 的分支版本，且支持 CourseForge 整合包下载及更多实用功能。使用它没有任何迁移成本，您只需要设置与 MMC 相同的实例目录即可。</p><h2 id="下载程序"><a href="#下载程序" class="headerlink" title="下载程序"></a>下载程序</h2><p>打开 <a href="https://github.com/AnzhiZhang/CurseForgeModpackDownloader">程序仓库</a>，在右侧的 Releases 下载最新版。您也可以点击 <a href="https://github.com/AnzhiZhang/CurseForgeModpackDownloader/releases/latest">这里</a> 直接前往最新版</p><p><img src="https://picture.zhanganzhi.com/2022/07/02/stjqlmi.png" alt="找到 Releases"></p><p><img src="https://picture.zhanganzhi.com/2022/07/02/bp3dzql.png" alt="下载 Assets 的第一个"></p><h2 id="下载整合包"><a href="#下载整合包" class="headerlink" title="下载整合包"></a>下载整合包</h2><p>共有两种方式下载整合包：直接在程序内下载或导入。</p><h3 id="直接使用-CMPDL-下载"><a href="#直接使用-CMPDL-下载" class="headerlink" title="直接使用 CMPDL 下载"></a>直接使用 CMPDL 下载</h3><p>在中间的列表可以直接选择整合包。</p><p><img src="https://picture.zhanganzhi.com/2022/06/19/lqfefxc.png" alt="选择整合包"></p><p><img src="https://picture.zhanganzhi.com/2022/06/19/wxp7lxf.png" alt="在上方输入关键词搜索"></p><p><img src="https://picture.zhanganzhi.com/2022/06/19/fy60yqf.png" alt="修改排序方式"></p><p><img src="https://picture.zhanganzhi.com/2022/06/19/4kir4gd.png" alt="筛选游戏版本"></p><p>选择整合包后，可以在右下方选择整合包版本。</p><p><img src="https://picture.zhanganzhi.com/2022/06/19/2defdt2.png" alt="选择整合包版本"></p><p><img src="https://picture.zhanganzhi.com/2022/06/19/mm9ulsp.png" alt="点击下载并等待完成"></p><h3 id="使用-CurseForge-下载并导入"><a href="#使用-CurseForge-下载并导入" class="headerlink" title="使用 CurseForge 下载并导入"></a>使用 CurseForge 下载并导入</h3><p>在 CourseForge 上找到喜欢的整合包，下载整合包文件，此处以 Restrict Skyblock 为例</p><p><img src="https://picture.zhanganzhi.com/2022/06/19/7jqy8d1.png" alt="打开 Files"></p><p><img src="https://picture.zhanganzhi.com/2022/06/19/0lwxnnf.png" alt="选择整合包版本"></p><p><img src="https://picture.zhanganzhi.com/2022/06/19/4lgr1mb.png" alt="点击 Download 下载"></p><p><img src="https://picture.zhanganzhi.com/2022/06/19/w0x17uf.png" alt="点击导入"></p><p><img src="https://picture.zhanganzhi.com/2022/06/19/teu0gwf.png" alt="选择从 CurseForge 下载的文件"></p><p><img src="https://picture.zhanganzhi.com/2022/06/19/l3mkqq6.png" alt="等待下载完成"></p><h2 id="导入启动器"><a href="#导入启动器" class="headerlink" title="导入启动器"></a>导入启动器</h2><p>等待下载完成弹出下图提示。将压缩包（位于软件目录，如果是导入即为原路径）导入启动器即可。</p><p><img src="https://picture.zhanganzhi.com/2022/06/19/6cpt62r.png" alt="提示下载完成"></p><p><img src="https://picture.zhanganzhi.com/2022/06/19/r1o164g.png" alt="导入 MultiMC"></p><h2 id="CurseForge-API-Key-获取方式"><a href="#CurseForge-API-Key-获取方式" class="headerlink" title="CurseForge API Key 获取方式"></a>CurseForge API Key 获取方式</h2><p>在 <a href="https://console.curseforge.com/">https://console.curseforge.com/</a>，使用 Google 注册。</p><p><img src="https://picture.zhanganzhi.com/2022/06/27/4shwhrw.png" alt="仅支持 Google 登录"></p><p><img src="https://picture.zhanganzhi.com/2022/06/27/n854m6c.png" alt="在 API Keys 中复制"></p><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Moran Weiss. <a href="https://medium.com/overwolf/the-curseforge-official-api-is-now-live-d314606355c2">The CurseForge Official API is Now Live</a>. Overwolf Blog. 2022-05-16 [2022-05-23]. （原始内容<a href="https://web.archive.org/web/20220608151743/https://medium.com/overwolf/the-curseforge-official-api-is-now-live-d314606355c2">存档</a>于2022-06-08）.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>phit. <a href="https://github.com/MultiMC/Launcher/issues/4716#issuecomment-1135498404">Looks like CurseForge API in MultiMC is deprecated and unusable</a>. GitHub. 2022-05-24 [2022-05-26]. （原始内容<a href="https://web.archive.org/web/20220608152954/https://github.com/MultiMC/Launcher/issues/4716">存档</a>于2022-06-08）.<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Minecraft</category>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Minecraft</tag>
      
      <tag>整合包</tag>
      
      <tag>CurseForge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GPG 入门教程</title>
    <link href="/zh-CN/2022/06/1c71f69657ed/"/>
    <url>/zh-CN/2022/06/1c71f69657ed/</url>
    
    <content type="html"><![CDATA[<h2 id="简介和概念"><a href="#简介和概念" class="headerlink" title="简介和概念"></a>简介和概念</h2><p>完整的官方文档可在 <a href="https://www.gnupg.org/">官网</a> 阅读。</p><blockquote><p>GNU Privacy Guard（GnuPG 或 GPG）是一个密码学软件，用于加密、签名通信内容及管理非对称密码学的密钥。GnuPG 是自由软件，遵循 IETF 订定的 OpenPGP 技术标准设计，并与 PGP 保持兼容。</p></blockquote><p>GPG 有许多用途，包括文件和邮件加密、签名、Git 提交签名等。</p><p><img src="https://picture.zhanganzhi.com/2022/06/19/2hq6kjy.png" alt="经过 GPG 签名的提交可以在 GitHub 显示绿色的 Verified&lt;sup id=&quot;fnref:1&quot; class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--rounded&quot; aria-label=&quot;[About commit signature verification](https://docs.github.com/en/authentication/managing-commit-signature-verification/about-commit-signature-verification). GitHub Docs. [2022-06-06]. （原始内容[存档](https://web.archive.org/web/20220606095245/https://docs.github.com/en/authentication/managing-commit-signature-verification/about-commit-signature-verification)于2022-06-06）&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;"></p><p>以下概念建议先浏览一遍，操作后再回来看一遍，可以更好理解。</p><h3 id="主密钥（Primary-Key）和子密钥（Subkey）"><a href="#主密钥（Primary-Key）和子密钥（Subkey）" class="headerlink" title="主密钥（Primary Key）和子密钥（Subkey）"></a>主密钥（Primary Key）和子密钥（Subkey）</h3><p>类似证书的根证书结构，GPG 密钥分为主密钥和子密钥。</p><p><img src="https://picture.zhanganzhi.com/2022/06/19/jgoxt42.png" alt="主密钥和子密钥的关系&lt;sup id=&quot;fnref:5&quot; class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn:5&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--rounded&quot; aria-label=&quot;嗯了个踢. [简明 GPG 概念](https://zhuanlan.zhihu.com/p/137801979). 知乎. 2020-05-02 [2022-06-06]. （原始内容[存档](https://web.archive.org/save/https://zhuanlan.zhihu.com/p/137801979)于2022-06-06）&quot;&gt;[5]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;"></p><p>子密钥虽然有自己的公钥，但是实际使用导出的是一组公钥，发布这一个公钥即可认证所有子密钥。所有的变更都是通过这个公钥发布的，比如 UID 的更改、子密钥的新增或撤销等。</p><h3 id="密钥类型"><a href="#密钥类型" class="headerlink" title="密钥类型"></a>密钥类型</h3><p>共有四种类型的密钥，对应的缩写<sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><span class="hint--top hint--rounded" aria-label="UlyC. [2021年，用更现代的方法使用PGP（上）](https://ulyc.github.io/2021/01/13/2021%E5%B9%B4-%E7%94%A8%E6%9B%B4%E7%8E%B0%E4%BB%A3%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8PGP-%E4%B8%8A/). UlyC - C的博客. 2021-01-13 [2022-06-06]. （原始内容[存档](https://web.archive.org/web/20220606133111/https://ulyc.github.io/2021/01/13/2021%E5%B9%B4-%E7%94%A8%E6%9B%B4%E7%8E%B0%E4%BB%A3%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8PGP-%E4%B8%8A/)于2022-06-06）">[8]</span></a></sup>如下：</p><table><thead><tr><th>类型</th><th>全名</th><th>缩写</th></tr></thead><tbody><tr><td>主公钥</td><td>Public Key</td><td>pub</td></tr><tr><td>子公钥</td><td>Public Subkey</td><td>sub</td></tr><tr><td>主私钥</td><td>Secret Key</td><td>sec</td></tr><tr><td>子私钥</td><td>Secret Subkey</td><td>ssb</td></tr></tbody></table><h3 id="用途（Usage）"><a href="#用途（Usage）" class="headerlink" title="用途（Usage）"></a>用途（Usage）</h3><p>每个密钥可以用不同的用途，下表是不同用途的含义：</p><table><thead><tr><th>缩写</th><th>全名</th><th>用途</th></tr></thead><tbody><tr><td>C</td><td>Certificating</td><td>认证，如子密钥或证书，类似根证书的作用。</td></tr><tr><td>S</td><td>Signing</td><td>签名，如文件数字签名、邮件签名、Git 提交。</td></tr><tr><td>A</td><td>Authenticating</td><td>身份验证，如登录。</td></tr><tr><td>E</td><td>Encrypting</td><td>加密，如文件和文本。</td></tr></tbody></table><p>具有 <code>C</code> 的密钥是主密钥，只有这个密钥可以用于：</p><ul><li>添加或撤销子密钥的用途</li><li>添加、更改或撤销密钥关联的身份（UID）</li><li>添加或更改本身或其他子密钥的到期时间</li><li>为了网络信任目的为其它密钥签名<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="Konstantin Ryabitsev. [用 PGP 保护代码完整性（二）：生成你的主密钥](https://linux.cn/article-9529-1.html). Linux 中国. 2018-04-09 [2022-06-06].">[7]</span></a></sup></li></ul><h3 id="用户-ID（User-ID）"><a href="#用户-ID（User-ID）" class="headerlink" title="用户 ID（User ID）"></a>用户 ID（User ID）</h3><p>用户 ID 用于将密钥和真人关联，可以有多个 UID，一般为以下格式：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">Name &lt;name@example.com&gt;<br></code></pre></td></tr></table></figure><p>如果使用多个身份，比如个人邮箱、 GitHub 账号、公司邮箱<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="Konstantin Ryabitsev. [用 PGP 保护代码完整性（一）： 基本概念和工具](https://linux.cn/article-9524-1.html). Linux 中国. 2018-04-08 [2022-06-06].">[6]</span></a></sup>，可以设置为这样：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">Name &lt;name@example.com&gt;<br>Name(GitHub) &lt;name@users.noreply.github.com&gt;<br>Name(Work) &lt;name@work.com&gt;<br></code></pre></td></tr></table></figure><p>需要注意公钥会包含电子邮件地址，注意隐私和垃圾邮件问题。</p><h3 id="密钥-ID（Key-ID）"><a href="#密钥-ID（Key-ID）" class="headerlink" title="密钥 ID（Key ID）"></a>密钥 ID（Key ID）</h3><p>每一个密钥 ID（Key ID）有三种形式，指定密钥的最好方式就是使用指纹，可以最大限度避免重复的 ID：</p><ul><li>指纹：证书的 SHA-1 哈希，20 字节；</li><li>长 ID：指纹的最后 16 位，8 字节；</li><li>短 ID：指纹的最后 8 位，4 字节；</li></ul><h3 id="过期（Expire）和撤销（Revoke）"><a href="#过期（Expire）和撤销（Revoke）" class="headerlink" title="过期（Expire）和撤销（Revoke）"></a>过期（Expire）和撤销（Revoke）</h3><p>GPG 密钥可以设置过期时间，可以是永久有效。很多人会给主密钥设置长期有效，对不同用途的子密钥设置较短的期限。</p><p>GPG 可以发布撤销证书，发布撤销证书后，其他人收到后就知道之前发布的密钥失效了。</p><h2 id="安装-GPG"><a href="#安装-GPG" class="headerlink" title="安装 GPG"></a>安装 GPG</h2><p>如果安装了 <a href="https://git-scm.com/">Git</a>，可直接使用 Git Bash。</p><p>也可以到 <a href="https://www.gnupg.org/download/">官网</a> 下载安装。</p><h2 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpg --full-gen-key<br></code></pre></td></tr></table></figure><p>选择加密类型，推荐 RSA 4096。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs console">Please select what kind of key you want:<br>   (1) RSA and RSA (default)<br>   (2) DSA and Elgamal<br>   (3) DSA (sign only)<br>   (4) RSA (sign only)<br>  (14) Existing key from card<br>Your selection? 1<br>RSA keys may be between 1024 and 4096 bits long.<br>What keysize do you want? (3072) 4096<br>Requested keysize is 4096 bits<br></code></pre></td></tr></table></figure><p>设置过期时间，<code>0</code> 为永久。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs console">Please specify how long the key should be valid.<br>         0 = key does not expire<br>      &lt;n&gt;  = key expires in n days<br>      &lt;n&gt;w = key expires in n weeks<br>      &lt;n&gt;m = key expires in n months<br>      &lt;n&gt;y = key expires in n years<br>Key is valid for? (0)<br>Key does not expire at all<br>Is this correct? (y/N) y<br></code></pre></td></tr></table></figure><p>根据提示输入姓名和邮箱，<code>Comment</code> 留空即可，然后设置密钥的密码。密码用于对称加密本地存储的私钥，在文件泄露的情况下也能保护你的密钥，在使用 GPG 密钥时经常需要输入密码以验证身份。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs console">GnuPG needs to construct a user ID to identify your key.<br><br>Real name: Name<br>Email address: name@example.com<br>Comment:<br>You selected this USER-ID:<br>    &quot;Name &lt;name@example.com&gt;&quot;<br><br>Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o<br></code></pre></td></tr></table></figure><p><img src="https://picture.zhanganzhi.com/2022/06/19/h6k7ui1.png" alt="设置密码"></p><p>同时会自动生成一个用途为 <code>E</code> 的子密钥，生成的密钥将会列出。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs console">public and secret key created and signed.<br><br>pub   rsa4096 2022-06-06 [SC]<br>      5DE3E0509C47EA3CF04A42D34AEE18F83AFDEB23<br>uid                      Name &lt;name@example.com&gt;<br>sub   rsa4096 2022-06-06 [E]<br></code></pre></td></tr></table></figure><h3 id="生成子密钥"><a href="#生成子密钥" class="headerlink" title="生成子密钥"></a>生成子密钥</h3><p><strong>在日常使用中，应当避免使用主密钥，而是为不同用途使用不同的子密钥。</strong><sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><span class="hint--top hint--rounded" aria-label="UlyC. [2021年，用更现代的方法使用PGP（上）](https://ulyc.github.io/2021/01/13/2021%E5%B9%B4-%E7%94%A8%E6%9B%B4%E7%8E%B0%E4%BB%A3%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8PGP-%E4%B8%8A/). UlyC - C的博客. 2021-01-13 [2022-06-06]. （原始内容[存档](https://web.archive.org/web/20220606133111/https://ulyc.github.io/2021/01/13/2021%E5%B9%B4-%E7%94%A8%E6%9B%B4%E7%8E%B0%E4%BB%A3%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8PGP-%E4%B8%8A/)于2022-06-06）">[8]</span></a></sup></p><p>进入密钥的编辑，参数为上一步输出的密钥指纹。加上 <code>--expert</code> 参数以在下一步使用 <a href="https://zh.wikipedia.org/wiki/Curve25519">Curve 25519</a> 算法生成子密钥<sup id="fnref:9" class="footnote-ref"><a href="#fn:9" rel="footnote"><span class="hint--top hint--rounded" aria-label="UlyC. [2021年，用更现代的方法使用PGP（中）](https://ulyc.github.io/2021/01/18/2021%E5%B9%B4-%E7%94%A8%E6%9B%B4%E7%8E%B0%E4%BB%A3%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8PGP-%E4%B8%AD/). UlyC - C的博客. 2021-01-18 [2022-06-06]. （原始内容[存档](https://web.archive.org/web/20220606133131/https://ulyc.github.io/2021/01/18/2021%E5%B9%B4-%E7%94%A8%E6%9B%B4%E7%8E%B0%E4%BB%A3%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8PGP-%E4%B8%AD/)于2022-06-06）">[9]</span></a></sup>，这是一种安全性介于 RSA 2048 和 RSA 4096 之间的算法，且速度更快。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpg --expert --edit-key 5DE3E0509C47EA3CF04A42D34AEE18F83AFDEB23<br></code></pre></td></tr></table></figure><p>使用 <code>addkey</code> 添加子密钥，根据提示选择、输入密码、保存更改。</p><p>注意不同用途的子密钥可能需要选择不同的加密方式。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">gpg&gt; </span><span class="language-bash">addkey</span><br>Please select what kind of key you want:<br>   (3) DSA (sign only)<br>   (4) RSA (sign only)<br>   (5) Elgamal (encrypt only)<br>   (6) RSA (encrypt only)<br>   (7) DSA (set your own capabilities)<br>   (8) RSA (set your own capabilities)<br>  (10) ECC (sign only)<br>  (11) ECC (set your own capabilities)<br>  (12) ECC (encrypt only)<br>  (13) Existing key<br>  (14) Existing key from card<br>Your selection? 10<br>Please select which elliptic curve you want:<br>   (1) Curve 25519<br>   (3) NIST P-256<br>   (4) NIST P-384<br>   (5) NIST P-521<br>   (6) Brainpool P-256<br>   (7) Brainpool P-384<br>   (8) Brainpool P-512<br>   (9) secp256k1<br>Your selection? 1<br>Please specify how long the key should be valid.<br>         0 = key does not expire<br>      &lt;n&gt;  = key expires in n days<br>      &lt;n&gt;w = key expires in n weeks<br>      &lt;n&gt;m = key expires in n months<br>      &lt;n&gt;y = key expires in n years<br>Key is valid for? (0)<br>Key does not expire at all<br>Is this correct? (y/N) y<br>Really create? (y/N) y<br></code></pre></td></tr></table></figure><p>在弹出的对话框输入密码。生成完成后保存。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">gpg&gt; </span><span class="language-bash">save</span><br></code></pre></td></tr></table></figure><h3 id="撤销证书"><a href="#撤销证书" class="headerlink" title="撤销证书"></a>撤销证书</h3><p>默认情况下生成密钥后会在用户文件夹内的 <code>.gnupg\openpgp-revocs.d</code> 生成一份撤销证书，也可以使用 <code>gpg --output revoke.asc --gen-revoke mykey</code> 生成一份。</p><h2 id="管理密钥"><a href="#管理密钥" class="headerlink" title="管理密钥"></a>管理密钥</h2><h3 id="列出密钥"><a href="#列出密钥" class="headerlink" title="列出密钥"></a>列出密钥</h3><p>使用 <code>gpg --list-keys</code> 即可列出本地所有公钥和子公钥，还有一个简便写法：<code>gpg -k</code>。</p><p>私钥类似，<code>gpg --list-secret-keys</code> 和 <code>gpg -K</code>。</p><hr><p>我们在本地使用时，长 ID 和短 ID 更方便，使用 <code>--keyid-format &#123;none|short|0xshort|long|0xlong&#125;</code> 即可输出长 ID 或短 ID：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">gpg -k --keyid-format short</span><br>~/.gnupg/pubring.kbx<br>---------------------------------<br>pub   rsa2048/3AFDEB23 2017-08-16 [SC]<br>      5DE3E0509C47EA3CF04A42D34AEE18F83AFDEB23<br>uid         [ultimate] GitHub (web-flow commit signing) &lt;noreply@github.com&gt;<br></code></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">gpg -k --keyid-format long</span><br>~/.gnupg/pubring.kbx<br>---------------------------------<br>pub   rsa2048/4AEE18F83AFDEB23 2017-08-16 [SC]<br>      5DE3E0509C47EA3CF04A42D34AEE18F83AFDEB23<br>uid                 [ultimate] GitHub (web-flow commit signing) &lt;noreply@github.com&gt;<br></code></pre></td></tr></table></figure><p>默认情况下会输出连续的 20 字节指纹，例如 <code>5DE3E0509C47EA3CF04A42D34AEE18F83AFDEB23</code>。使用 <code>--fingerprint</code> 参数可输出有空格分隔的指纹，例如 <code>5DE3 E050 9C47 EA3C F04A  42D3 4AEE 18F8 3AFD EB23</code>。</p><p>以上两个参数可以在配置文件 <code>~/.gnupg/gpg.conf</code> 中添加以避免重复输入，文件需要手动创建。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">keyid-format long<br>fingerprint<br></code></pre></td></tr></table></figure><h3 id="导入和导出"><a href="#导入和导出" class="headerlink" title="导入和导出"></a>导入和导出</h3><p>使用 <code>gpg --import key.gpg</code> 导入密钥，后面会提到导入 GitHub 的公钥。</p><hr><p>通过以下命令查看使用 ASCII-armored 格式的公钥：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">gpg --<span class="hljs-built_in">export</span> --armor 4AEE18F83AFDEB23</span><br>-----BEGIN PGP PUBLIC KEY BLOCK-----<br>[...]<br>-----END PGP PUBLIC KEY BLOCK-----<br></code></pre></td></tr></table></figure><p>增加 <code>--output</code> 参数以导出到文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpg --armor --output public-key.gpg --<span class="hljs-built_in">export</span> 4AEE18F83AFDEB23<br></code></pre></td></tr></table></figure><p>导出私钥，需要输入密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpg --armor --output private-key.gpg --export-secret-keys 4AEE18F83AFDEB23<br></code></pre></td></tr></table></figure><p>建议将导出的公私钥和撤销证书做好备份。</p><h3 id="修改用户-ID（UID）"><a href="#修改用户-ID（UID）" class="headerlink" title="修改用户 ID（UID）"></a>修改用户 ID（UID）</h3><p>进入编辑密钥，然后修改 UID，可以添加、设置主 UID、撤销和删除。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">gpg --edit-key 4AEE18F83AFDEB23</span><br><span class="hljs-meta prompt_">gpg&gt; </span><span class="language-bash">adduid</span><br>Real name: Name(Work)<br>Email address: name@work.com<br>Comment:<br>You selected this USER-ID:<br>    &quot;Name(Work) &lt;name@work.com&gt;&quot;<br><br>Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">gpg&gt; </span><span class="language-bash">uid 1</span><br>[ultimate] (1)* Name &lt;name@example.com&gt;<br>[ unknown] (2). Name(Work) &lt;name@work.com&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">gpg&gt; </span><span class="language-bash">primary</span><br>[ultimate] (1)* Name &lt;name@example.com&gt;<br>[ unknown] (2)  Name(Work) &lt;name@work.com&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">gpg&gt; </span><span class="language-bash">uid 1</span><br>[ultimate] (1). Name &lt;name@example.com&gt;<br>[ unknown] (2)  Name(Work) &lt;name@work.com&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">gpg&gt; </span><span class="language-bash">uid 2</span><br>[ultimate] (1). Name &lt;name@example.com&gt;<br>[ unknown] (2)* Name(Work) &lt;name@work.com&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">gpg&gt; </span><span class="language-bash">revuid</span><br>[ultimate] (1). Name &lt;name@example.com&gt;<br>[ revoked] (2)  Name(Work) &lt;name@work.com&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">gpg&gt; </span><span class="language-bash">uid 2</span><br>[ultimate] (1). Name &lt;name@example.com&gt;<br>[ revoked] (2)* Name(Work) &lt;name@work.com&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">gpg&gt; </span><span class="language-bash">deluid</span><br>[ultimate] (1). Name &lt;name@example.com&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">gpg&gt; </span><span class="language-bash">save</span><br></code></pre></td></tr></table></figure><h2 id="Git-GitHub-使用"><a href="#Git-GitHub-使用" class="headerlink" title="Git &amp; GitHub 使用"></a>Git &amp; GitHub 使用</h2><p>Git 提交可以使用 GPG 密钥签名，增加 <code>--show-signature</code> 参数即可显示提交的签名信息。</p><p>未信任的公钥签名的提交显示红色提示。</p><p><img src="https://picture.zhanganzhi.com/2022/06/19/txzi1fd.png" alt="未信任公钥的签名"></p><p>已信任的公钥签名的提交显示青色提示。</p><p><img src="https://picture.zhanganzhi.com/2022/06/19/dje94dq.png" alt="已信任公钥的签名"></p><h3 id="Git-设置"><a href="#Git-设置" class="headerlink" title="Git 设置"></a>Git 设置</h3><p>密钥的 UID 需要包括 Git 使用的邮箱。</p><p>首先告诉 Git 使用的密钥。<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Telling Git about your signing key](https://docs.github.com/en/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key). GitHub Docs. [2022-06-06]. （原始内容[存档](https://web.archive.org/web/20220529202622/https://docs.github.com/en/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key)于2022-05-29）">[3]</span></a></sup></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.signingkey 4AEE18F83AFDEB23<br></code></pre></td></tr></table></figure><p>然后设置提交时使用 GPG 签名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global commit.gpgsign <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="信任-GitHub-公钥"><a href="#信任-GitHub-公钥" class="headerlink" title="信任 GitHub 公钥"></a>信任 GitHub 公钥</h3><p>使用以下命令导入并信任 GitHub 的公钥。<sup id="fnref:11" class="footnote-ref"><a href="#fn:11" rel="footnote"><span class="hint--top hint--rounded" aria-label="VonC. [What is GitHub's public GPG key?](https://stackoverflow.com/questions/60482588/what-is-githubs-public-gpg-key). Stack Overflow. 2022-03-02 [2022-06-06]. （原始内容[存档](https://web.archive.org/web/20211123035710/https://stackoverflow.com/questions/60482588/what-is-githubs-public-gpg-key)于2021-11-23）">[11]</span></a></sup></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs console"><span class="hljs-meta prompt_">$ </span><span class="language-bash">curl https://github.com/web-flow.gpg | gpg --import</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">gpg --edit-key noreply@github.com</span><br><span class="hljs-meta prompt_">gpg&gt; </span><span class="language-bash">trust</span><br><span class="hljs-meta prompt_">gpg&gt; </span><span class="language-bash">save</span><br></code></pre></td></tr></table></figure><h3 id="上传公钥到-GitHub"><a href="#上传公钥到-GitHub" class="headerlink" title="上传公钥到 GitHub"></a>上传公钥到 GitHub</h3><p>打开 GitHub 设置，找到 <code>SSH and GPG Keys</code>。<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Adding a new GPG key to your GitHub account](https://docs.github.com/en/authentication/managing-commit-signature-verification/adding-a-new-gpg-key-to-your-github-account). GitHub Docs. [2022-06-06]. （原始内容[存档](https://web.archive.org/web/20220531040934/https://docs.github.com/en/authentication/managing-commit-signature-verification/adding-a-new-gpg-key-to-your-github-account)于2022-05-31）">[2]</span></a></sup></p><p><img src="https://picture.zhanganzhi.com/2022/06/19/c6mmdq9.png" alt="GitHub 设置"></p><p>点击 <code>New GPG Key</code>，把导出的公钥复制进去。</p><p><img src="https://picture.zhanganzhi.com/2022/06/19/98vpfaj.png" alt="新建 GPG 密钥"></p><p><img src="https://picture.zhanganzhi.com/2022/06/19/eiq03eb.png" alt="填写并保存"></p><p>此时签名的提交在 GitHub 即可显示绿色的 <code>Verified</code>。</p><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://docs.github.com/en/authentication/managing-commit-signature-verification/about-commit-signature-verification">About commit signature verification</a>. GitHub Docs. [2022-06-06]. （原始内容<a href="https://web.archive.org/web/20220606095245/https://docs.github.com/en/authentication/managing-commit-signature-verification/about-commit-signature-verification">存档</a>于2022-06-06）<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://docs.github.com/en/authentication/managing-commit-signature-verification/adding-a-new-gpg-key-to-your-github-account">Adding a new GPG key to your GitHub account</a>. GitHub Docs. [2022-06-06]. （原始内容<a href="https://web.archive.org/web/20220531040934/https://docs.github.com/en/authentication/managing-commit-signature-verification/adding-a-new-gpg-key-to-your-github-account">存档</a>于2022-05-31）<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://docs.github.com/en/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key">Telling Git about your signing key</a>. GitHub Docs. [2022-06-06]. （原始内容<a href="https://web.archive.org/web/20220529202622/https://docs.github.com/en/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key">存档</a>于2022-05-29）<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>阮一峰. <a href="https://www.ruanyifeng.com/blog/2013/07/gpg.html">GPG入门教程</a>. 阮一峰的网络日志. 2013-07-12 [2022-06-06]. （原始内容<a href="https://web.archive.org/web/20220601090505/https://www.ruanyifeng.com/blog/2013/07/gpg.html">存档</a>于2022-06-01）<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>嗯了个踢. <a href="https://zhuanlan.zhihu.com/p/137801979">简明 GPG 概念</a>. 知乎. 2020-05-02 [2022-06-06]. （原始内容<a href="https://web.archive.org/save/https://zhuanlan.zhihu.com/p/137801979">存档</a>于2022-06-06）<a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span>Konstantin Ryabitsev. <a href="https://linux.cn/article-9524-1.html">用 PGP 保护代码完整性（一）： 基本概念和工具</a>. Linux 中国. 2018-04-08 [2022-06-06].<a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span>Konstantin Ryabitsev. <a href="https://linux.cn/article-9529-1.html">用 PGP 保护代码完整性（二）：生成你的主密钥</a>. Linux 中国. 2018-04-09 [2022-06-06].<a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span>UlyC. <a href="https://ulyc.github.io/2021/01/13/2021%E5%B9%B4-%E7%94%A8%E6%9B%B4%E7%8E%B0%E4%BB%A3%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8PGP-%E4%B8%8A/">2021年，用更现代的方法使用PGP（上）</a>. UlyC - C的博客. 2021-01-13 [2022-06-06]. （原始内容<a href="https://web.archive.org/web/20220606133111/https://ulyc.github.io/2021/01/13/2021%E5%B9%B4-%E7%94%A8%E6%9B%B4%E7%8E%B0%E4%BB%A3%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8PGP-%E4%B8%8A/">存档</a>于2022-06-06）<a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:9" class="footnote-text"><span>UlyC. <a href="https://ulyc.github.io/2021/01/18/2021%E5%B9%B4-%E7%94%A8%E6%9B%B4%E7%8E%B0%E4%BB%A3%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8PGP-%E4%B8%AD/">2021年，用更现代的方法使用PGP（中）</a>. UlyC - C的博客. 2021-01-18 [2022-06-06]. （原始内容<a href="https://web.archive.org/web/20220606133131/https://ulyc.github.io/2021/01/18/2021%E5%B9%B4-%E7%94%A8%E6%9B%B4%E7%8E%B0%E4%BB%A3%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8PGP-%E4%B8%AD/">存档</a>于2022-06-06）<a href="#fnref:9" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:10" class="footnote-text"><span>UlyC. <a href="https://ulyc.github.io/2021/01/26/2021%E5%B9%B4-%E7%94%A8%E6%9B%B4%E7%8E%B0%E4%BB%A3%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8PGP-%E4%B8%8B/">2021年，用更现代的方法使用PGP（下）</a>. UlyC - C的博客. 2021-01-26 [2022-06-06]. （原始内容<a href="https://web.archive.org/web/20220606170227/https://ulyc.github.io/2021/01/26/2021%E5%B9%B4-%E7%94%A8%E6%9B%B4%E7%8E%B0%E4%BB%A3%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8PGP-%E4%B8%8B/">存档</a>于2022-06-06）<a href="#fnref:10" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:11" class="footnote-text"><span>VonC. <a href="https://stackoverflow.com/questions/60482588/what-is-githubs-public-gpg-key">What is GitHub’s public GPG key?</a>. Stack Overflow. 2022-03-02 [2022-06-06]. （原始内容<a href="https://web.archive.org/web/20211123035710/https://stackoverflow.com/questions/60482588/what-is-githubs-public-gpg-key">存档</a>于2021-11-23）<a href="#fnref:11" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
      <tag>计算机</tag>
      
      <tag>密码学</tag>
      
      <tag>GPG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Minecraft Forge Mod 开发环境搭建</title>
    <link href="/zh-CN/2022/06/226b86b1999a/"/>
    <url>/zh-CN/2022/06/226b86b1999a/</url>
    
    <content type="html"><![CDATA[<p>本文参考了 <a href="https://boson.v2mcdev.com/introducation/intro.html">Boson 1.16 Modding Tutorial</a> 的 <code>环境配置</code><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[环境配置](https://boson.v2mcdev.com/devenvironment/intro.html). Boson 1.16 Modding Tutorial. [2022-06-04].">[1]</span></a></sup> 部分。</p><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><ul><li>IDE：<a href="https://www.jetbrains.com/zh-cn/idea/">IntelliJ IDEA</a></li><li>Java开发环境：<a href="https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html#:~:text=Java%20SE%20Development%20Kit%208u311">JDK 8u311</a></li><li>安装示例插件：<a href="https://files.minecraftforge.net/net/minecraftforge/forge/">Forge MDK</a></li></ul><p><img src="https://picture.zhanganzhi.com/2022/06/19/hh9z1s5.png" alt="MDK下载"></p><h2 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h2><p>解压下载的压缩文件，使用 IDEA 打开文件夹，等待项目导入完成。</p><p><img src="https://picture.zhanganzhi.com/2022/06/19/575ptqi.png" alt="项目导入完成"></p><p>打开 <code>Settings</code> -&gt; <code>Build, Execution, Deployment</code> -&gt; <code>Build Tools</code> -&gt; <code>Gradle</code>，将 <code>Build and run using</code> 设置为 <code>IntelliJ IDEA</code> 以加快运行速度</p><p><img src="https://picture.zhanganzhi.com/2022/06/19/zmdjmu9.png" alt="Gradle 设置"></p><p>建议将 <code>build.gradle</code> 中的所有 <code>property &#39;forge.logging.console.level&#39;, &#39;debug&#39;</code> 改为 <code>property &#39;forge.logging.console.level&#39;, &#39;info&#39;</code> 以减少日志输出。</p><p>打开右侧的 <code>Gradle</code> 面板，运行 <code>genIntellijRuns</code>。</p><p><img src="https://picture.zhanganzhi.com/2022/06/19/kmxtmtj.png" alt="生成 IDEA 运行配置"></p><p>在右上角选择 <code>runClient</code>，使用 run 或 debug 启动 Minecraft。</p><p><img src="https://picture.zhanganzhi.com/2022/06/19/iyiwnkf.png" alt="点击运行客户端"></p><p><img src="https://picture.zhanganzhi.com/2022/06/19/pt49mui.png" alt="成功运行客户端"></p><h3 id="项目文件结构简介"><a href="#项目文件结构简介" class="headerlink" title="项目文件结构简介"></a>项目文件结构简介</h3><table><thead><tr><th>文件或文件夹</th><th>简介</th></tr></thead><tbody><tr><td>build.gradle</td><td>Gradle 配置文件，大部分项目配置都在这里。</td></tr><tr><td>build 和 out</td><td>编译目录，打包的 jar 文件在 <code>build/libs</code> 中。</td></tr><tr><td>run</td><td>MC 根目录，可以在此处查看日志等信息。</td></tr><tr><td>src</td><td>资源文件和源码目录。</td></tr></tbody></table><h2 id="配置模组信息"><a href="#配置模组信息" class="headerlink" title="配置模组信息"></a>配置模组信息</h2><h3 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h3><p>打开 <code>build.gradle</code>，找到 <code>version</code>、<code>group</code> 和 <code>archiveBaseName</code>。</p><p><img src="https://picture.zhanganzhi.com/2022/06/19/hfsxkze.png" alt="默认的配置"></p><ul><li><code>version</code> 是版本号，一般遵循 Forge的 <a href="https://mcforge.readthedocs.io/en/latest/gettingstarted/versioning/">语义化版本</a>，改为 <code>1.16.5-0.0.1.0</code>。</li><li><code>group</code> 是包名，一般为域名，这里配置为 <code>com.example</code>。</li><li><code>archiveBaseName</code> 是打包的文件的基础名，打包的文件名格式为 <code>&lt;archivesBaseName&gt;-&lt;version&gt;.jar</code>。修改完成后点击右上角的 <code>Load Gradle Changes</code>。</li></ul><p><img src="https://picture.zhanganzhi.com/2022/06/19/lemo4gi.png" alt="修改后的配置"><br><img src="https://picture.zhanganzhi.com/2022/06/19/l2fu0mi.png" alt="点击加载新配置"></p><h3 id="mods-toml"><a href="#mods-toml" class="headerlink" title="mods.toml"></a>mods.toml</h3><p>这部分内容可以在游戏内的模组列表看到效果。打开 <code>src/main/resources/META-INF/mods.toml</code>，注释说明得很全面，也可以参考下表<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Structuring Your Mod](https://mcforge.readthedocs.io/en/latest/gettingstarted/structuring/). Forge Documentation. [2022-06-04]. （原始内容[存档](https://web.archive.org/web/20220605133857/https://mcforge.readthedocs.io/en/latest/gettingstarted/structuring/)于2022-06-05）.">[2]</span></a></sup>：</p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>license</td><td>string</td><td>许可证名称。</td></tr><tr><td>modid</td><td>string</td><td>modid。</td></tr><tr><td>version</td><td>string</td><td>模组版本，必须是点分隔的数字，最好符合 Forge 的 <a href="https://mcforge.readthedocs.io/en/latest/gettingstarted/versioning/">语义化版本</a> 结构。</td></tr><tr><td>displayName</td><td>string</td><td>模组显示的名称。</td></tr><tr><td>updateJSONURL</td><td>string</td><td><a href="https://mcforge.readthedocs.io/en/latest/misc/updatechecker/">版本 JSON 文件</a> 的 URL。</td></tr><tr><td>displayURL</td><td>string</td><td>模组主页的URL。</td></tr><tr><td>logoFile</td><td>string</td><td>logo 文件名，必须位于 resources 文件夹内。</td></tr><tr><td>credits</td><td>string</td><td>鸣谢。</td></tr><tr><td>authors</td><td>string</td><td>模组作者。</td></tr><tr><td>description</td><td>string</td><td>模组描述，可以是多行。</td></tr><tr><td>dependencies</td><td>[list]</td><td>模组依赖列表。</td></tr></tbody></table><h3 id="模组主类"><a href="#模组主类" class="headerlink" title="模组主类"></a>模组主类</h3><p>删除 <code>src/main/java</code> 内的全部文件，按 <code>group</code> 和 <code>modid</code>，自己新建一个包和类，这个类就是模组的入口，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.examplemod;<br><br><span class="hljs-keyword">import</span> net.minecraftforge.fml.common.Mod;<br><br><span class="hljs-meta">@Mod(&quot;examplemod&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExampleMod</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="pack-mcmeta"><a href="#pack-mcmeta" class="headerlink" title="pack.mcmeta"></a>pack.mcmeta</h3><p>数据包描述，可以修改 <code>description</code>。</p><p><img src="https://picture.zhanganzhi.com/2022/06/19/f9kf0y9.png" alt="选择数据包的界面"></p><h2 id="其它模组"><a href="#其它模组" class="headerlink" title="其它模组"></a>其它模组</h2><h3 id="依赖项"><a href="#依赖项" class="headerlink" title="依赖项"></a>依赖项</h3><p>如果想将某个模组设置为依赖项，需要在 <code>mods.toml</code> 中配置，每一个依赖项的格式必须为 <code>[[dependencies.modid]]</code>，参考下表<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Mods.toml](https://forge.gemwire.uk/wiki/Mods.toml#:~:text=http%3A//example.com/%22-,Dependency%20Configurations,-Mods%20can%20define). Forge Community Wiki. 2022-03-22 [2022-06-04]. （原始内容[存档](https://web.archive.org/web/20220605134745/https://forge.gemwire.uk/wiki/Mods.toml#:~:text=http%3A//example.com/%22-,Dependency%20Configurations,-Mods%20can%20define)于2022-06-05）.">[3]</span></a></sup>：</p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>modId</td><td>string</td><td>依赖项的模组 ID。</td></tr><tr><td>mandatory</td><td>boolean</td><td>依赖项未满足时是否崩溃。</td></tr><tr><td>versionRange</td><td>string</td><td>可接受的依赖项版本，以 <a href="https://maven.apache.org/enforcer/enforcer-rules/versionRanges.html">Maven version spec</a> 表示。空字符串为无边界版本范围，即匹配任意版本。</td></tr><tr><td>ordering</td><td>string</td><td>定义模组是否必须在此依赖项之前或之后加载。有效值为 <code>BEFORE</code>（必须在之前加载）、<code>AFTER</code>（必须在之后加载）和 <code>NONE</code>（不关心顺序）。</td></tr><tr><td>side</td><td>string</td><td>有效值为 <code>CLIENT</code>（存在于客户端）、<code>SERVER</code>（存在于专用服务器）和 <code>BOTH</code>（存在于两侧）。</td></tr></tbody></table><p>尽管空字符串的 <code>versionRange</code> 可以匹配任意版本，但是建议使用 <code>[0,)</code> 匹配。</p><h3 id="加载模组"><a href="#加载模组" class="headerlink" title="加载模组"></a>加载模组</h3><p>如果想加载其它模组，不可以直接放在 <code>/run/mods</code> 中加载，需要配置 <code>build.gradle</code>。<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Dependencies](https://forge.gemwire.uk/wiki/Dependencies). Forge Community Wiki. 2021-08-02 [2022-06-04]. （原始内容[存档](https://web.archive.org/web/20220605135343/https://forge.gemwire.uk/wiki/Dependencies)于2022-06-05）.">[4]</span></a></sup></p><p>大部分模组都会提供配置信息，比如 JEI<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Getting Started [1.13 and Up]](https://github.com/mezz/JustEnoughItems/wiki/Getting-Started-%5B1.13-and-Up%5D). mezz/JustEnoughItems Wiki. 2021-11-30 [2022-06-05]. （原始内容[存档](https://web.archive.org/web/20220605140318/https://github.com/mezz/JustEnoughItems/wiki/Getting-Started-%5B1.13-and-Up%5D)于2022-06-05）.">[5]</span></a></sup>，配置 <code>build.gradle</code> 即可正确加载：</p><p><img src="https://picture.zhanganzhi.com/2022/06/19/ei54p06.png" alt="JEI 提供的配置"></p><p>也有部分模组不提供，可以使用以下两种方式。</p><h4 id="本地文件"><a href="#本地文件" class="headerlink" title="本地文件"></a>本地文件</h4><p>在项目根目录创建一个 <code>lib</code> 文件夹，将下载的模组文件放入该文件夹。</p><p>在 <code>build.gradle</code> 中添加以下配置：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">repositories</span> &#123;<br>    <span class="hljs-keyword">flatDir</span> &#123;<br>        dirs <span class="hljs-string">&#x27;lib&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>depdependencies</code> 的格式如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">runtimeOnly fg.deobf(<span class="hljs-string">&quot;&lt;group&gt;:&lt;artifact&gt;:&lt;version&gt;&quot;</span>)<br></code></pre></td></tr></table></figure><p>以 JEI 为例，下载 <code>jei-1.16.5-7.7.1.152.jar</code>，放入 <code>lib</code> 文件夹，配置如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">runtimeOnly fg.deobf(<span class="hljs-string">&quot;mezz.jei:jei:1.16.5-7.7.1.152&quot;</span>)<br></code></pre></td></tr></table></figure><p>注：group 不影响本地文件加载，可以随意填写。</p><h4 id="Curse-Maven"><a href="#Curse-Maven" class="headerlink" title="Curse Maven"></a><a href="https://www.cursemaven.com/">Curse Maven</a></h4><p>本地文件的方式并不方便，需要手动下载模组，对多人合作也不友好，<a href="https://www.cursemaven.com/">Curse Maven</a> 支持所有上传到 <a href="https://www.curseforge.com/">Curse Forge</a> 的模组，在 <code>build.gradle</code> 中添加以下配置：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">repositories</span> &#123;<br>    maven &#123;<br>        url <span class="hljs-string">&quot;https://cursemaven.com&quot;</span><br>        content &#123;<br>            includeGroup <span class="hljs-string">&quot;curse.maven&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>depdependencies</code> 的格式如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">runtimeOnly fg.deobf(<span class="hljs-string">&quot;curse.maven:&lt;descriptor&gt;-&lt;projectid&gt;:&lt;fileids&gt;&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://picture.zhanganzhi.com/2022/06/19/n6j3daq.png" alt="&amp;ltdescriptor&gt; 可以为任意内容，这会显示在下载的文件名汇总，最好设置为模组的名称，如项目名"></p><p><img src="https://picture.zhanganzhi.com/2022/06/19/8bjqnnp.png" alt="&amp;ltprojectid&gt; 项目ID"></p><p><img src="https://picture.zhanganzhi.com/2022/06/19/c07tjwl.png" alt="&amp;ltfileids&gt; 文件ID"></p><p>以 <a href="https://www.curseforge.com/minecraft/mc-mods/jei/files/3681294">JEI 1.16.5-7.7.1.152</a> 为例，配置如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">runtimeOnly fg.deobf(<span class="hljs-string">&quot;curse.maven:jei-238222:3681294&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="GitHub-Actions-配置（可选）"><a href="#GitHub-Actions-配置（可选）" class="headerlink" title="GitHub Actions 配置（可选）"></a>GitHub Actions 配置（可选）</h2><p>通过配置 GitHub Actions，可以实现发布 Release 和 PR 自动打包。</p><p>首先修改 <code>build.gradle</code>，将 <code>version</code> 部分改为以下内容：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">project</span>.hasProperty(<span class="hljs-string">&#x27;inputVersion&#x27;</span>)) &#123;<br>    version = <span class="hljs-keyword">project</span>.inputVersion<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    version = <span class="hljs-string">&#x27;1.16.5-0.0.1.0&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>创建 <code>.github/workflows</code> 文件夹，创建两个 <code>yml</code> 文件，注意修改 <code>&lt;modname&gt;</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Release</span> <span class="hljs-string">Packer</span><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">workflow_dispatch:</span><br>    <span class="hljs-attr">inputs:</span><br>      <span class="hljs-attr">version:</span><br>        <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;Release Version&#x27;</span><br>        <span class="hljs-attr">required:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">string</span><br>      <span class="hljs-attr">pre_release:</span><br>        <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;This is a pre-release&#x27;</span><br>        <span class="hljs-attr">required:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">boolean</span><br>        <span class="hljs-attr">default:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">env:</span><br>  <span class="hljs-attr">NAME:</span> <span class="hljs-string">&lt;modname&gt;-$&#123;&#123;</span> <span class="hljs-string">github.event.inputs.version</span> <span class="hljs-string">&#125;&#125;</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">pack:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Pack</span><br><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Check</span> <span class="hljs-string">Out</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Java</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-java@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">java-version:</span> <span class="hljs-string">&#x27;8&#x27;</span><br>          <span class="hljs-attr">distribution:</span> <span class="hljs-string">&#x27;adopt&#x27;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Chmod</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">chmod</span> <span class="hljs-string">+x</span> <span class="hljs-string">./gradlew</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Pack</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">./gradlew</span> <span class="hljs-string">jar</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Create</span> <span class="hljs-string">Release</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-string">create_release</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/create-release@v1</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">GITHUB_TOKEN:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">tag_name:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.event.inputs.version</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">release_name:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.NAME</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">draft:</span> <span class="hljs-literal">false</span><br>          <span class="hljs-attr">prerelease:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.event.inputs.pre_release</span> <span class="hljs-string">&#125;&#125;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Upload</span> <span class="hljs-string">Release</span> <span class="hljs-string">Asset</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/upload-release-asset@v1</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">GITHUB_TOKEN:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">upload_url:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">steps.create_release.outputs.upload_url</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">asset_path:</span> <span class="hljs-string">build/libs/$&#123;&#123;</span> <span class="hljs-string">env.NAME</span> <span class="hljs-string">&#125;&#125;.jar</span><br>          <span class="hljs-attr">asset_name:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.NAME</span> <span class="hljs-string">&#125;&#125;.jar</span><br>          <span class="hljs-attr">asset_content_type:</span> <span class="hljs-string">application/java-archive</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">PR</span> <span class="hljs-string">Packer</span><br><span class="hljs-attr">on:</span> <span class="hljs-string">pull_request_target</span><br><br><span class="hljs-attr">env:</span><br>  <span class="hljs-attr">NAME:</span> <span class="hljs-string">&quot;&lt;modname&gt;-#$<span class="hljs-template-variable">&#123;&#123; github.event.number &#125;&#125;</span>&quot;</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">pack:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Pack</span><br><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Check</span> <span class="hljs-string">Out</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">ref:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.event.pull_request.head.sha</span> <span class="hljs-string">&#125;&#125;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Java</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-java@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">java-version:</span> <span class="hljs-string">&#x27;8&#x27;</span><br>          <span class="hljs-attr">distribution:</span> <span class="hljs-string">&#x27;adopt&#x27;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Chmod</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">chmod</span> <span class="hljs-string">+x</span> <span class="hljs-string">./gradlew</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Pack</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">&quot;./gradlew -PinputVersion=#$<span class="hljs-template-variable">&#123;&#123; github.event.number &#125;&#125;</span> jar&quot;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Upload</span> <span class="hljs-string">Artifact</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/upload-artifact@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.NAME</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">build/libs/$&#123;&#123;</span> <span class="hljs-string">env.NAME</span> <span class="hljs-string">&#125;&#125;.jar</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Find</span> <span class="hljs-string">Comment</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-string">find_comment</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">peter-evans/find-comment@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">issue-number:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.event.number</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">comment-author:</span> <span class="hljs-string">github-actions[bot]</span><br>          <span class="hljs-attr">direction:</span> <span class="hljs-string">first</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Create</span> <span class="hljs-string">Comment</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">peter-evans/create-or-update-comment@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">issue-number:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.event.number</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">body:</span> <span class="hljs-string">在</span> [<span class="hljs-string">这里</span>]<span class="hljs-string">(../actions/runs/$&#123;&#123;</span> <span class="hljs-string">github.run_id</span> <span class="hljs-string">&#125;&#125;)</span> <span class="hljs-string">下载此</span> <span class="hljs-string">PR</span> <span class="hljs-string">的最新打包。</span><br>        <span class="hljs-attr">if:</span> <span class="hljs-string">steps.find_comment.outputs.comment-id</span> <span class="hljs-string">==</span> <span class="hljs-number">0</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Update</span> <span class="hljs-string">Comment</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">peter-evans/create-or-update-comment@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">comment-id:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">steps.find_comment.outputs.comment-id</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">body:</span> <span class="hljs-string">在</span> [<span class="hljs-string">这里</span>]<span class="hljs-string">(../actions/runs/$&#123;&#123;</span> <span class="hljs-string">github.run_id</span> <span class="hljs-string">&#125;&#125;)</span> <span class="hljs-string">下载此</span> <span class="hljs-string">PR</span> <span class="hljs-string">的最新打包。</span><br>          <span class="hljs-attr">edit-mode:</span> <span class="hljs-string">replace</span><br>        <span class="hljs-attr">if:</span> <span class="hljs-string">steps.find_comment.outputs.comment-id</span> <span class="hljs-type">!=</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><section class="footnotes"><h2 id="Reference">Reference</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://boson.v2mcdev.com/devenvironment/intro.html">环境配置</a>. Boson 1.16 Modding Tutorial. [2022-06-04].<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://mcforge.readthedocs.io/en/latest/gettingstarted/structuring/">Structuring Your Mod</a>. Forge Documentation. [2022-06-04]. （原始内容<a href="https://web.archive.org/web/20220605133857/https://mcforge.readthedocs.io/en/latest/gettingstarted/structuring/">存档</a>于2022-06-05）.<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://forge.gemwire.uk/wiki/Mods.toml#:~:text=http%3A//example.com/%22-,Dependency%20Configurations,-Mods%20can%20define">Mods.toml</a>. Forge Community Wiki. 2022-03-22 [2022-06-04]. （原始内容<a href="https://web.archive.org/web/20220605134745/https://forge.gemwire.uk/wiki/Mods.toml#:~:text=http%3A//example.com/%22-,Dependency%20Configurations,-Mods%20can%20define">存档</a>于2022-06-05）.<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://forge.gemwire.uk/wiki/Dependencies">Dependencies</a>. Forge Community Wiki. 2021-08-02 [2022-06-04]. （原始内容<a href="https://web.archive.org/web/20220605135343/https://forge.gemwire.uk/wiki/Dependencies">存档</a>于2022-06-05）.<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://github.com/mezz/JustEnoughItems/wiki/Getting-Started-%5B1.13-and-Up%5D">Getting Started [1.13 and Up]</a>. mezz&#x2F;JustEnoughItems Wiki. 2021-11-30 [2022-06-05]. （原始内容<a href="https://web.archive.org/web/20220605140318/https://github.com/mezz/JustEnoughItems/wiki/Getting-Started-%5B1.13-and-Up%5D">存档</a>于2022-06-05）.<a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Minecraft</category>
      
      <category>Mod</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Minecraft</tag>
      
      <tag>Java</tag>
      
      <tag>Forge</tag>
      
      <tag>Mod</tag>
      
      <tag>Gradle</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
